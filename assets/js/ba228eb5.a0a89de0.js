"use strict";(self.webpackChunksmooth=self.webpackChunksmooth||[]).push([[5743],{8214:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>k,contentTitle:()=>m,default:()=>g,frontMatter:()=>h,metadata:()=>p,toc:()=>y});var n=i(7462),a=i(7294),s=i(3905),o=i(5154);const r={github:"GitHub",discord:"Discord",google_doc_comments:"Google Doc"},l={github:a.createElement(o.hJX,{className:"inline-block pt-1"}),discord:a.createElement(o.j2d,{className:"inline-block pt-1"}),google_doc_comments:a.createElement(o.ldW,{className:"inline-block pt-1"})};function c(e){let{children:t,author:i,link:n,createTime:s,source:o,retrieveTime:c}=e;return a.createElement("div",{className:"discussion-comment border border-solid border-slate-200 rounded mb-8 px-4 py-4"},a.createElement("div",{className:"flex flex-row mb-4"},a.createElement("span",{className:"font-semibold"},i),"\u2003",a.createElement("span",null,s),a.createElement("span",{className:"flex-1"}),a.createElement("a",{href:n},l[o],"\xa0",r[o])),t)}const u={toc:[{value:"ProposalLet Flutter run animations at 60fps even if there are heavy widgets, possibly using React Fiber-like or suspend-like algorithm?",id:"proposallet-flutter-run-animations-at-60fps-even-if-there-are-heavy-widgets-possibly-using-react-fiber-like-or-suspend-like-algorithm",level:3},{value:"1. For CircularProgressIndicator, or high-priority widgets without low-priority children",id:"1-for-circularprogressindicator-or-high-priority-widgets-without-low-priority-children",level:4},{value:"2. For ListView scrolling problem, or high-priority widgets with low-priority children",id:"2-for-listview-scrolling-problem-or-high-priority-widgets-with-low-priority-children",level:4},{value:"More about &quot;how to build suspendable/interruptable&quot;, given that sync generators are slow",id:"more-about-how-to-build-suspendableinterruptable-given-that-sync-generators-are-slow",level:4},{value:"How can we paint UI onto screen, if we are in half-way of layout/paint/rasterize, and many nodes are dirty / half-way updated?",id:"how-can-we-paint-ui-onto-screen-if-we-are-in-half-way-of-layoutpaintrasterize-and-many-nodes-are-dirty--half-way-updated",level:4},{value:"Progress: 62ms -&gt; 22ms for 99th build time of <code>list_text_layout</code>, and its limitations",id:"progress-62ms---22ms-for-99th-build-time-of-list_text_layout-and-its-limitations",level:3},{value:"Limitations",id:"limitations",level:3},{value:"New idea: Dual isolates",id:"new-idea-dual-isolates",level:3},{value:"Advantages",id:"advantages",level:4},{value:"Background",id:"background",level:4},{value:"Design",id:"design",level:4},{value:"Further improvements",id:"further-improvements",level:4},{value:"What is <code>ShiftTheChild</code>",id:"what-is-shiftthechild",level:4},{value:"Minimal example",id:"minimal-example",level:4},{value:"UML Diagram",id:"uml-diagram",level:4},{value:"Transform",id:"transform",level:2},{value:"Widget tree build:",id:"widget-tree-build",level:3},{value:"Element &amp; RO tree build",id:"element--ro-tree-build",level:3},{value:"Rethinking (overcoming) the shortcomings of the <code>Suspendable</code> &quot;62ms-&gt;22ms&quot; experiment",id:"rethinking-overcoming-the-shortcomings-of-the-suspendable-62ms-22ms-experiment",level:3},{value:"Enhance <code>keframe</code>: Now seems it can build/layout as many items as possible until time is up, i.e. have strategy similar to the &quot;layout&quot; proposal above",id:"enhance-keframe-now-seems-it-can-buildlayout-as-many-items-as-possible-until-time-is-up-ie-have-strategy-similar-to-the-layout-proposal-above",level:3},{value:"The problem",id:"the-problem",level:4},{value:"The solution",id:"the-solution",level:4},{value:"Full code example and output",id:"full-code-example-and-output",level:4},{value:"New idea: Preemption",id:"new-idea-preemption",level:3},{value:"Advantages",id:"advantages-1",level:4},{value:"Details",id:"details",level:4},{value:"Prototype: Enter-new-heavy-page, smoothly even though it takes 0.5s to build/layout",id:"prototype-enter-new-heavy-page-smoothly-even-though-it-takes-05s-to-buildlayout",level:3},{value:"Defects in the prototype compared to the future full implementation",id:"defects-in-the-prototype-compared-to-the-future-full-implementation",level:4},{value:"Code",id:"code",level:4},{value:"Downloadable app",id:"downloadable-app",level:4},{value:"Video",id:"video",level:4},{value:"Brief visual update: It runs at ~60fps, while widget build/layout needs ~500ms",id:"brief-visual-update-it-runs-at-60fps-while-widget-buildlayout-needs-500ms",level:3},{value:"Exposing hook about tickers with zero overhead",id:"exposing-hook-about-tickers-with-zero-overhead",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist",level:2},{value:"Exposing hook for RenderObject.layout with zero overhead",id:"exposing-hook-for-renderobjectlayout-with-zero-overhead",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-1",level:2},{value:"Allow render to be called multiple times for one BeginFrame",id:"allow-render-to-be-called-multiple-times-for-one-beginframe",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-2",level:2},{value:"<code>AutomatedTestWidgetsFlutterBinding.pump</code> provides wrong pump time stamp, probably because of forgetting the precision",id:"automatedtestwidgetsflutterbindingpump-provides-wrong-pump-time-stamp-probably-because-of-forgetting-the-precision",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-3",level:2},{value:"Export <code>elapseBlocking</code> to test binding, so slow sync work can be simulated such as a slow widget build",id:"export-elapseblocking-to-test-binding-so-slow-sync-work-can-be-simulated-such-as-a-slow-widget-build",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-4",level:2},{value:"Fix logic error in <code>markNeedsPaint</code>",id:"fix-logic-error-in-markneedspaint",level:3},{value:"Problem 1: RenderView does not come to this branch",id:"problem-1-renderview-does-not-come-to-this-branch",level:3},{value:"Problem 2: Root is not always told to paint indeed",id:"problem-2-root-is-not-always-told-to-paint-indeed",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-5",level:2},{value:"WIP Tentative experiment to see how to fix logic error about skippedPaintingOnLayer",id:"wip-tentative-experiment-to-see-how-to-fix-logic-error-about-skippedpaintingonlayer",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-6",level:2},{value:"Add warning that <code>RenderRepaintBoundary.toImage</code> and <code>OffsetLayer.toImage</code> is slow",id:"add-warning-that-renderrepaintboundarytoimage-and-offsetlayertoimage-is-slow",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-7",level:2},{value:"Update comments that seem to contradict the code and may confuse the reader",id:"update-comments-that-seem-to-contradict-the-code-and-may-confuse-the-reader",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-8",level:2},{value:"Minor change type nullability",id:"minor-change-type-nullability",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-9",level:2},{value:"Expose <code>vsync</code> information to developer",id:"expose-vsync-information-to-developer",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-10",level:2},{value:"Quick update: ListView scrolling at 60FPS with heavy build/layout",id:"quick-update-listview-scrolling-at-60fps-with-heavy-buildlayout",level:3},{value:"Reland <code>AutomatedTestWidgetsFlutterBinding.pump</code> provides wrong pump time stamp, probably because of forgetting the precision, via optional flag",id:"reland-automatedtestwidgetsflutterbindingpump-provides-wrong-pump-time-stamp-probably-because-of-forgetting-the-precision-via-optional-flag",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-11",level:2},{value:"Fix wrong <code>VSYNC</code> event",id:"fix-wrong-vsync-event",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-12",level:2},{value:"Allow disable report timing in profile build since it takes not-negligible amount of time",id:"allow-disable-report-timing-in-profile-build-since-it-takes-not-negligible-amount-of-time",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-13",level:2},{value:"Expose <code>NotifyIdle</code> from RuntimeController to Dart, allowing <code>flutter_smooth</code> to get 60FPS, even if GC needs to run for 14ms per 16.67ms",id:"expose-notifyidle-from-runtimecontroller-to-dart-allowing-flutter_smooth-to-get-60fps-even-if-gc-needs-to-run-for-14ms-per-1667ms",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-14",level:2},{value:"Fix 1-char typo",id:"fix-1-char-typo",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-15",level:2},{value:"Eliminate duplicated code when dealing with pointer data",id:"eliminate-duplicated-code-when-dealing-with-pointer-data",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-16",level:2},{value:"Speed up pointer data packet dispatching by roughly 2x when multiple packets come",id:"speed-up-pointer-data-packet-dispatching-by-roughly-2x-when-multiple-packets-come",level:3},{value:"Benefits for Flutter (without considering flutter_smooth)",id:"benefits-for-flutter-without-considering-flutter_smooth",level:4},{value:"Benefits for flutter_smooth",id:"benefits-for-flutter_smooth",level:4},{value:"Pre-launch Checklist",id:"pre-launch-checklist-17",level:2},{value:"Make deadline of <code>NotifyIdle</code> configurable, allowing <code>flutter_smooth</code> to get 60FPS, even if GC needs to run for 14ms per 16.67ms",id:"make-deadline-of-notifyidle-configurable-allowing-flutter_smooth-to-get-60fps-even-if-gc-needs-to-run-for-14ms-per-1667ms",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-18",level:2},{value:"Fix jank and large-jumping frame by controlling rasterizer ending time",id:"fix-jank-and-large-jumping-frame-by-controlling-rasterizer-ending-time",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-19",level:2},{value:"<code>flutter_smooth</code> package is out now :)",id:"flutter_smooth-package-is-out-now-",level:3},{value:"Maybe another typo (2 char only)",id:"maybe-another-typo-2-char-only",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-20",level:2},{value:"Fix janks caused by await vsync in classical Flutter",id:"fix-janks-caused-by-await-vsync-in-classical-flutter",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-21",level:2},{value:"Remove (3N-1) jank and big-jump when N rasterization misses deadline",id:"remove-3n-1-jank-and-big-jump-when-n-rasterization-misses-deadline",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-22",level:2},{value:"Add <code>peekPointerDataPacket</code> to get pointer data packets earlier",id:"add-peekpointerdatapacket-to-get-pointer-data-packets-earlier",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-23",level:2},{value:"Provide fallback vsync target time for <code>window.render</code>",id:"provide-fallback-vsync-target-time-for-windowrender",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-24",level:2},{value:"Fix incorrect newline in pull request template",id:"fix-incorrect-newline-in-pull-request-template",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-25",level:2},{value:"Fix errors when using multiple build/pipeline owners",id:"fix-errors-when-using-multiple-buildpipeline-owners",level:3},{value:"Reproduction code and output",id:"reproduction-code-and-output",level:3},{value:"Performance overhead",id:"performance-overhead",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-26",level:2},{value:"Expose <code>Ticker.startTime</code> so users know the start time and the absolute time",id:"expose-tickerstarttime-so-users-know-the-start-time-and-the-absolute-time",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-27",level:2},{value:"Fix bug that<code>timeDilation</code> is not reset, causing subsequent test errors, and add verifications to ensure such problem does not exist in the future",id:"fix-bug-thattimedilation-is-not-reset-causing-subsequent-test-errors-and-add-verifications-to-ensure-such-problem-does-not-exist-in-the-future",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-28",level:2},{value:"Allow <code>GestureBinding</code> subclasses to know <code>hitTest</code> information",id:"allow-gesturebinding-subclasses-to-know-hittest-information",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-29",level:2},{value:"Enable a frame to be scheduled immediately",id:"enable-a-frame-to-be-scheduled-immediately",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-30",level:2},{value:"Fix wasted memory caused by debug fields - 16 bytes per object (when adding that should-be-removed field crosses double-word alignment)",id:"fix-wasted-memory-caused-by-debug-fields---16-bytes-per-object-when-adding-that-should-be-removed-field-crosses-double-word-alignment",level:3},{value:"Theoretical analysis",id:"theoretical-analysis",level:2},{value:"Experimental analysis",id:"experimental-analysis",level:2},{value:"Setup",id:"setup",level:3},{value:"Operations",id:"operations",level:3},{value:"Results",id:"results",level:3},{value:"Without PR",id:"without-pr",level:4},{value:"With this PR",id:"with-this-pr",level:4},{value:"Conclusion",id:"conclusion",level:3},{value:"Without PR",id:"without-pr-1",level:4},{value:"Pre-launch Checklist",id:"pre-launch-checklist-31",level:2},{value:"Let <code>_debugCheckNotUsedAsOldLayer</code> provide hashcode in addition to runtime type",id:"let-_debugchecknotusedasoldlayer-provide-hashcode-in-addition-to-runtime-type",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-32",level:2},{value:"Fix <code>addToScene</code> documentation",id:"fix-addtoscene-documentation",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-33",level:2},{value:"WIP Fix <code>Layer ... was previously used as oldLayer</code>, caused by LeaderLayer addToScene bug",id:"wip-fix-layer--was-previously-used-as-oldlayer-caused-by-leaderlayer-addtoscene-bug",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-34",level:2},{value:"<code>Layer ... was previously used as oldLayer</code> assertion error in debug mode, and page being blank in release mode, caused by LeaderLayer addToScene bug",id:"layer--was-previously-used-as-oldlayer-assertion-error-in-debug-mode-and-page-being-blank-in-release-mode-caused-by-leaderlayer-addtoscene-bug",level:3},{value:"The real world bug",id:"the-real-world-bug",level:3},{value:"The minimal reproduction",id:"the-minimal-reproduction",level:3},{value:"Why that causes bug",id:"why-that-causes-bug",level:3},{value:"Why is the solution valid",id:"why-is-the-solution-valid",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-35",level:2},{value:"Introduce debugWithActiveLayoutCleared to avoid duplicated code",id:"introduce-debugwithactivelayoutcleared-to-avoid-duplicated-code",level:3},{value:"Performance difference",id:"performance-difference",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-36",level:2},{value:"Fix incorrectly named &quot;debug&quot; prefix",id:"fix-incorrectly-named-debug-prefix",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-37",level:2},{value:"Avoid future bugs about wrong manipulation of engineLayer inside addToScene",id:"avoid-future-bugs-about-wrong-manipulation-of-enginelayer-inside-addtoscene",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-38",level:2},{value:"Minor code cleanup: remove redundant return",id:"minor-code-cleanup-remove-redundant-return",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-39",level:2},{value:"Tiny fix about outdated message",id:"tiny-fix-about-outdated-message",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-40",level:2},{value:"Incorrect rendering of <code>SnapshotWidget</code>",id:"incorrect-rendering-of-snapshotwidget",level:3},{value:"Problem description",id:"problem-description",level:3},{value:"How PR solves it",id:"how-pr-solves-it",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-41",level:2},{value:"Refactor usages of <code>physicalSizeTestValue</code> to simplify code and improve DX",id:"refactor-usages-of-physicalsizetestvalue-to-simplify-code-and-improve-dx",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-42",level:2},{value:"Fix error when resetting configurations in tear down phase",id:"fix-error-when-resetting-configurations-in-tear-down-phase",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-43",level:2},{value:"Tiny improvement of RouteSettings display",id:"tiny-improvement-of-routesettings-display",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-44",level:2},{value:"Tiny code cleanup: remove unnecessary comparisons",id:"tiny-code-cleanup-remove-unnecessary-comparisons",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-45",level:2},{value:"Ensure methods like dispose are not async by accident",id:"ensure-methods-like-dispose-are-not-async-by-accident",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-46",level:2},{value:"Clarify what AnimatedBuilder really speeds up when using <code>child</code>",id:"clarify-what-animatedbuilder-really-speeds-up-when-using-child",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-47",level:2},{value:"<code>ThemeData</code> does not respect <code>ColorScheme</code> for TabBar, CheckBox, etc",id:"themedata-does-not-respect-colorscheme-for-tabbar-checkbox-etc",level:3},{value:"Pre-launch Checklist",id:"pre-launch-checklist-48",level:2},{value:"Fix jank and large-jumping frame by controlling rasterizer ending time (V2)",id:"fix-jank-and-large-jumping-frame-by-controlling-rasterizer-ending-time-v2",level:3},{value:"Fix janks caused by await vsync in classical Flutter (V2)",id:"fix-janks-caused-by-await-vsync-in-classical-flutter-v2",level:3},{value:"Reproduction",id:"reproduction",level:2},{value:"Setup and analysis",id:"setup-and-analysis",level:3},{value:"Data",id:"data",level:3},{value:"Remove (3N-1) jank and big-jump when N rasterization misses deadline (V2)",id:"remove-3n-1-jank-and-big-jump-when-n-rasterization-misses-deadline-v2",level:3}]};function d(e){let{components:t,...i}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-04-02T05:45:54Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"proposallet-flutter-run-animations-at-60fps-even-if-there-are-heavy-widgets-possibly-using-react-fiber-like-or-suspend-like-algorithm"},"[Proposal]","Let Flutter run animations at 60fps even if there are heavy widgets, possibly using React Fiber-like or suspend-like algorithm?"),(0,s.kt)("p",null,"EDIT: Design proposal ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?usp=sharing"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?usp=sharing")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Below (folded) are the initial proposal. However, I have realized the initial proposal has many drawbacks, and have raised new proposals. For example, ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1249005541"},"the dual isolate")," (click to view that comment)."),(0,s.kt)("details",null,(0,s.kt)("p",null,"Hi thanks for the framework! As we all know, React Fiber improves the performance and smoothness of React. Currently I am also observing some jank for Flutter app even after optimizing it using the tooltips in official doc, and I do hope there can be something similar to Fiber in Flutter side."),(0,s.kt)("p",null,"p.s. Some doc about react fiber: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/acdlite/react-fiber-architecture"},"https://github.com/acdlite/react-fiber-architecture")),(0,s.kt)("p",null,"I am interested in making contribution when having time as well."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-04-02T08:22:05Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"if I understand correctly you compare reconciling DOMs to rebuilding the elements in a widget tree\nand you are proposing to rebuild only certain elements the same way react-fiber prioritize")),(0,s.kt)("p",null,"Possibly not only Widget build, but also layout, paint, etc. Since it is often the case that the layout/paint cost time."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"give the developer the ability to set a widgets to low rendering priority")),(0,s.kt)("p",null,"Sounds reasonable.")),(0,s.kt)(c,{author:"maheshmnj",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-04-04T07:48:34Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hi @fzyzcjy, Thanks for filing the issue. I am quite not sure about the algorithm and its effectiveness. Labeling this issue for further insights from the team."),(0,s.kt)("p",null,"cc: @dnfield  ")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-04-04T08:07:41Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@maheshmnj Hi thanks for the reply."),(0,s.kt)("p",null,"I have made an attempt about doing async rendering ",(0,s.kt)("em",{parentName:"p"},"without modifying")," Flutter framework: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth_render"},"https://github.com/fzyzcjy/flutter_smooth_render")," But the result is not very interesting - seems that we really need to dig into the framework itself instead of making a wrapper layer around it.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-04-04T14:56:51Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I've been talking about something somewhat like this on the #hackers-framework channel in the past, but it's not a trivial problem to solve. I'd be interested in seeing more details about your designproposal and/or discussing on discord.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-04-04T16:37:22Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And FWIW, this is likely a pretty significant amount of work to do, but there are some people who have already started looking at parts of it @hixie @goderbauer ")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-04-05T00:31:09Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Hi thanks for the reply! "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"but there are some people who have already started looking at parts of it @Hixie @goderbauer")),(0,s.kt)("p",null,"To avoid reinventing the wheel, I hope to listen to the parts before thinking about what to do next")),(0,s.kt)(c,{author:"wangying3426",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-08T02:57:10Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy Any update please? We are also interested in this feature.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-08T03:06:09Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@wangying3426 Well, no updates from me since I want to firstly listen to the "who have already started looking at parts of it @Hixie @goderbauer"')),(0,s.kt)(c,{author:"JsouLiang",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-14T07:04:33Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Hixie @goderbauer @dnfield How do you think about this fiber proposal?")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-14T16:21:36Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"No one has come up with a workable proposal at this point in time. I think it's worth doing but it's not my top priority at the moment.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-14T23:11:50Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"but it's not my top priority at the moment.")),(0,s.kt)("p",null,"As mentioned earlier, I am willing to PR and contribute. But surely need some suggestions and discussions prior to start implementing :)"),(0,s.kt)("p",null,"Btw I am not thinking about strictly implementing Fiber, since web model is not the same as Flutter model, but something inspired by it that can make our animations smoother.")),(0,s.kt)(c,{author:"JsouLiang",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T02:56:03Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("blockquote",{parentName:"blockquote"},(0,s.kt)("p",{parentName:"blockquote"},"but it's not my top priority at the moment.")),(0,s.kt)("p",{parentName:"blockquote"},"As mentioned earlier, I am willing to PR and contribute. But surely need some suggestions and discussions prior to start implementing :)"),(0,s.kt)("p",{parentName:"blockquote"},"Btw I am not thinking about strictly implementing Fiber, since web model is not the same as Flutter model, but something inspired by it that can make our animations smoother.")),(0,s.kt)("p",null,"I think so. Maybe we can create a document and then a detailed description"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"the fiber node archive and it can be interrupted by reconciler"),(0,s.kt)("li",{parentName:"ul"},"how does the Fiber reconciler work"),(0,s.kt)("li",{parentName:"ul"},"how does the flutter framework need to do and how to design")),(0,s.kt)("p",null,"How do you think about it? @fzyzcjy ")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:01:06Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@JsouLiang Maybe we can create a document and then a detailed description")),(0,s.kt)("p",null,"Sure! Maybe we can firstly discuss about it (maybe just here? - just like how I have seen many Dart/Flutter design discussions happen) and a detailed doc after we draw a (draft) conclusion"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"how does the flutter framework need to do and how to design")),(0,s.kt)("p",null,'Btw, fiber can make animations smoother, but if I understand correctly, the smoothness is because that specific animation is driven by css, not js. This is contrary to flutter. For example, a CircularProgressIndicator, or even a scrolling of ListView, is driven by Dart code. Thus, we cannot easily say "let\'s give control to flutter engine / android / ios / whatever once in a while when we are doing build/layout/paint/whatever". If we simply do so, we will not get a smooth animation automatically. Instead, we may need to find out a more sophisticated approach.')),(0,s.kt)(c,{author:"JsouLiang",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:27:32Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"but if I understand correctly, the smoothness is because that specific animation is driven by css, not js.")),(0,s.kt)("p",null,"Yes, the CSS animation is driven by css, not through js\nThat mean, the CSS associated with the HTML element can calculate the animation difference directly, without going through JS. @fzyzcjy ")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:28:45Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, that is why fiber is so useful. Indeed it is like, the web ui is driven by two things - the JS and CSS. Fiber pause JS once in a while so CSS things can come in and animate.")),(0,s.kt)(c,{author:"xanahopper",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:28:53Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'@fzyzcjy Btw, fiber can make animations smoother, but if I understand correctly, the smoothness is because that specific animation is driven by css, not js. This is contrary to flutter. For example, a CircularProgressIndicator, or even a scrolling of ListView, is driven by Dart code. Thus, we cannot easily say "let\'s give control to flutter engine / android / ios / whatever once in a while when we are doing build/layout/paint/whatever". If we simply do so, we will not get a smooth animation automatically. Instead, we may need to find out a more sophisticated approach.')),(0,s.kt)("p",null,"As you say, Web animation like css animate, Android ViewPropertyAnimator (maybe iOS also has similar animate mechanism), they all are driven by browser/system, but in Flutter it is driven by ourselves with all other business logic."),(0,s.kt)("p",null,"for more, Android's window transition animation is driven by WindowService seperately")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:38:50Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@JsouLiang @xanahopper "),(0,s.kt)("p",null,"So, it is possible we come up with something slightly different?"),(0,s.kt)("p",null,"For example, if we want to make some animations faster, like CircularProgressIndicator and ListView-scrolling, is it possible to do the following: We give CircularProgressIndicator high priority, and it must be layout/paint at 60fps. In the meanwhile, all other widgets will run one layout/paint across multiple frames with suspending just like what Fiber does. In other words, when vsync comes, CircularProgressIndicator will do all the layout/paint job, while other widgets will continue working on its layout/paint but will pause once it is near 16ms. Then, we can see CircularProgressIndicator smooth at 60fps, while other widgets having similar rendering speed as before."),(0,s.kt)("p",null,"Btw, some side remarks that is less like Fiber: Here is a tool that defers Widgets from being built ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/LianjiaTech/keframe"},"https://github.com/LianjiaTech/keframe"),". But I guess we can make it more fine-grained and with more improvements since we are going to modify the flutter framework itself. For example, (very rough draft idea), can we modify the layout phase (or paint, or others), such that it pauses layouting the remainder (and will do it in the next frame), and let painting and other phases go first?")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:44:07Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"The hard part of all of this is to figure out how to do it without breaking existing Framework code."),(0,s.kt)("p",null,"I think it's probably possible, but it's not easy.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:44:58Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@dnfield without breaking existing Framework code")),(0,s.kt)("p",null,"We are allowed to modify anything in Flutter, don't we :) Just not allowed to break existing API that is used by flutter users."),(0,s.kt)("p",null,"Then, maybe we can have a feature flag?")),(0,s.kt)(c,{author:"xanahopper",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:45:53Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy Yes, we all farmilar with KeFrame and has already applied some optimize like it."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I guess we can make it more fine-grained and with more improvements since we are going to modify the flutter framework itself.")),(0,s.kt)("p",null,"I think this may the point we are going to discuss."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The hard part of all of this is to figure out how to do it without breaking existing Framework code."),(0,s.kt)("p",{parentName:"blockquote"},"I think it's probably possible, but it's not easy.\n@dnfield we cannot just stop because is not easy. if it is a right way to improve it."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:46:35Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"we cannot just stop because is not easy. if it is a right way to improve it.")),(0,s.kt)("p",null,"Same here :) I like challenging, i.e. exciting, work!")),(0,s.kt)(c,{author:"Nayuta403",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:50:41Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy I'm interested in this topic and have been trying to go in a direction where Keframe can make the best use of each 16.7ms, since now each item will take the full 16.7ms (even though it may only take 1ms on some good devices). I'm trying to count the time taken by individual items to determine how many items should be rendered in the next frame.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:52:19Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Continue from the animation proposal above, with @dnfield\'s "without breaking existing Framework code":'),(0,s.kt)("p",null,"Maybe we can have a global flag, say, ",(0,s.kt)("inlineCode",{parentName:"p"},"bool enableFiber = false"),". By default it is false, so users can use existing API freely without any change. When user manually set it to true, our new feature runs."),(0,s.kt)("p",null,"The API may be as simple as a Widget, say, ",(0,s.kt)("inlineCode",{parentName:"p"},"HighPrioritySubTree(builder: (context, child) => build_your_subtree_here, child: put_static_child_here)"),", just like animation builder widgets. That builder should wrap the CircularProgressIndicator in the example above. We may also add a ",(0,s.kt)("inlineCode",{parentName:"p"},"CancelHighPrioritySubTree")," if needed. For example, when scrolling ListView, we may want the scrolling animation be at 60fps, while we have to accept that a big widget in ListView is slow to build. Then, we may wrap ListView with HighPrioritySubTree, and each child of ListView with CancelHighPrioritySubTree. By doing so, our ListView will be forcefully built at each frame, while its contents will be stale for a few frames.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T03:54:47Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Nayuta403 I have had similar thoughts before. The problem is, ",(0,s.kt)("inlineCode",{parentName:"p"},"build")," phase is not the most costly one. There are ",(0,s.kt)("inlineCode",{parentName:"p"},"layout")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"paint")," phase, etc, as well. What's worse, Flutter has C++ engine code which rasterizes and flush to the screen. That one can take a long time in some cases (for example, in my own app, when there is a ton of bezier curves). A widget may, for example, have very short ",(0,s.kt)("inlineCode",{parentName:"p"},"build")," phase time but very long C++ rasterize time.")),(0,s.kt)(c,{author:"xanahopper",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T04:00:38Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The API may be as simple as a Widget, say, ",(0,s.kt)("inlineCode",{parentName:"p"},"HighPrioritySubTree(builder: (context, child) => build_your_subtree_here, child: put_static_child_here)"),", just like animation builder widgets. That builder should wrap the CircularProgressIndicator in the example above. We may also add a ",(0,s.kt)("inlineCode",{parentName:"p"},"CancelHighPrioritySubTree")," if needed. For example, when scrolling ListView, we may want the scrolling animation be at 60fps, while we have to accept that a big widget in ListView is slow to build. Then, we may wrap ListView with HighPrioritySubTree, and each child of ListView with CancelHighPrioritySubTree. By doing so, our ListView will be forcefully built at each frame, while its contents will be stale for a few frames.")),(0,s.kt)("p",null,"@fzyzcjy I agree with switch flag, but some individual widget may still look verbose. I'd rather like to add a optional parameter to base class ",(0,s.kt)("inlineCode",{parentName:"p"},"Widget")," to specify it's build/layout/render priority.\nThan change default page transition widget, scrollable container to high priority and wrap its content to low priority.")),(0,s.kt)(c,{author:"xanahopper",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T04:06:56Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And here is another case may need to be consider: the list.\nin general container such as page, content size has no effect with container and other siblings, but things are different in list.\nif we have different size of different item, we cannot just show placeholder with same size, scrolling when and after content item is building/layouting may cause a sudden change in list.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T04:09:32Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"}," I'd rather like to add a optional parameter to base class Widget to specify it's build/layout/render priority.")),(0,s.kt)("p",null,"That sounds good to me. With that flag, we can also very easily create the widgets I mention. Just like the repaintBoundary is a flag and we create a widget to set it.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T04:12:13Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"if we have different size of different item, we cannot just show placeholder with same size, scrolling when and after content item is building/layouting may cause a sudden change in list.")),(0,s.kt)("p",null,"That's true. ",(0,s.kt)("inlineCode",{parentName:"p"},"keframe")," workaround by letting the developer specify a placeholder size ",(0,s.kt)("em",{parentName:"p"},"manually"),'. But surely, for complex list items, we can never predict the size in advance so it still "jumps" when real content loads.'),(0,s.kt)("p",null,"Maybe this is inevitable, and we have to live with it? Or, maybe we just place background color on those non-built entries?")),(0,s.kt)(c,{author:"xanahopper",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T04:25:56Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"we have to live with it, but we can give some different solutions, such like allow jumps, background color or some other..."),(0,s.kt)("p",null,"I remember that iOS has very high priority with scrolling. If we can get item's size before build, this may not be a problem."),(0,s.kt)("p",null,"pre-measure for many things is possible but we have two considerations:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"it cannot block UI/main thread otherwise it means nothing"),(0,s.kt)("li",{parentName:"ul"},"it should has slice cost for developer to do that")),(0,s.kt)("p",null,"this may conflict with principle of Flutter for single pass measure\u2026\u2026but I think it has already has many cases in practice against that, it may not be a big deal.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T05:20:21Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@xanahopper I am not sure whether that is another isolated problem, or we can directly solve it within our proposal about this issue. For example, if we are to add a pre-measure phase, we may add computeSomething in addition to existing computeLayout, computeDryLayout etc, and that may be orthogonal to this issue."),(0,s.kt)("p",null,"Btw, I suspect whether pre-measure can happen before ",(0,s.kt)("inlineCode",{parentName:"p"},"build")," phase, since we even do not know the widget tree then. Maybe it can happen before ",(0,s.kt)("inlineCode",{parentName:"p"},"layout")," phase?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T05:47:02Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@fzyzcjy reply to @Nayuta403  I have had similar thoughts before. The problem is, build phase is not the most costly one. There are layout and paint phase, etc, as well. What's worse, Flutter has C++ engine code which rasterizes and flush to the screen. That one can take a long time in some cases (for example, in my own app, when there is a ton of bezier curves). A widget may, for example, have very short build phase time but very long C++ rasterize time.")),(0,s.kt)("p",null,"Just to make it a little bit more detailed: On the contrary, if my proposal above works, the following may happen -"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Animations are in perfect 60fps, since low-priority job auto pause when near timeout. If we use keframe or similar solution, and give too many widgets in one frame, our animation will stuck."),(0,s.kt)("li",{parentName:"ol"},"No cpu cycles are wasted, because we will never early-pause but will only pause when near timeout. For example, suppose widget A needs 160ms to build+layout+paint+raster, then it will be done in (roughly) 10 frames. If we use keframe or similar solution, and give too little widgets in one frame, we are wasting cpu cycles."),(0,s.kt)("li",{parentName:"ol"},"It avoids our need to measure, or guess, the time needed for a widget in build/layout/paint/raster phase. Just as I mentioned above, I personally find it hard to guess how long a widget will need in those phases, especially raster phase which is C++ and varies greatly on different CPU/GPUs (different phones)."),(0,s.kt)("li",{parentName:"ol"},"It is OK to have a non-separable widget that is heavy in one phase."),(0,s.kt)("li",{parentName:"ol"},"It is automatic and declarative. Programmers only need to specify priorities and that's all.")),(0,s.kt)("p",null,"Btw I also like your (@Nayuta403) keframe solution :) Just trying to propose something that we can make flutter even better")),(0,s.kt)(c,{author:"Nayuta403",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:09:38Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy  Thank you, I think we all want to make Flutter better. \u2764\ufe0f"),(0,s.kt)("p",null,"So I think of a few problems we might have to solve: "),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"How to get the current UI cost, I think we still need to know this information even if we put the animation in the high priority queue, so that we can determine when the low priority task should end. "),(0,s.kt)("li",{parentName:"ol"},"How does the ListVIew item handle sliding when there is no width and height information "),(0,s.kt)("li",{parentName:"ol"},"How Fiber builds interruptible. It might be a little easier for a ListVIew, because its items are siblings. But what about parent-child nodes like Container?"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:10:03Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"More thoughts here."),(0,s.kt)("h4",{id:"1-for-circularprogressindicator-or-high-priority-widgets-without-low-priority-children"},"1. For CircularProgressIndicator, or high-priority widgets without low-priority children"),(0,s.kt)("p",null,"A very draft idea:"),(0,s.kt)("p",null,"We may have multiple sub-trees, i.e. have a forest, in flutter. In this example, CircularProgressIndicator may be subtree 1, and everything else may be subtree 2. The subtree 1 goes through build/layout/paint/raster etc for each frame, and subtree 2 may go slowly, i.e. suspend."),(0,s.kt)("p",null,"Suppose it needs 10 frames for subtree 2 to finish the whole build/layout/paint/raster process. Then, we just allow all inconsistent and dirty states to exist during that 10 frames. For example, a node may have several layouted children and several un-layouted children. Same goes for rasterizing etc. We also need to ensure nobody can mutate the state accidentally when they are dirty."),(0,s.kt)("p",null,"In addition, I think we may not need to add this suspend feature to the ",(0,s.kt)("inlineCode",{parentName:"p"},"build")," phase, but only add to layout/paint/raster if possible, contrary to React. This is because, if the time-consuming operation is only at build phase, keframe or similar solutions should already work. It may be deep in the rendering pipeline that makes this proposed method more interesting."),(0,s.kt)("p",null,"Surely this is just a draft and brainstorm, and I am willing to hear any thoughts!"),(0,s.kt)("h4",{id:"2-for-listview-scrolling-problem-or-high-priority-widgets-with-low-priority-children"},"2. For ListView scrolling problem, or high-priority widgets with low-priority children"),(0,s.kt)("p",null,"The problem is, those big low-priority children may need a lot of frames (say 10 frames) to build/layout/paint/rasterize, and during those 10 frames, their internal data structure are not ready for use. For example, we cannot let it to paint at 5th frame, because its layout tree (or layer tree or something like that) may have a child that has been layouted and another child that has not yet been layouted."),(0,s.kt)("p",null,"However, we are doing nothing but scrolling. Then what about simply ",(0,s.kt)("em",{parentName:"p"},"raster cache")," the screen, and scrolling is nothing but shifting this ",(0,s.kt)("inlineCode",{parentName:"p"},"ui.Image"),". More details can mimic this PR: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/106621"},"https://github.com/flutter/flutter/pull/106621"),' In that PR, during a "zoom page transition", no real widgets are built in each frame. Instead, a ',(0,s.kt)("inlineCode",{parentName:"p"},"ui.Image")," snapshot is taken in the first frame, and during the whole transition we are just zooming that Image. Our solution is different from #106621, though. In that PR, no work is done during the whole page transition, but in our case, we can perform useful build/layout/paint/raster in the remaining time of each frame."),(0,s.kt)("p",null,'This solution also has some spirit similar to React Fiber: In Fiber, our JS-driven DOM elements are freezed indeed, and it is the CSS animation that still works. In our case, the "scrolling ui.Image" is a bit mimic a scrolling CSS animation.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:13:41Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"How to get the current UI cost, I think we still need to know this information even if we put the animation in the high priority queue, so that we can determine when the low priority task should end.")),(0,s.kt)("p",null,"Seems we do not need? We just blindly run whatever should be done next, and suspend when we are near 16ms."),(0,s.kt)("p",null,"We do need to let the the high priority job (say CircularProgressIndicator or ListView-scrolling) finish within the totally 16ms though."),(0,s.kt)("p",null,"My first thought is that, it would be best if we execute ",(0,s.kt)("em",{parentName:"p"},"all phases")," of ",(0,s.kt)("em",{parentName:"p"},"this subtree")," first, and then execute (and suspend when timeout) all phases of the second subtree in whatever time remain. Then we never need to get the cost."),(0,s.kt)("p",null,"If that is impossible, I wonder whether we can use some heuristics. We all know a CircularProgressIndicator should be very lightweight, so is a ListView-scrolling (if using the ui.Image approach above). We may also learn from the history.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:15:32Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"How does the ListVIew item handle sliding when there is no width and height information")),(0,s.kt)("p",null,"If using the approach mentioned above, it will just be blank. But not blank whenever there is a scrolling! Because we know Flutter has some cache extent for ListViews, we can also capture those cached extents in our ",(0,s.kt)("inlineCode",{parentName:"p"},"ui.Image")," snapshot. Then, only if the following happens, we will see blank:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The user scrolls so much that all cache extent are used up"),(0,s.kt)("li",{parentName:"ol"},"Our heavy widgets are so heavy that it even does not finish one frame up to now"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:18:41Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"How Fiber builds interruptible. It might be a little easier for a ListVIew, because its items are siblings. But what about parent-child nodes like Container?")),(0,s.kt)("p",null,"As a very rough draft, I am considering ",(0,s.kt)("inlineCode",{parentName:"p"},"yield"),". For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"Iterable<void> performLayout() sync* {\n  yield* myFirstChild.layout();\n  some_computation_here;\n  yield* mySecondChild.layout();\n}\n")),(0,s.kt)("p",null,"Each yield point is suspendable."),(0,s.kt)("p",null,"IIRC, Redux Saga ",(0,s.kt)("a",{parentName:"p",href:"https://redux-saga.js.org/docs/introduction/BeginnerTutorial/"},"https://redux-saga.js.org/docs/introduction/BeginnerTutorial/")," uses something similar to this."),(0,s.kt)("p",null,"Have not digged into React Fiber's source code yet. Have you checked it, how does it implement it?"),(0,s.kt)("p",null,"But as I am not an expert in Dart compiler implementation, I am not sure about the performance penalty. (Hope it to be tiny!)")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:31:44Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"A few pointers:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"We cannot use sync generators, they create code that is large and slow. "),(0,s.kt)("li",{parentName:"ul"},"A good canonical case here would be something like ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/lib/src/list_text_layout.dart"},"https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/lib/src/list_text_layout.dart"),'. This ends up being janky because layout gets expensive for all that text (on a lower end phone it can easily take 20-30+ms just to layout all the text there, and the ListTile is a little deceptive because Material introduces expense - this is the kind of thing we want to figure out how to break up "automatically").'),(0,s.kt)("li",{parentName:"ul"},"We should probably worry about prioritization of jobs until after we figure out how to sensibly budget and interrupt layout/painting/compositing. It doesn't matter what priority we'd want to give things if we can't do that, and it will probably be hard to come up with a good/fair prioritization scheme."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:40:01Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Thanks for the ideas!"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"how to sensibly budget and interrupt layout/painting/compositing.")),(0,s.kt)("p",null,"Quick answer to budget: As suggested in my comments above, we may not need to budget things (unlike the keframe-like solution). We just run the high-priority subtree (one with animation) until it finishes, and then run low-priority heavy subtree until whenever timeouts.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:42:05Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Animations might not ever finish.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:42:34Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And you might be animating the entire screen, e.g. for a route transition")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:43:27Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Animations might not ever finish.")),(0,s.kt)("p",null,"Well, I mean, run its build+layout+paint+raster fully instead of partially, not wait until there is no animations at all. For a CircularProgressIndicator it may take, say, <1ms. The rest 16.66-1=15.66ms will be given to low-priority subtree.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:44:23Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"And you might be animating the entire screen, e.g. for a route transition")),(0,s.kt)("p",null,'That sounds similar to the "a scrolling ListView" example above in ',(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1247625317"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1247625317"),". Just as mentioned there (and a little bit similar to ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/106621"},"https://github.com/flutter/flutter/pull/106621"),"), we may take a snapshot of the heavy children, when the heavy widgets are rebuilding.")),(0,s.kt)(c,{author:"Nayuta403",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:52:42Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Seems we do not need? We just blindly run whatever should be done next, and suspend when we are near 16ms.")),(0,s.kt)("p",null,"Well, I think there should be a timer for how long the UI is currently built, since you also mentioned ",(0,s.kt)("inlineCode",{parentName:"p"},"near 16ms"),", and the ",(0,s.kt)("inlineCode",{parentName:"p"},"remaining time"),". I think it's easier (and that's what I'm going to try) if I just count the time spent on the framework. But as you say, the problem becomes more complicated when you consider the Raster thread.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T06:55:41Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Well, I think there should be a timer for how long the UI is currently built")),(0,s.kt)("p",null,"I guess that is easy :) Maybe as simple as ",(0,s.kt)("inlineCode",{parentName:"p"},"DateTime.now()"),", but probably there are something with higher precision etc.")),(0,s.kt)(c,{author:"Nayuta403",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T07:08:13Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@Nayuta403 I have had similar thoughts before. The problem is, build phase is not the most costly one. There are layout and paint phase, etc, as well. What's worse, Flutter has C++ engine code which rasterizes and flush to the screen. That one can take a long time in some cases (for example, in my own app, when there is a ton of bezier curves). A widget may, for example, have very short build phase time but very long C++ rasterize time.")),(0,s.kt)("p",null,"Yes, the timing of the statistical framework is not complicated, so I'm just trying to perform more tasks in a frame based on that time, regardless of Raster")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T07:10:21Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@Nayuta403 Yes, the timing of the statistical framework is not complicated, so I'm just trying to perform more tasks in a frame based on that time, regardless of Raster")),(0,s.kt)("p",null,"Sorry I do not quite get it. Are you using history timing information to estimate future timing?")),(0,s.kt)(c,{author:"Nayuta403",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T07:38:31Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It's Keframe. I'm trying to count the time it takes to ",(0,s.kt)("inlineCode",{parentName:"p"},"build/layout/paint")," item widgets so that each frame can be rendered as many times as possible (currently only one item per frame is rendered).\n(Am I making myself clear? (*\uffe3\ufe36\uffe3))")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T07:43:51Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Nayuta403 Clear :)"),(0,s.kt)("p",null,"So seems that it is based on history. Then what if different items have (very) different time needed? That happens frequently IMHO. For example, suppose we have a ListView of posts. Post 1 may be a simple sentence so it is fast. Post 2 may be a long rich text paragraph and complex Paths etc, so it is slow.")),(0,s.kt)(c,{author:"Nayuta403",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T07:57:05Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, you are absolutely right, because now every task is setState() and only goes back to rendering the real widget on the next frame. One idea I have now is to make this task a real rendering task, similar to marking it as dirty and then executing drawFrame() to get the real time."),(0,s.kt)("p",null,"I can create an issue later to describe my thinking in detail and make the issue clearer  :>")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T08:00:57Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I can create an issue later to describe my thinking in detail and make the issue clearer :>")),(0,s.kt)("p",null,"Looking forward to it :)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T09:39:44Z",mdxType:"DiscussionComment"},(0,s.kt)("h4",{id:"more-about-how-to-build-suspendableinterruptable-given-that-sync-generators-are-slow"},'More about "how to build suspendable/interruptable", given that sync generators are slow'),(0,s.kt)("p",null,"Is it possible we create a ",(0,s.kt)("inlineCode",{parentName:"p"},"RenderSuspendable")," RenderObject (and corresponding Suspendable widget) which does the following:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Users need to insert this widget into tree whenever they want suspendable. This may be reasonable given this spirit is similar to RepaintBoundary. And users will not need to insert too much, just insert at coarse subtrees. "),(0,s.kt)("li",{parentName:"ol"},"It behaves like a most naive proxy render box in normal cases."),(0,s.kt)("li",{parentName:"ol"},"When time is near used up, and when RenderSuspendable.layout is called, it will ",(0,s.kt)("em",{parentName:"li"},"not")," call child.layout, but instead set a flag (say ",(0,s.kt)("inlineCode",{parentName:"li"},"needsLayoutLaterWhenPossible"),") and directly return. As for the return value, it may return the last layout size or user-defined default size (similar to what keframe does in widget-build level). By doing this, ancestor render objects will be happy and finish its layout function very fast."),(0,s.kt)("li",{parentName:"ol"},"For a ",(0,s.kt)("inlineCode",{parentName:"li"},"RenderSuspendable")," with ",(0,s.kt)("inlineCode",{parentName:"li"},"needsLayoutLaterWhenPossible=true"),", when a new frame comes in, it will ",(0,s.kt)("inlineCode",{parentName:"li"},"this.markNeedsLayout()"),", and thus get a chance to execute its ",(0,s.kt)("inlineCode",{parentName:"li"},"layout"),' method again in this new frame. If time is enough, it is done normally as in "2.", and the needsLayoutLaterWhenPossible is cleared; otherwise, it is done as in "3.".')),(0,s.kt)("p",null,"Remark: May need a tweak a bit about ",(0,s.kt)("inlineCode",{parentName:"p"},"layout"),"'s caching mechanism."),(0,s.kt)("p",null,"Remark: RenderSuspendable's sub-tree will ",(0,s.kt)("em",{parentName:"p"},"not")," be redundantly layouted more than once. For example, say we have a ",(0,s.kt)("inlineCode",{parentName:"p"},"Column")," with two ",(0,s.kt)("inlineCode",{parentName:"p"},"Suspendable")," children, the first one has done layout, and the second one does not because of timeout. Then, when the next frame comes, Suspendable 2 calls markNeedsLayout, and Column starts performLayout. Then Suspendable 1 ",(0,s.kt)("em",{parentName:"p"},"does")," have layout() called. However, we should recognize it (possibly flutter caching already does so?), and no need to layout its child at all."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Features")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'Solves the problem of "how to build suspendable/interruptable", without sync generators'),(0,s.kt)("li",{parentName:"ul"},"No need to modify existing render objects, only need to add a new one")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Potential problem")),(0,s.kt)("p",null,"Unnecessary (i.e. redundant) relayout will happen for ancestors of Suspendable, until meeting a relayout-boundary."),(0,s.kt)("p",null,"Not sure how large the penalty is. If we can give near enough relayout boundary, looks like it is no problem? In addition, if we wrap ",(0,s.kt)("em",{parentName:"p"},"all")," expensive subtrees into Suspendables, then the rest may be quite cheap."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"How is layout / paint / rasterize related?")),(0,s.kt)("p",null,"Done one by one. Layout of ",(0,s.kt)("em",{parentName:"p"},"everything")," will be firstly finished. Only after that, we start doing painting of everything. And then rasterizing."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"What about paint tree? layer tree? engine(c++) rasterizer?")),(0,s.kt)("p",null,"TBD, I guess will be similar to above. Looking forward to hearing some feedbacks about the approach for layout first!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T09:57:10Z",mdxType:"DiscussionComment"},(0,s.kt)("h4",{id:"how-can-we-paint-ui-onto-screen-if-we-are-in-half-way-of-layoutpaintrasterize-and-many-nodes-are-dirty--half-way-updated"},"How can we paint UI onto screen, if we are in half-way of layout/paint/rasterize, and many nodes are dirty / half-way updated?"),(0,s.kt)("p",null,"Basically I have two draft ideas:"),(0,s.kt)("p",null,"Firstly, we may hack the Flutter engine. Let it keep the old content available until the new content is ",(0,s.kt)("em",{parentName:"p"},"fully")," available."),(0,s.kt)("p",null,'Secondly, we may be able to solve it without big modifications to engine. We may just "take a screenshot" before starting the journey of heavy updating. For example, suppose we need 10 frames to fully build/layout/paint/rasterize this widget subtree. Then, we use the new ',(0,s.kt)("inlineCode",{parentName:"p"},"toImageSync()")," to take a photo of it. Then, during the 10 frames, we can do anything to the render/layer/engineLayer trees, and whenever the parents let us to paint, we just canvas.drawImage() using that. After 10 frames when we are done, we will finally paint the new thing."),(0,s.kt)("p",null,"By the way, this also has a bonus about ",(0,s.kt)("em",{parentName:"p"},"predictable time consumption"),". IMHO, the time of drawing (paint+rasterize+...) a ",(0,s.kt)("inlineCode",{parentName:"p"},"ui.Image")," may be easily computed, given it is nothing but a rasterized image."),(0,s.kt)("hr",null),(0,s.kt)("p",null,"@dnfield Given that you implemented this great new ",(0,s.kt)("inlineCode",{parentName:"p"},"toImageSync")," feature (",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/33736"},"https://github.com/flutter/engine/pull/33736"),"), I have a question about its performance: "),(0,s.kt)("p",null,"In the solution above, instead of painting normally, we may have to convert child into ",(0,s.kt)("inlineCode",{parentName:"p"},"ui.Image")," for each and every ",(0,s.kt)("inlineCode",{parentName:"p"},"paint")," call."),(0,s.kt)("p",null,"In other words, in pseudo code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"class OurRenderObject {\n  void paint() {\n    // child.paint(); // cannot do this\n\n    if (everything_is_not_dirty) {\n      image = toImageSync(child_render_tree); // save a screenshot\n    }\n\n    // ...do some expensive work here if time is sufficient...\n\n    canvas.drawImage(image);\n  }\n}\n")),(0,s.kt)("p",null,"So, will this have performance penalty or not?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-15T14:41:50Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Looking forward to some early feedbacks about the proposal :)"),(0,s.kt)("p",null,"Maybe /cc @dnfield @JsouLiang @Nayuta403 @xanahopper (based on today's activity)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T00:57:12Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'P.S. I am starting to work on a prototype about smoothing the "layout" phase. Will report any progress I make :)'),(0,s.kt)("p",null,"Code: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter/tree/feat-smooth"},"https://github.com/fzyzcjy/flutter/tree/feat-smooth"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T04:06:27Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"progress-62ms---22ms-for-99th-build-time-of-list_text_layout-and-its-limitations"},"Progress: 62ms -> 22ms for 99th build time of ",(0,s.kt)("inlineCode",{parentName:"h3"},"list_text_layout"),", and its limitations"),(0,s.kt)("p",null,"(Limitations is discussed in the last section of this comment)"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"list_text_layout")," is still too fast on my old android, so I enlarged its scale (have more items in column, more text in each item, etc) a little bit. Code is seen in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter/commit/857210213531e76b3eb5c256a8ef3599ed434703"},"https://github.com/fzyzcjy/flutter/commit/857210213531e76b3eb5c256a8ef3599ed434703"),". This yields:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n  "average_frame_build_time_millis": 2.8446626506024097,\n  "90th_percentile_frame_build_time_millis": 1.213,\n  "99th_percentile_frame_build_time_millis": 62.531,\n  "worst_frame_build_time_millis": 63.101,\n  "missed_frame_build_budget_count": 14,\n  "average_frame_rasterizer_time_millis": 3.296915662650604,\n  "90th_percentile_frame_rasterizer_time_millis": 8.09,\n  "99th_percentile_frame_rasterizer_time_millis": 13.82,\n  "worst_frame_rasterizer_time_millis": 15.178,\n  "missed_frame_rasterizer_budget_count": 0,\n  "frame_count": 249,\n  "frame_rasterizer_count": 249,\n  "new_gen_gc_count": 34,\n  "old_gen_gc_count": 4,\n  "frame_build_times": [\n')),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/190553671-b44adef7-3cab-49db-95bc-45cfc15ad5a9.png",alt:"image"})),(0,s.kt)("p",null,"Then, I implement a proof-of-concept Suspendable. Code is at ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter/commit/0babd5b6856bc799c9f369bce75aada7c10fcd0b"},"https://github.com/fzyzcjy/flutter/commit/0babd5b6856bc799c9f369bce75aada7c10fcd0b"),". Code diff can be found in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/compare/master...fzyzcjy:flutter:feat-smooth?expand=1"},"https://github.com/flutter/flutter/compare/master...fzyzcjy:flutter:feat-smooth?expand=1"),"."),(0,s.kt)("p",null,"It yields:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n  "average_frame_build_time_millis": 4.24028,\n  "90th_percentile_frame_build_time_millis": 17.769,\n  "99th_percentile_frame_build_time_millis": 22.235,\n  "worst_frame_build_time_millis": 23.829,\n  "missed_frame_build_budget_count": 41,\n  "average_frame_rasterizer_time_millis": 3.9516548672566385,\n  "90th_percentile_frame_rasterizer_time_millis": 8.949,\n  "99th_percentile_frame_rasterizer_time_millis": 11.202,\n  "worst_frame_rasterizer_time_millis": 11.604,\n  "missed_frame_rasterizer_budget_count": 0,\n  "frame_count": 225,\n  "frame_rasterizer_count": 226,\n  "new_gen_gc_count": 17,\n  "old_gen_gc_count": 4,\n')),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/190553863-5a373dcb-75ba-468d-8118-66e7a393070b.png",alt:"image"})),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"limitations"},"Limitations"),(0,s.kt)("p",null,"This is just proof-of-concept and is very naive."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It only suspends the layout and build phase. (The build phase is wrapped inside layout phase by adding a LayoutBuilder.) Indeed, it does not suspend the paint or raster phase, which should be done in future work."),(0,s.kt)("li",{parentName:"ul"},"It paints nothing (i.e. do not call child.paint) if a Suspendable is suspending. This will destroy the layer tree and C++ engine layer trees, making performance much worse. We should address this problem later, possibly by keeping the layer tree not used but not removed."),(0,s.kt)("li",{parentName:"ul"},"It lets the whole ancestors (up until relayout-boundary) to relayout in each frame."),(0,s.kt)("li",{parentName:"ul"},"Overhead will become non-neglectable, if we want it to run in 60fps. In other words, if we want each frame to be under 16ms, looks like we will only have <10ms for handling the suspendable widgets (rough estimate, but anyway numbers differ on different phones). Then, the price of 60fps smooth animation is that, the suspendable needs longer time to be loaded."),(0,s.kt)("li",{parentName:"ul"},"The current implementation does not run suspendable layouts ",(0,s.kt)("em",{parentName:"li"},"last"),'. Instead, they are run inside non-suspendable layout. Thus, we have to set a "earlier" deadline (e.g. 12ms, instead of 16.6ms in the example above), and hope that the remaining job will finish quick enough.'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://api.flutter.dev/flutter/rendering/RenderSliverScrollingPersistentHeader/performLayout.html"},"Element.performLayout"),' says, "In implementing this function, you must call layout on each of your children". But, when implementing Suspendable, we have to violate this. We will face troubles, or just minor changes are enough?'),(0,s.kt)("li",{parentName:"ul"},"If a child under Suspendable mark itself as needed to relayout/rebuild, and there is relayout boundary between that child and Suspendable, then the suspending mechanism will not work at all."),(0,s.kt)("li",{parentName:"ul"},"Originally all code (implicitly) assume that, when a frame ends, build/didUpdateWidget has been called. But now this no longer holds. That will make a ton of widget fail to work, including those inside flutter framework, and many external packages. For example, those who assume this inside their addPostFrameCallback."),(0,s.kt)("li",{parentName:"ul"},"The demo does not yet provide any animations (e.g. a CircularProgressIndicator), so by merely looking at the screen, we cannot see it becomes much smoother ;)"))),(0,s.kt)(c,{author:"JsouLiang",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T06:49:08Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Furthermore, I think should we able to break the Build call if the Widget is complex and the Widget Build call is too deep and stalling?"),(0,s.kt)("p",null,"@fzyzcjy ")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T07:15:11Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"new-idea-dual-isolates"},"New idea: Dual isolates"),(0,s.kt)("p",null,"(This comment is updated)"),(0,s.kt)("h4",{id:"advantages"},"Advantages"),(0,s.kt)("p",null,"The main goal is similar: No matter how heavy your widget build/layout/... is, animations/gestures should be 60fps."),(0,s.kt)("p",null,"It does not require existing Flutter/Dart code to accept new assumptions. For example, in the old proposal, the ",(0,s.kt)("inlineCode",{parentName:"p"},"layout")," may ",(0,s.kt)("em",{parentName:"p"},"not")," be called within a frame, and thus ",(0,s.kt)("inlineCode",{parentName:"p"},"build")," will also not be called. This may violate many existing code. For example, ",(0,s.kt)("inlineCode",{parentName:"p"},"addPostFrameCallback")," may assume build is done when post-frame."),(0,s.kt)("p",null,'On the contrary, the "Dual isolates" solution will not have those assumptions at all. It seems ',(0,s.kt)("strong",{parentName:"p"},"not to break existing explicit or implicit assumptions about the code"),'. Except that it will make Dart isolate "freeze" once in a while - but that should not be a problem, since we are all happy with stop-the-world GC and OS\'s suspending a thread.'),(0,s.kt)("p",null,"In addition, it should have much lower overhead, indeed almost zero. No wasted build/layout happens (unlike RenderSuspendable approach). No unnecessary tree destory and recreate happens."),(0,s.kt)("h4",{id:"background"},"Background"),(0,s.kt)("p",null,"The approach above, with the minimal sample in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1248894781"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1248894781"),", has many known problems which I am not sure whether can all be overcome. I will probably also experiment further on that path as well. At the same time, I find out a new approach without most problems above."),(0,s.kt)("p",null,"I am not an expert in ",(0,s.kt)("inlineCode",{parentName:"p"},"flutter/engine"),", so please correct me if I am wrong!"),(0,s.kt)("h4",{id:"design"},"Design"),(0,s.kt)("p",null,"Originally, IMHO we have a UI thread, which runs both C++ code and Dart main isolate code. Now, we have three (but no worries, they will not be parallel most of the time!):"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"C++ UI thread."),(0,s.kt)("li",{parentName:"ul"},"Dart main isolate: Run everything you know, i.e. the heavy build/layout/paint/.... Say it takes 2 frames to finish."),(0,s.kt)("li",{parentName:"ul"},"Dart sidecar isolate: Run CircularProgressIndicator, or ShiftTheChild(for scrolling ListView, to be explained below).")),(0,s.kt)("p",null,"An UML diagram is attached below (best read with text explanations here)."),(0,s.kt)("p",null,"Here is what happens when a vsync comes in:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"C++ ui thread receives the vsync. In the old days, it will call dart's DrawFrame. But now, it will set up a timer for a bit less than ~16.67ms (say 15ms), pause self thread, and call Dart main isolate's DrawFrame."),(0,s.kt)("li",{parentName:"ul"},"Dart main isolate's DrawFrame starts running. It runs build/layout happily."),(0,s.kt)("li",{parentName:"ul"},'At 15ms, timer wakes up C++ ui thread. C++ ui thread then immediately "pause" the dart main isolate. This is done by "safepoints". In other words, we insert ',(0,s.kt)("inlineCode",{parentName:"li"},"safepoint()")," call to ",(0,s.kt)("inlineCode",{parentName:"li"},"layout()")," function of Dart RenderObjects. And that function is a native function reading, say, a mutex lock. When C++ ui thread wants to pause the dart main isolate, it simply acquire the mutex. When Dart goes to the next safepoint() call, it will simply be pause there forever waiting to acquire the mutex (until next frame indeed)."),(0,s.kt)("li",{parentName:"ul"},"C++ ui thread calls sidecar isolate to compute the whole build/layout/paint procedure. This is done serially now for simplicity, but should be easily parallizable with some locks."),(0,s.kt)("li",{parentName:"ul"},"Sidecar Dart code is a bit different from the traditional widget/renderobject/layers. Instead, it knows which EngineLayer it owns, and only mutates it. For example, for a CircularProgressIndicator in sidecar, it will know it owns a DisplayListLayer, and only modify pictures in it, without touching other layers. For a ShiftTheChild, it owns a OffsetLayer and modifies its offset."),(0,s.kt)("li",{parentName:"ul"},"Now go back to our C++ ui thread. We will simply utilize the current engine layer tree in C++, and the rest is the same, such as giving data to rasterizer thread and render to the screen.")),(0,s.kt)("p",null,"This is not the end of story - notice our main isolate is still computing some layout and is hanging. Now suppose 2nd vsync comes in."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'Again, C++ ui thread receives vsync. It notices there is still remaining job in main isolate. Then it just resume the main isolate, without telling it anything about the second frame. Thus, in the eyes of main isolate, it will think the whole phone just "freezed" for a few milliseconds without other problems, and will happily continue build/layout/etc.'),(0,s.kt)("li",{parentName:"ul"},"Suppose the heavy job of the main isolate is finally finished in this frame. Then, it will do painting. In other words, it will mutate the Layer tree in C++ code. We deliberately put no safepoint() during painting, so the C++ layer tree will either be non-mutated or fully-mutated without intermediate case."),(0,s.kt)("li",{parentName:"ul"},"The rest is similar to the first frame, except that our engine layer tree is updated to the new one.")),(0,s.kt)("h4",{id:"further-improvements"},"Further improvements"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"sidecar isolate should be executed concurrently"),(0,s.kt)("li",{parentName:"ul"},'main isolate should also be executed concurrently, with locks protecting critical regions such as mutating the engine layer tree. But otherwise, it should run freely. By doing this, we are guaranteed that, we can let main isolate run using almost a full cpu core. On the contrary, the "RenderSuspendable" approach above will only give, say, 10.67ms out of 16.67ms for heavy widget build/layout, because it need (say) 6ms to paint/rasterize existing things.')),(0,s.kt)("h4",{id:"what-is-shiftthechild"},"What is ",(0,s.kt)("inlineCode",{parentName:"h4"},"ShiftTheChild")),(0,s.kt)("p",null,'I want to solve the problem of "ListView scrolling". In other words, when scrolling a ListView, the widget build/layout may be arbitrary heavy, while we should get 60fps.'),(0,s.kt)("p",null,"Thus, let us do the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"ParentWidgets(\n  child: ShiftTheChild(\n    child: ListView.builder( ... )\n  )\n)\n")),(0,s.kt)("p",null,"Suppose ListView subtree takes 10 frames to rebuild/layout/etc, and suppose the user is scrolling it. Then, during the 10 frames, ShiftTheChild will receive data packets about user dragging and perform a shift (i.e. OffsetLayer's offset) to its child content. ShiftTheChild will be in the sidecar isolate."),(0,s.kt)("p",null,"P.S. It may not even be a widget or RenderObject, but may be built on some other lower level primitives mutating corresponding C++ engine Layer. But surely we can wrap those primitives and maybe create a RenderSidecar or something new, that should not be a problem."),(0,s.kt)("h4",{id:"minimal-example"},"Minimal example"),(0,s.kt)("p",null,"I plan not to implement sidecar isolate in the minimal example. Instead, just create a C++ function that shifts an OffsetLayer in each frame, as if a sidecar isolate is doing so. This is because the sidecar isolate is nontrivial engineering work but is not the core problem."),(0,s.kt)("hr",null),(0,s.kt)("h4",{id:"uml-diagram"},"UML Diagram"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/190575625-cac7fa73-0b80-4808-8414-130446ad8884.png",alt:"UML"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T07:15:58Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@JsouLiang For the "RenderSuspendable" proposal, I guess we can have nested ones. For the "Isolates" proposal just now, I guess we do not have this problem - the main isolate will be paused at ',(0,s.kt)("em",{parentName:"p"},"any")," safepoint, i.e. ",(0,s.kt)("em",{parentName:"p"},"any")," layout function.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T07:20:48Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield @JsouLiang @Nayuta403 (and other engine masters)"),(0,s.kt)("p",null,"For the new proposal, I hope to see some feedback... Since I am not an expert in ",(0,s.kt)("inlineCode",{parentName:"p"},"flutter/engine")," (and few materials are about it on the internet). Thus:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Is there any suggested materials (docs/articles/...) to understand the engine? How do you learn the engine?"),(0,s.kt)("li",{parentName:"ol"},"Does my proposal above looks OK?"))),(0,s.kt)(c,{author:"xanahopper",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T09:23:36Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'@JsouLiang For the "RenderSuspendable" proposal, I guess we can have nested ones. For the "Isolates" proposal just now, I guess we do not have this problem - the main isolate will be paused at ',(0,s.kt)("em",{parentName:"p"},"any")," safepoint, i.e. ",(0,s.kt)("em",{parentName:"p"},"any")," layout function.")),(0,s.kt)("p",null,"multiple isolates is one of my optimize and working in progress, the key to this is some build/layout callback function/method should not be called in non-main isolate, or just serialize/deseralize build/layout request and response to another isolate like a local RPC service.\nBut! Multiple isolates may agains Flutter's principle, I don't sure whether it can be merged."),(0,s.kt)("p",null,"(Dude, you are really high-producing and I'm reading your new comments try to catch up"),(0,s.kt)("p",null,"And for more, I may offer you some complex card widget case for benchmark.")),(0,s.kt)(c,{author:"xanahopper",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T09:59:40Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For this Suspendable render, we may introduce structure like Fiber, I think it is ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Threaded_binary_tree"},"Threaded tree"),"."),(0,s.kt)("p",null,"First thing to drawing a frame including heavy/suspendable part is transform tree to a list (or just a threaded tree)"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/2241197/190613080-dfaa31f1-82ca-4c8e-8fb1-ac68fc4cada2.png",alt:"image"})),(0,s.kt)("p",null,"Render task 5 and 6 should and can be suspended at any place in it. (What if a widget/node cost timeout?)"),(0,s.kt)("p",null,"we can tell from figure that suspendable is contagious, content in suspendable cannot be non-suspendable.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T10:27:32Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@xanahopper "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"multiple isolates is one of my optimize and working in progress")),(0,s.kt)("p",null,"Looks interesting, could you please share the link? I have checked your github but seems cannot find anything. (All my Flutter work are done open-source and can be found at my github)."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"the key to this is some build/layout callback function/method should not be called in non-main isolate, or just serialize/deseralize build/layout request and response to another isolate like a local RPC service.")),(0,s.kt)("p",null,"Could you please provide an example? Thanks"),(0,s.kt)("p",null,"Btw, my solution does not use non-main isolate with callbacks :) Indeed, I only put CircularProgressIndicator and ShiftTheChild and things like that there. No normal user code should be done in the sidecar isolate, because otherwise it is quite unfriendly to the users (the sidecar isolate has no memory sharing w/ the main isolate)."),(0,s.kt)("p",null,"So I hope it is not a blocker!"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"But! Multiple isolates may agains Flutter's principle, I don't sure whether it can be merged.")),(0,s.kt)("p",null,"Could you please elaborate a little bit more?"),(0,s.kt)("p",null,"My solution is still mainly single-isolate, and the sidecar isolate (as mentioned above) is just used very limitedly to support animations."),(0,s.kt)("p",null,"In addition, my multi-thread is still mostly serialized instead of parallel running. There are multiple threads, simply because I want to suspend/pause one thread easily."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Dude, you are really high-producing and I'm reading your new comments try to catch up")),(0,s.kt)("p",null,"Haha take your time! It takes me a day thinking and trying all these things :)"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"And for more, I may offer you some complex card widget case for benchmark.")),(0,s.kt)("p",null,"Sure, looking forward to that. Btw I also have very complex cases for my own app, but I decide to start from the simple - you know, one of the fundamental rules in software engineering.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T10:35:09Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@xanahopper's comment in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1249172293"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1249172293"))),(0,s.kt)("p",null,"If I understand correctly, the figure is a bit like a extended version of my prototype ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1248894781"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1248894781")," above."),(0,s.kt)("p",null,"The question is, how are you going to transform a tree to a (suspendable) list - In other words, for example, how to make subtree rooted at 5 become a list that ",(0,s.kt)("em",{parentName:"p"},"can be paused"),"?"),(0,s.kt)("p",null,"I have proposed using ",(0,s.kt)("inlineCode",{parentName:"p"},"yield")," in ",(0,s.kt)("inlineCode",{parentName:"p"},"performLayout")," but @dnfield mentioned it is very slow. Given that your suspendable widgets are contagious, we cannot use yield at all (otherwise we will be using it in a big subtree)."),(0,s.kt)("p",null,"Then in my prototype above I decide to let a Suspendable return zero size when it is near timeout (note: different from your figure, but the problem to solve is similar). But such approach seems not possible for your proposal."),(0,s.kt)("p",null,'This is solved very easily with my "Dual isolates" proposal. It just call ',(0,s.kt)("inlineCode",{parentName:"p"},"safepoint()")," in every RenderObject's ",(0,s.kt)("inlineCode",{parentName:"p"},"layout()"),". Then, whenever the C++ code wants to suspend Dart, C++ will just let ",(0,s.kt)("inlineCode",{parentName:"p"},"safepoint()")," hang (probably by occupying a mutex). Then Dart code is just hang there, without doing anything, without feeling anything. In Dart code's view it is like a stop-the-world GC indeed.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T10:43:25Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@wangying3426 ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1240156979"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1240156979")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Any update please? We are also interested in this feature.")),(0,s.kt)("p",null,"Btw I forget to mention you (too above in the comments). Yes, now I have many updates :)")),(0,s.kt)(c,{author:"xanahopper",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T11:08:52Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Multiple isolates and optimize with it is before the specification phase, just for you known that we both have the same idea that I and my colleagues are working on it. for very early part we think that this way may need modify engine or even the Dart VM."),(0,s.kt)("p",null,"Last time we coming with a issue ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/110063"},"#110063")," and got a refuse with tough attitude."),(0,s.kt)("h2",{id:"transform"},"Transform"),(0,s.kt)("p",null,"When we need ",(0,s.kt)("em",{parentName:"p"},"build")," a Widget, we must already got a widget or state(element), that means we have a ",(0,s.kt)("em",{parentName:"p"},"factory")," for children widgets.\nAll Flutter's build (as long as other declaration UI) is a function call, just like"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"UI = f(g(h(state)))")),(0,s.kt)("p",null,"We just change this to "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"ui1 = h(state)\nui2 = g(ui1)\nUI = f(ui2)")),(0,s.kt)("p",null,"wrap ever build into a node/task and change all that to a chain list. In practice, we can use a deque to collect deeper call."),(0,s.kt)("h3",{id:"widget-tree-build"},"Widget tree build:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Got a node to build from queue, we dont know whether it will be a leaf node."),(0,s.kt)("li",{parentName:"ol"},"Execute node's build, add all children to queue."),(0,s.kt)("li",{parentName:"ol"},"Add executed node to a deque tail."),(0,s.kt)("li",{parentName:"ol"},"Repeat goto 1")),(0,s.kt)("h3",{id:"element--ro-tree-build"},"Element & RO tree build"),(0,s.kt)("p",null,"Because elements generally need children to be ready, so we have to produce it from leaf."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Take a node from tail of executed node deque(this will like a stack)"),(0,s.kt)("li",{parentName:"ol"},"Produce Element/RenderObject"),(0,s.kt)("li",{parentName:"ol"},"repeat")),(0,s.kt)("p",null,"It just like traversal a tree without recursion, so we can suspend and resume at any iteration of traversal.\nthis is a prototype of pseudo code, hope it help.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T11:42:29Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@xanahopper "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Multiple isolates and optimize with it is before the specification phase, just for you known that we both have the same idea that I and my colleagues are working on it. for very early part we think that this way may need modify engine or even the Dart VM.\nLast time we coming with a issue ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/110063"},"https://github.com/flutter/flutter/issues/110063")," and got a refuse with tough attitude.")),(0,s.kt)("p",null,"I see. Willing to collaborate to make it into reality as soon as possible!"),(0,s.kt)("p",null,'I looked at #110063 now. If I understand correctly, seems that @jonahwilliams refuses because "Splitting the UI thread work into multiple theads is infeasible for several reasons", such as "a single thread means that newspace allocations don\'t need any locking". However, my proposal above deliberately avoids these problem. In my case, the c++ ui thread is sleeping while dart main isolate is running, and (if flutter does not like multi concurrent isolates) the thread and main isolate can also be sleeping while dart sidecar isolate is running. So, we are still running single isolate, and no lock is needed at all!'),(0,s.kt)("p",null,"In short, I am not using multi threading. Instead, all threads are there only to implement suspending."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"or even the Dart VM.")),(0,s.kt)("p",null,"This inspire me of something: If we can implement a suspend mechanism in Dart VM, maybe we do not need that safepoint + one extra thread approach."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Widget tree build")),(0,s.kt)("p",null,"Fully understand now :) That should be very workable, just like React Fiber does."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Element & RO tree build\nso we have to produce it from leaf\nProduce Element/RenderObject")),(0,s.kt)("p",null,"Sorry I do not get it. We are not going to produce RenderObjects, but (most of the time) ",(0,s.kt)("em",{parentName:"p"},"modify")," (update) them. For example, say you have a RenderPadding. Then we will only modify its padding field and markNeedsRelayout, instead of throwing away the old padding and create a new one."),(0,s.kt)("p",null,"Most importantly, how can we get the BoxConstraints (suppose we are dealing with RenderBox)? For example, when we are ",(0,s.kt)("inlineCode",{parentName:"p"},"layout()")," for a leaf, we must know the BoxConstraints its parent wants to give it. But the parent is not yet ",(0,s.kt)("inlineCode",{parentName:"p"},"layout"),"ed.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-16T11:46:14Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@xanahopper In addition, I have mentioned many limitations of the suspendable tree traversal in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1248894781"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1248894781")," (see last section there). Looking forward to see some solutions about it!"),(0,s.kt)("p",null,"For example, a big problem: Originally all code (implicitly) assume that, when a frame ends, build/didUpdateWidget has been called. But now this no longer holds. That will make a ton of widget fail to work, including those inside flutter framework, and many external packages. For example, those who assume this inside their addPostFrameCallback."),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Update"),': More problems are added to that comment. For example, "If a child under Suspendable mark itself as needed to relayout/rebuild, and there is relayout boundary between that child and Suspendable, then the suspending mechanism will not work at all."')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-17T00:41:55Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Update"),": I am thinking whether we can remove the need of new threads in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1249005541"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1249005541"),". If we can pause a Dart isolate without needing new threads, we can remove those threads."),(0,s.kt)("p",null,"Details can be found in:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/dart-lang/sdk/issues/49981"},"https://github.com/dart-lang/sdk/issues/49981"))),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Update"),": I am trying to use the spirit of stackful coroutines to implement it."),(0,s.kt)("p",null,"I do get stuck. We have a ton of callbacks from C++ calling into Dart, such as when the image data has been loaded successfully. If the dart main isolate is freezed (either by stackful coroutine, or by a normal thread with mutex), C++ code cannot call Dart at all. Delaying those calls also seem very troublesome because of resource deallocation problems."),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Update"),": Search a bit on Discord history and here is a summary."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"[cannot find earlier discussions]"),(0,s.kt)("li",{parentName:"ul"},"20220111-20220114, hackers-framework, mentioned in ",(0,s.kt)("a",{parentName:"li",href:"https://discord.com/channels/608014603317936148/608014603317936150/976924283685199902"},"20220520")," by hixie, ",(0,s.kt)("a",{parentName:"li",href:"https://discord.com/channels/608014603317936148/608021234516754444/930241489374683157"},"https://discord.com/channels/608014603317936148/608021234516754444/930241489374683157")),(0,s.kt)("li",{parentName:"ul"},"[not found]",' "Hixie tried an experiment that didn\'t seem to get to a working point", ',(0,s.kt)("a",{parentName:"li",href:"https://discord.com/channels/608014603317936148/613398126367211520/977090864813846548"},"said here"),", but I cannot find the experiment code"),(0,s.kt)("li",{parentName:"ul"},'20220520, "general" ',(0,s.kt)("a",{parentName:"li",href:"https://discord.com/channels/608014603317936148/608014603317936150/977074969542553600"},"https://discord.com/channels/608014603317936148/608014603317936150/977074969542553600")),(0,s.kt)("li",{parentName:"ul"},'20220520, "hackers-performance-", with a pointer to "general" as previous discussions, ',(0,s.kt)("a",{parentName:"li",href:"https://discord.com/channels/608014603317936148/613398126367211520/977109431408009317"},"https://discord.com/channels/608014603317936148/613398126367211520/977109431408009317"))),(0,s.kt)("p",null,"Well I see some parts of my experiment above has already been discussed there")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-17T08:02:13Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"rethinking-overcoming-the-shortcomings-of-the-suspendable-62ms-22ms-experiment"},"Rethinking (overcoming) the shortcomings of ",(0,s.kt)("a",{parentName:"h3",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1248894781"},"the ",(0,s.kt)("inlineCode",{parentName:"a"},"Suspendable"),' "62ms->22ms" experiment')),(0,s.kt)("p",null,"The quoted text are the shortcomings mentioned in the experiment, and black text are my re-thoughts."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"It only suspends the layout and build phase. (The build phase is wrapped inside layout phase by adding a LayoutBuilder.) Indeed, it does not suspend the paint or raster phase, which should be done in future work.")),(0,s.kt)("p",null,"Given the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1249961627"},"discord discussions")," among @Hixie and @dnfield etc, seems build/layout is mostly the expensive one. So paint or raster may not needed to be considered at the highest priority, at least not implemented in this issue and may defer to future work."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"It paints nothing (i.e. do not call child.paint) if a Suspendable is suspending. This will destroy the layer tree and C++ engine layer trees, making performance much worse. We should address this problem later, possibly by keeping the layer tree not used but not removed.")),(0,s.kt)("p",null,"This is not a problem if we only consider the jank caused by widget creation/deletion (like going to a new page or ListView scroll to make a new widget visible)."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"It lets the whole ancestors (up until relayout-boundary) to relayout in each frame.")),(0,s.kt)("p",null,"But I guess this should not be a big problem in real world, because we should keep the heavy things in Suspendable subtrees and keep the ancestors simple."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Overhead will become non-neglectable, if we want it to run in 60fps. In other words, if we want each frame to be under 16ms, looks like we will only have <10ms for handling the suspendable widgets (rough estimate, but anyway numbers differ on different phones). Then, the price of 60fps smooth animation is that, the suspendable needs longer time to be loaded.")),(0,s.kt)("p",null,"However, if we want to keep it single-threaded (single isolate), as #110063 (multi isolate) is refused, this is the price we have to pay."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If a child under Suspendable mark itself as needed to relayout/rebuild, and there is relayout boundary between that child and Suspendable, then the suspending mechanism will not work at all.")),(0,s.kt)("p",null,"We should add more Suspendables if we observe such situation. More specifically, we should add a Suspendable (or, if using ",(0,s.kt)("inlineCode",{parentName:"p"},"keframe"),"-like solution, the FrameSeparateWidget) near that specific widget. Then, this is no longer a problem."),(0,s.kt)("p",null,"p.s. This is not a problem if we only consider the jank caused by widget creation/deletion (like going to a new page or ListView scroll to make a new widget visible)."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The current implementation does not run suspendable layouts ",(0,s.kt)("em",{parentName:"p"},"last"),'. Instead, they are run inside non-suspendable layout. Thus, we have to set a "earlier" deadline (e.g. 12ms, instead of 16.6ms in the example above), and hope that the remaining job will finish quick enough.')),(0,s.kt)("p",null,"Not a critical problem indeed."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/rendering/RenderSliverScrollingPersistentHeader/performLayout.html"},"Element.performLayout"),' says, "In implementing this function, you must call layout on each of your children". But, when implementing Suspendable, we have to violate this. We will face troubles, or just minor changes are enough?')),(0,s.kt)("p",null,"Will see whether it is a problem after doing more experiments."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Originally all code (implicitly) assume that, when a frame ends, build/didUpdateWidget has been called. But now this no longer holds. That will make a ton of widget fail to work, including those inside flutter framework, and many external packages. For example, those who assume this inside their addPostFrameCallback.")),(0,s.kt)("p",null,"Since this feature is completely opt-in (you have to manually put the Suspendable widget into your tree), users may be able to migrate their widgets when they decide to use Suspendable."),(0,s.kt)("p",null,"The problem is, it may take efforts to migrate each and every widget, and it also takes time to migrate all inside flutter framework itself. Luckily, it is opt-in, so we can do it steadily and slowly, just like how we migrate to ",(0,s.kt)("inlineCode",{parentName:"p"},"Material 3")," theme (it has been months but still not finished)."),(0,s.kt)("p",null,"Many code may migrate smoothly without any problem. (For example, I personally used MobX for my Flutter app, which has reactive states and automatic rebuild, so I seldom touch the raw frame callbacks. For many widgets in flutter framework we can reason about it in our heads and they seem ok as well.)"),(0,s.kt)("p",null,"We may need to provide some information to the users, indeed ",(0,s.kt)("inlineCode",{parentName:"p"},"State"),"s or ",(0,s.kt)("inlineCode",{parentName:"p"},"BulidContext"),"s, telling them they have been suspended. A simple method may be adding a field to ",(0,s.kt)("inlineCode",{parentName:"p"},"State/BuildContext"),", or use a ",(0,s.kt)("inlineCode",{parentName:"p"},"InheritedWidget"),". I may defer this work after seeing what info a real widget wants when migrating real widgets.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-17T11:46:14Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"enhance-keframe-now-seems-it-can-buildlayout-as-many-items-as-possible-until-time-is-up-ie-have-strategy-similar-to-the-layout-proposal-above"},"Enhance ",(0,s.kt)("inlineCode",{parentName:"h3"},"keframe"),": Now seems it can build/layout as many items as possible until time is up, i.e. have strategy similar to the ",(0,s.kt)("a",{parentName:"h3",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1248894781"},'"layout" proposal')," above"),(0,s.kt)("p",null,"@Nayuta403 "),(0,s.kt)("h4",{id:"the-problem"},"The problem"),(0,s.kt)("p",null,"As is discussed in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/LianjiaTech/keframe/issues/12#issuecomment-1238873216"},"https://github.com/LianjiaTech/keframe/issues/12#issuecomment-1238873216")," and (IIRC) earlier comments, ",(0,s.kt)("inlineCode",{parentName:"p"},"keframe")," now blindly builds one widget per frame, even if it can build (for example) 5 widgets. This makes the UI need much longer time to display fully. In addition, it always lag by one frame, because it uses setState in a addPostFrameCallback to update its widget."),(0,s.kt)("h4",{id:"the-solution"},"The solution"),(0,s.kt)("p",null,'IMHO, the following suggestion can avoid the problems above. Now it can build/layout as many items as possible until time is up, i.e. have strategy similar to the "layout" proposal above. Please correct me if I am wrong!'),(0,s.kt)("p",null,"As can be seen in the code example below, the key point is a ",(0,s.kt)("inlineCode",{parentName:"p"},"LayoutBuilder")," wrapped as parent of ",(0,s.kt)("inlineCode",{parentName:"p"},"FrameSeparateWidget"),". By doing so, we ensure that the build ",(0,s.kt)("em",{parentName:"p"},"and layout")," phase of widgets prior to the current widget has already been done. Now, FrameSeparateWidget can do a simple decision in its ",(0,s.kt)("inlineCode",{parentName:"p"},"build")," method - if time is sufficient just return new child, otherwise return the old one and rebuild in the next frame."),(0,s.kt)("p",null,'By the way, this is partially equivalent to the "layout" proposal because of the following: IMHO, the ',(0,s.kt)("inlineCode",{parentName:"p"},"builder")," callback inside a ",(0,s.kt)("inlineCode",{parentName:"p"},"LayoutBuilder")," is called within ",(0,s.kt)("inlineCode",{parentName:"p"},"performLayout"),". Therefore, the ",(0,s.kt)("inlineCode",{parentName:"p"},"build")," of the child widget is strongly related to the ",(0,s.kt)("inlineCode",{parentName:"p"},"layout"),' of the LayoutBuilder render object. Then, I can partially migrate the idea in the "layout" proposal (where I hacked the performLayout) to this case (where I hack the build).'),(0,s.kt)("h4",{id:"full-code-example-and-output"},"Full code example and output"),(0,s.kt)("p",null,"The dummy ",(0,s.kt)("inlineCode",{parentName:"p"},"timeRemain")," simulates the real world where we may have (e.g.) 16ms for each frame."),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"\n// ignore_for_file: avoid_print, no_runtimetype_tostring\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter/scheduler.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nlate int timeRemain;\n\nvoid main() {\n  testWidgets('example', (tester) async {\n    print('frame #1');\n    timeRemain = 3;\n    await tester.pumpWidget(MaterialApp(\n      home: Column(\n        children: [\n          for (var i = 0; i < 5; ++i)\n            LayoutBuilder(\n              builder: (_, __) => FrameSeparateWidget(\n                name: '$i',\n                child: i.isOdd ? SlowBuildWidget(name: '$i') : SlowLayoutWidget(name: '$i'),\n              ),\n            ),\n        ],\n      ),\n    ));\n\n    print('frame #2');\n    timeRemain = 3;\n    await tester.pump();\n\n    print('frame #3');\n    timeRemain = 3;\n    await tester.pump();\n  });\n}\n\n// the `keframe` one\nclass FrameSeparateWidget extends StatefulWidget {\n  final String name;\n  final Widget child;\n\n  const FrameSeparateWidget({super.key, required this.child, required this.name});\n\n  @override\n  State<FrameSeparateWidget> createState() => _FrameSeparateWidgetState();\n}\n\nclass _FrameSeparateWidgetState extends State<FrameSeparateWidget> {\n  @override\n  Widget build(BuildContext context) {\n    if (timeRemain > 0) {\n      print('$runtimeType#${widget.name} build: time is ok, give normal child');\n      return widget.child;\n    } else {\n      print('$runtimeType#${widget.name} build: time is up, give dummy');\n      SchedulerBinding.instance.addPostFrameCallback((_) => setState(() {}));\n      return Container();\n    }\n  }\n}\n\nclass SlowBuildWidget extends StatelessWidget {\n  final String name;\n\n  const SlowBuildWidget({super.key, required this.name});\n\n  @override\n  Widget build(BuildContext context) {\n    print('$runtimeType#$name simulates slow build (timeRemain: $timeRemain -> ${timeRemain - 1})');\n    timeRemain--;\n    return Container();\n  }\n}\n\nclass SlowLayoutWidget extends SingleChildRenderObjectWidget {\n  final String name;\n\n  const SlowLayoutWidget({super.key, super.child, required this.name});\n\n  @override\n  RenderSlowLayout createRenderObject(BuildContext context) => RenderSlowLayout(name: name);\n\n  @override\n  void updateRenderObject(BuildContext context, RenderSlowLayout renderObject) => renderObject.name = name;\n}\n\nclass RenderSlowLayout extends RenderProxyBox {\n  RenderSlowLayout({RenderBox? child, required this.name}) : super(child);\n\n  String name;\n\n  @override\n  void performLayout() {\n    super.performLayout();\n    print('$runtimeType#$name simulates slow layout (timeRemain: $timeRemain -> ${timeRemain - 1})');\n    timeRemain--;\n  }\n}\n")),(0,s.kt)("p",null,"outputs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"frame #1\n_FrameSeparateWidgetState#0 build: time is ok, give normal child\nRenderSlowLayout#0 simulates slow layout (timeRemain: 3 -> 2)\n_FrameSeparateWidgetState#1 build: time is ok, give normal child\nSlowBuildWidget#1 simulates slow build (timeRemain: 2 -> 1)\n_FrameSeparateWidgetState#2 build: time is ok, give normal child\nRenderSlowLayout#2 simulates slow layout (timeRemain: 1 -> 0)\n_FrameSeparateWidgetState#3 build: time is up, give dummy\n_FrameSeparateWidgetState#4 build: time is up, give dummy\nframe #2\n_FrameSeparateWidgetState#3 build: time is ok, give normal child\nSlowBuildWidget#3 simulates slow build (timeRemain: 3 -> 2)\n_FrameSeparateWidgetState#4 build: time is ok, give normal child\nRenderSlowLayout#4 simulates slow layout (timeRemain: 2 -> 1)\nframe #3\n")))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-17T14:35:35Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Nayuta403 If you are interested, I can try to make it a full library. Given that it is based on keframe's idea (hack widget build), but at the same time it is quite different from the existing implementation (do not use addPostFrameCallback and use the LayoutBuilder hack), I am not sure whether I should make a PR to keframe, or I should create a separate lib by myself (and mention keframe)?")),(0,s.kt)(c,{author:"Nayuta403",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-17T16:22:11Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy  Hi man, you are very thoughtful and full of passion, thank you for your thoughts. Recently I have been busy with work.I want to first communicate with you about Keframe idea and then follow up your discussion."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"As can be seen in the code example below, the key point is a LayoutBuilder wrapped as parent of FrameSeparateWidget.  By doing so, we ensure that the build and layout phase of widgets prior to the current widget has already been done.")),(0,s.kt)("p",null,"\ud83d\udc4d \ud83d\udc4d   Your idea is great, we can hit the timer at the beginning of a frame and it seems to calculate the ",(0,s.kt)("inlineCode",{parentName:"p"},"timeRemian"),". If you don't mind, I think you can create a branch/PR in KeFrame for discussion (I've given you a Write access) because there's some basic mechanics in there and a ready-made example in there."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"In addition, it always lag by one frame, because it uses setState in a addPostFrameCallback to update its widget.")),(0,s.kt)("p",null,"I think this will not happen, because KeFrame calls ",(0,s.kt)("inlineCode",{parentName:"p"},"addPostTimeCallBack")," during initState (i.e.",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/blob/5816d20b86b95205c40921fa91ee3434b9c97ac6/packages/flutter/lib/src/scheduler/binding.dart#L1197-L1201"},"https://github.com/flutter/flutter/blob/5816d20b86b95205c40921fa91ee3434b9c97ac6/packages/flutter/lib/src/scheduler/binding.dart#L1197-L1201"),") and _postFrameCallbacks call after ",(0,s.kt)("inlineCode",{parentName:"p"},"_persistentCallbacks")," is finished (i.e.\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/blob/5816d20b86b95205c40921fa91ee3434b9c97ac6/packages/flutter/lib/src/scheduler/binding.dart#L1203-L1210"},"https://github.com/flutter/flutter/blob/5816d20b86b95205c40921fa91ee3434b9c97ac6/packages/flutter/lib/src/scheduler/binding.dart#L1203-L1210"),"), They're both in the ",(0,s.kt)("inlineCode",{parentName:"p"},"handleDrawFrame")," method, so I think they're still in the same frame."),(0,s.kt)("p",null,"Ps: I actually think Fiber and Keframe will end up with similar results, but Keframe will work within the existing framework and won't require a lot of changes to the framework and engine. I think we can contribute it to the flutter after we've optimized it, like nested in a ListView or a Column or something, and open it with flags, like a RepaintBoundary.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-17T23:12:10Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Nayuta403 You are welcome!"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"we can hit the timer at the beginning of a frame and it seems to calculate the timeRemian")),(0,s.kt)("p",null,'Yes, just like my "layout" demo, which I recorded when the frame begins.'),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"In addition, it always lag by one frame, ... I think this will not happen")),(0,s.kt)("p",null,"Well yes the function call is in the same frame; but indeed, if I understand correctly, the ",(0,s.kt)("em",{parentName:"p"},"build")," will lag one frame. Consider the simplest example, where we are building a new widget tree (thus initState) with a child. Then, in frame 1, FrameSeparateWidget has initState and build called. But it is only at the post-frame callback phase that FrameSeparateWidget.result is filled with the real child. So it is only at frame 2 that FrameSeparateWidget really renders the child onto the screen."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Ps: I actually think Fiber and Keframe will end up with similar results, but Keframe will work within the existing framework and won't require a lot of changes to the framework and engine. I think we can contribute it to the flutter after we've optimized it, like nested in a ListView or a Column or something, and open it with flags, like a RepaintBoundary.")),(0,s.kt)("p",null,"That looks interesting, and I love to contribute to Flutter :) But I am worried whether Flutter will accept such widgets that can live in thirdparty packages. On the contrary, if we need to modify the framework and it has to be integrated with the framework, then surely we need to put it into flutter framework."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"create a branch/PR in KeFrame for discussion (I've given you a Write access) ")),(0,s.kt)("p",null,"Thanks for your invitation (I see it). However, I realize keframe is under ",(0,s.kt)("inlineCode",{parentName:"p"},"LianJia"),", a commercial company. It is not a person (e.g. you), a nonprofit organization (e.g. the flutter organization, the llvm org, the mobx org), a company known to have a ton of open source contributions (e.g. google), or something like that. So I am very sorry I cannot join it. But anyway, all my work will be open-sourced, and under license like MIT, so everyone can use it!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-17T23:33:32Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@Nayuta403 A bit more explanation: Why we do not need to worry about "the child subtree build&layout for a FrameSeparateWidget is so long that it makes everything slow"?'),(0,s.kt)("p",null,"Because if that is the case, we can wrap several FrameSeparateWidget in the heavy parts of that subtree. Then, because each (new version I proposed yesterday) FrameSeparateWidget builds normally if not timeout, it will behave normally if time is ok; on the contrary, as long as time is up, subtree will pause to build. By doing this, we can ensure every FrameSeparateWidget takes moderate time length (say, 1ms), and there is no such case as one FrameSeparateWidget taking (e.g.) 100ms so everything is jank.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-18T04:11:00Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Update:")," Some experiments here using the new implementation (",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1250056634"},"proposed here"),")."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth"},"https://github.com/fzyzcjy/flutter_smooth")),(0,s.kt)("p",null,"Btw I find that performance boost varies a lot when considering different experiments.")),(0,s.kt)(c,{author:"Nayuta403",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-18T16:05:22Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"But anyway, all my work will be open-sourced, and under license like MIT, so everyone can use it!")),(0,s.kt)("p",null,"Yes, I was negligent. ",(0,s.kt)("inlineCode",{parentName:"p"},"Lianjia")," is the company I used to work for. Just because this project is completed by me and has a certain number of users, I am still maintaining it personally. You are absolutely right, I also wish we had some open-sourced work available to everyone.  We can work on your project ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth"},"https://github.com/fzyzcjy/flutter_smooth")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'A bit more explanation: Why we do not need to worry about "the child subtree build&layout for a FrameSeparateWidget is so long that it makes everything slow"?')),(0,s.kt)("p",null,"Yes, I can understand that. For the subtree to time out, we can delay the build again by nesting the FrameSeparateWidget, which I've used before. I think from this point of view, all widget builds are interruptible, this Fiber-like mechanism.  I have a crazy idea that if we add a ",(0,s.kt)("inlineCode",{parentName:"p"},"placholder")," property to all widget(Not all, we can add this property to some base class), we will build the ",(0,s.kt)("inlineCode",{parentName:"p"},"placholder")," if the frame ",(0,s.kt)("inlineCode",{parentName:"p"},"timeRemain")," time is 0. Then the jank will never happen ! HHHHH"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Update: Some experiments here using the new implementation.")),(0,s.kt)("p",null,"I like your new implementation, which seems to have solved the problem we mentioned earlier by laying out as many widgets as possible in each frame. I think there may be some details that need to be added \uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Whether other lifecycle states should be considered for ",(0,s.kt)("inlineCode",{parentName:"li"},"_SmoothState"),", such as ",(0,s.kt)("inlineCode",{parentName:"li"},"didUpdateWidget")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"onDispose"),". For example, I encountered an error in keframe when setState was called from outside because ",(0,s.kt)("inlineCode",{parentName:"li"},"result")," was cached in State. If the ",(0,s.kt)("inlineCode",{parentName:"li"},"widget.child")," is changed externally so that it does not work (It doesn't look like it's going to happen because you're using widget.child directly in build, but I think you might need to think about it when using State, I can add a ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/LianjiaTech/keframe/blob/master/example/lib/page/complex_list_example.dart"},"https://github.com/LianjiaTech/keframe/blob/master/example/lib/page/complex_list_example.dart")," in your example)"),(0,s.kt)("li",{parentName:"ul"},"In your example, the height of the item is 24. But for the list, many times we don't know the width and height at code time, and jitter will occur when the placeholder and the actual list are not the same width and height.(because placeholder becomes item, Causing sibling layout changes). like this ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/LianjiaTech/keframe/blob/master/example/lib/page/opt/list_opt_example2.dart"},"example")," in keframe. I did this by using ",(0,s.kt)("inlineCode",{parentName:"li"},"SizeCacheWidget")," to cache the width and height of the item and force it to the placeholder so that it would not shake the second time the item was displayed. (You can't avoid it the first time, because the Item doesn't have a layout.) Do you have any other ideas?")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"On the contrary, if we need to modify the framework and it has to be integrated with the framework, then surely we need to put it into flutter framework.")),(0,s.kt)("p",null,"Yes, I think if we do it well enough, we can communicate with the Flutter Team and submit it to the Flutter Framework.  I communicated with @dnfield  a long time ago and he was also interested in it. ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/613398126367211520/977268943238602782"},"discord"),"\nIf we want to commit to Flutter Framework , what is the value of ",(0,s.kt)("inlineCode",{parentName:"p"},"kTimeThreshold"),"? Since we are only counting the build/layout time now, using 16.7 doesn't seem particularly appropriate, and for 120HZ devices, this value should be 16.7/2 ms"),(0,s.kt)("p",null,"How do you think about it?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-18T23:03:56Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Yes, I was negligent. Lianjia is the company I used to work for. Just because this project is completed by me and has a certain number of users, I am still maintaining it personally. You are absolutely right, I also wish we had some open-sourced work available to everyone. We can work on your project ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth"},"https://github.com/fzyzcjy/flutter_smooth"))),(0,s.kt)("p",null,"Sure! Looking forward to collaborations :)"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"}," I have a crazy idea that if we add a placholder property to all widget(Not all, we can add this property to some base class), we will build the placholder if the frame timeRemain time is 0. Then the jank will never happen ! HHHHH")),(0,s.kt)("p",null,"Haha that is really a crazy idea! The problem is overhead will be very big though :)"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Whether other lifecycle states should be considered for _SmoothState, such as...")),(0,s.kt)("p",null,"Agree! At least we should add a test in our code, asserting its correctness"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I did this by using SizeCacheWidget")),(0,s.kt)("p",null,"I think that is a pretty smart idea, and has not found other solutions yet. If you approve I will add things similar to that into the codebase. The idea will be the same, while implementation will differ slightly (e.g. use a InheritedWidget + StatefulWidget + controller)."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Yes, I think if we do it well enough, we can communicate with the Flutter Team and submit it to the Flutter Framework. I communicated with @dnfield a long time ago and he was also interested in it. ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/613398126367211520/977268943238602782"},"discord"))),(0,s.kt)("p",null,"Totally agree. (Btw I have searched through the history a few days ago: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1249961627"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1249961627"),")"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If we want to commit to Flutter Framework , what is the value of kTimeThreshold? Since we are only counting the build/layout time now, using 16.7 doesn't seem particularly appropriate, and for 120HZ devices, this value should be 16.7/2 ms")),(0,s.kt)("p",null,"The 120hz should be simple since we can detect what frequency we are under."),(0,s.kt)("p",null,'The problem is "we are only counting the build/layout time now". '),(0,s.kt)("p",null,'Btw, I realized that, for a scrolling list, the "finalizing" phase also takes time. Let alone the paint/compositing phase we all have known.'),(0,s.kt)("p",null,"They (paint/compositing/finalizing) each take a little of time, but when accumulated, it is non-neglectible for that 16ms.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-18T23:09:40Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw, recent ideas:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"I am considering halting the ",(0,s.kt)("inlineCode",{parentName:"li"},"paint")," phase as well: Maybe we can directly reuse the old Layer, so we can get the same UI and at the same time do not call paint on subtree. This is just very naive idea and I will make an experiment later."),(0,s.kt)("li",{parentName:"ul"},'"for a scrolling list, the "finalizing" phase also takes time" - Maybe we can hack ListView itself, and control when it disposes its widgets.'))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-20T13:46:34Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"new-idea-preemption"},"New idea: Preemption"),(0,s.kt)("h4",{id:"advantages-1"},"Advantages"),(0,s.kt)("p",null,'It can nearly achieve my goal: 60fps, no matter how heavy your build/layout are. Without limitations of other approaches, such as the ones in flutter_smooth, or the ones in "layout" proposal where the widget subtree has to allow their build/layout not called in some frames.'),(0,s.kt)("p",null,"It also ",(0,s.kt)("em",{parentName:"p"},"has zero overhead about re-layouting"),", i.e. it will ",(0,s.kt)("em",{parentName:"p"},"never"),' need to pay any extra cost to layout, compared to the widget/layout based approaches. It also solves the problem of "how to suspend a layout". I can explain more advantages and comparisons if needed.'),(0,s.kt)("p",null,'Compared with the "dual isolate" proposal above, that one seems very hard to implement as it requires threads or coroutines, but this proposal is not. In addition, this proposal eliminate the second "sidecar" isolate, and everything is in main isolate, so we can run any code with all data in main isolate memory visible.'),(0,s.kt)("h4",{id:"details"},"Details"),(0,s.kt)("p",null,"Continue and modified from ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1249005541"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1249005541"),' (the "dual isolates" idea, but without the need of adding new threads (very troublesome to do syncing), or c++ coroutines (troublesome when c++ wants to call dart callback).'),(0,s.kt)("p",null,'Notice that, the c++ code, main isolate, and sidecar isolate all run on "ui thread". No new threads, no coroutines, etc. So this time, the diagram draws nothing but very normal function calls.'),(0,s.kt)("p",null,"Description of the figure:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"vsync comes."),(0,s.kt)("li",{parentName:"ul"},"As normal, C++ calls Dart's drawFrame."),(0,s.kt)("li",{parentName:"ul"},"Suppose Dart has 3 widgets to build/layout. It build/layout the 1st, then 2nd."),(0,s.kt)("li",{parentName:"ul"},"Then it realizes time has up (say, 15ms has come), when ",(0,s.kt)("inlineCode",{parentName:"li"},"layout()")," the 2nd widget. Then it calls ",(0,s.kt)("inlineCode",{parentName:"li"},"preemptRaster()")," (a dart function)."),(0,s.kt)("li",{parentName:"ul"},"In ",(0,s.kt)("inlineCode",{parentName:"li"},"preemptRaster"),", we firstly call ",(0,s.kt)("inlineCode",{parentName:"li"},"preemptModifyLayerTree"),' to modify the layer tree a bit, like CircularProgressIndicator or the scrolling ListView wrapper widget case, described in "dual isolate" proposal above. For simplicity, imagine this ',(0,s.kt)("inlineCode",{parentName:"li"},"preemptModifyLayerTree")," is implemented via very low level API, such as ",(0,s.kt)("inlineCode",{parentName:"li"},"containerLayer.offset = Offset(10,20)"),"."),(0,s.kt)("li",{parentName:"ul"},"In ",(0,s.kt)("inlineCode",{parentName:"li"},"preemptRaster"),", we then call a probably modified version of FlutterView.render. In other words, we provide layer tree to C++ code, and c++ code provide it to raster thread. ",(0,s.kt)("em",{parentName:"li"},"Notice what layer tree we provide here"),": Because ",(0,s.kt)("inlineCode",{parentName:"li"},"preemptRaster")," is called within a ",(0,s.kt)("inlineCode",{parentName:"li"},"layout()"),", the ",(0,s.kt)("inlineCode",{parentName:"li"},"paint")," phase has not started, so the layer tree is completely old (instead of mixed). ThusIn addition, ",(0,s.kt)("inlineCode",{parentName:"li"},"preemptModifyLayerTree")," will modify the layer tree a bit. That's all. We will send this to raster."),(0,s.kt)("li",{parentName:"ul"},"Raster thread renders that layer tree as usual, so we see beautiful things on screen. "),(0,s.kt)("li",{parentName:"ul"},"UI thread C++/Dart goes on, because ",(0,s.kt)("inlineCode",{parentName:"li"},"preemptRaster")," function returns. The Dart code will continue from where ",(0,s.kt)("inlineCode",{parentName:"li"},"preemptRaster")," is called (you know, just very plain function calls; but this solves the \"how to suspend a layout call\" implicitly indeed). In Dart's view, it thinks it is still the 1st frame. Let's say it continues layouting the 2nd widget. Then 3rd widget. Then paint, flush compositing bits, semantics, etc."),(0,s.kt)("li",{parentName:"ul"},"Then finally, as a normal pipeline stage, dart provides the new layer tree and let c++ to throw it to the raster thread."),(0,s.kt)("li",{parentName:"ul"},"Raster thread renders it to screen in the background."),(0,s.kt)("li",{parentName:"ul"},"Then, just like what will be done normally in frame 1, call post frame callbacks, c++ calls dart for some callbacks, etc."),(0,s.kt)("li",{parentName:"ul"},"Now ui thread is idle. When next vsync comes, the same loop will go.")),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/191271636-f4b8dc2d-8b35-42f5-87b4-42851eb5ef85.png",alt:"UML\u65f6\u5e8f\u56fe (2)"}))),(0,s.kt)(c,{author:"Nayuta403",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-20T13:47:17Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"}," I think that is a pretty smart idea, and has not found other solutions yet. If you approve I will add things similar to that into the codebase. The idea will be the same, while implementation will differ slightly (e.g. use a InheritedWidget + StatefulWidget + controller).")),(0,s.kt)("p",null,"Yeah, I think the code willn't be much different, or I can directly PR to your repo? This jitter usually occurs in ListView, which needs to be nested with SizeCacheWidget in KeFrame, and LayoutInfoNotification is emitted in FrameSpeWidget. So the user has to specify SizeCacheWidget if they want to user ListView.  if it's in Flutter framework, we can add it directly, or do you have other ideas?"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"}," The 120hz should be simple since we can detect what frequency we are under.")),(0,s.kt)("p",null,"Yes, we can get it directly from the engine, but I have to see how to get it in the framework. It may be necessary to add an API"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},' "for a scrolling list, the "finalizing" phase also takes time" - Maybe we can hack ListView itself, and control when it disposes its widgets.')),(0,s.kt)("p",null,'Yes, I think we can ignore this factor for now as I understand it is not particularly time consuming. Or we can directly change the "finalizing" timing of the ListView.'),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I am considering halting the paint phase as well: Maybe we can directly reuse the old Layer, so we can get the same UI and at the same time do not call paint on subtree. This is just very naive idea and I will make an experiment later.")),(0,s.kt)("p",null,"I agree with that, I think you just need to nest ",(0,s.kt)("inlineCode",{parentName:"p"},"RepaintBoundary")," on the subtree, right? Just like ListView item, avoid subtree paint causing pain in other widgets."),(0,s.kt)("p",null,"@fzyzcjy "),(0,s.kt)("p",null,"I got a bad cold yesterday, so I was late in answering the message")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-20T13:48:45Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@dnfield @Nayuta403 @JsouLiang (and other experts) I have made a "preemption" proposal, which is like a easy-to-implement version of "dual isolate". Looking forward to any feedbacks! I am going to implement a prototype tomorrow :)'),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Same thing in discord: ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608021234516754444/1021783497112821861"},"https://discord.com/channels/608014603317936148/608021234516754444/1021783497112821861")),(0,s.kt)("p",null,"There are some discussions going on there as well. For completeness, a reader of this github thread may need to go to this link and view comments there.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-20T13:53:17Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Nayuta403 "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"or I can directly PR to your repo?")),(0,s.kt)("p",null,'Sure! But I am hesitate whether going on flutter_smooth now, as the "preemption" proposal seems quite appealing and addresses many problems of flutter_smooth, the layout proposal, and the keframe.'),(0,s.kt)("p",null,'Could you please have a look at "preemption" proposal :) I want to implement a prototype tomorrow (UTC+8 timezone).'),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"This jitter usually occurs in ListView, which needs to be nested with SizeCacheWidget in KeFrame, and LayoutInfoNotification is emitted in FrameSpeWidget. So the user has to specify SizeCacheWidget if they want to user ListView. if it's in Flutter framework, we can add it directly, or do you have other ideas?")),(0,s.kt)("p",null,"That LGTM. Indeed I will do something like: The ",(0,s.kt)("inlineCode",{parentName:"p"},"SizeCacheWidget")," (I may call it ",(0,s.kt)("inlineCode",{parentName:"p"},"SmoothParent"),") has some inherited widget to provide a controller to its child subtree. Then child can save anything they want to that controller. Anyway, those are simple things, and I can also do it if you like (just need e.g. 15 minutes)."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Yes, we can get it directly from the engine, but I have to see how to get it in the framework. It may be necessary to add an API")),(0,s.kt)("p",null,"I remembered I did that via calling java/swift. Anyway this is minor problem :)"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I agree with that, I think you just need to nest RepaintBoundary on the subtree, right? Just like ListView item, avoid subtree paint causing pain in other widgets.")),(0,s.kt)("p",null,'Yes, but I hope not too many RepaintBoundary in the meanwhile. IIRC during some testing they add overheads. Btw the "preemption" proposal does not have this problem.'),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I got a bad cold yesterday, so I was late in answering the message")),(0,s.kt)("p",null,"Sorry to hear that, and hope you are getting well!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021783497112821861",source:"discord",createTime:"2022-09-20T14:02:49.531+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hi, I have proposed an approach for 60fps smooth animation no matter how heavy widget tree build and layout is, without paying extra cost (such as redundant re-layout). ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1252379787"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1252379787"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021783945697837066",source:"discord",createTime:"2022-09-20T14:04:36.482+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Hixie @dnfield (since @dnfield mentioned that layout suspending has been discussed between them; this one does suspend layout and render first)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021784169891758091",source:"discord",createTime:"2022-09-20T14:05:29.934+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I am planning to start working on a prototype ~9hr later, but want to hear some hints from you experts, since I have not quite hacked the engine before")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021786735652376626",source:"discord",createTime:"2022-09-20T14:15:41.659+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I'm curious about how preemtRaster would modify the layer tree and how it would know where to resume. Those are the more difficult bits.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021788915583156284",source:"discord",createTime:"2022-09-20T14:24:21.395+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Let's say, for simplicity as a demo, just modify a layer directly via lowest level api. - But we can definitely wrap it to some higher level. And with future thinking maybe we can also do something with existing widget framework.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021789054594977842",source:"discord",createTime:"2022-09-20T14:24:54.538+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"how it would know where to resume: Just call function and it returns! Example:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021789201718579314",source:"discord",createTime:"2022-09-20T14:25:29.615+00:00",mdxType:"DiscussionComment"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"class RenderObject {\n  void layout() {\n    if (time_is_nearly_out) preemptRaster();\n    normal_layout_things;\n  }\n}\n\nvoid preemptRaster() {\n  modify_layer_tree_for_animation();\n  FlutterView.render(the_layer_tree);\n}\n"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021789403288436778",source:"discord",createTime:"2022-09-20T14:26:17.673+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield")),(0,s.kt)(c,{author:"Nayuta403",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-20T14:27:41Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"}," Anyway, those are simple things, and I can also do it if you like (just need e.g. 15 minutes).")),(0,s.kt)("p",null,"Haha OK, you do it \ud83d\udc4d\ud83c\udffb  If I do I think it will probably take more than 15 minutes to communicate. hhhh"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},' Could you please have a look at "preemption" proposal :) I want to implement a prototype tomorrow (UTC+8 timezone).')),(0,s.kt)("p",null,"I wonder how this Frame1 is generated, now there are only two widgets with build/layout and neither of them have paint/comp etc. If you use the LayerTree from the previous frame that It looks the same as it does now. (A jank happened)\nAm I getting it wrong?  I'm looking forward to seeing your prototype : )"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/40540394/191283147-dc43f524-fa0d-4681-8273-f23356c39860.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021790802122375220",source:"discord",createTime:"2022-09-20T14:31:51.181+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"A question: Take ",(0,s.kt)("inlineCode",{parentName:"p"},"RenderOpacity")," for example, and suppose we want that in preemptRaster. Currently it is: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"layer = context.pushOpacity(offset, _alpha, super.paint, oldLayer: layer as OpacityLayer?);\n\n// definition\n  OpacityLayer pushOpacity(Offset offset, int alpha, PaintingContextCallback painter, { OpacityLayer? oldLayer }) {\n    final OpacityLayer layer = oldLayer ?? OpacityLayer();\n    layer\n      ..alpha = alpha\n      ..offset = offset;\n    pushLayer(layer, painter, Offset.zero);\n    return layer;\n  }\n")),(0,s.kt)("p",null,"So, my naive thought of directly manipulating it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"void directlyManipulateOpacityInPreemptRaster() {\n  final OpacityLayer layer = layer_tree.children.where(...); // find opacity layer\n  layer.alpha = some_new_value_for_animation;\n}\n")),(0,s.kt)("p",null,"If I call merely this, without all those PictureRecorder/create-new-layer etc, will it be acceptable?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-20T14:34:30Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If I do I think it will probably take more than 15 minutes to communicate. hhhh")),(0,s.kt)("p",null,"Haha I think so!"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I wonder how this Frame1 is generated, now there are only two widgets with build/layout and neither of them have paint/comp etc")),(0,s.kt)("p",null,"Well I should say, this diagram happens ",(0,s.kt)("em",{parentName:"p"},"after")," we have rendered a lot of frames. So the layer tree is already there, just ",(0,s.kt)("em",{parentName:"p"},"without")," the several newly added/modified widgets."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If you use the LayerTree from the previous frame that It looks the same as it does now. (A jank happened)\nAm I getting it wrong?")),(0,s.kt)("p",null,"No, I call ",(0,s.kt)("inlineCode",{parentName:"p"},"preemptModifyLayerTree"),". That one handles animations, e.g. CircularProgressIndicator, or ListView scrolling, or opacity changing animation. For simplest example, for opacity, it may update a OpacityLayer.opacity from 0.1 to 0.2 etc."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I'm looking forward to seeing your prototype : )")),(0,s.kt)("p",null,"Thanks :)")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021792183105355846",source:"discord",createTime:"2022-09-20T14:37:20.433+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"What happens if a render object doesn't implement preemptRaster?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021792880861384764",source:"discord",createTime:"2022-09-20T14:40:06.791+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just put it into ",(0,s.kt)("inlineCode",{parentName:"p"},"RenderObject.layout"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021793050411933706",source:"discord",createTime:"2022-09-20T14:40:47.215+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"e.g. add ",(0,s.kt)("inlineCode",{parentName:"p"},"if (time_is_nearly_out) preemptRaster();")," as 1st line of RenderObject.layout. (Surely we may optimize it to be faster, but idea is same)")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021807196272603156",source:"discord",createTime:"2022-09-20T15:36:59.851+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"What happens if devs write something slow into ",(0,s.kt)("inlineCode",{parentName:"p"},"preemptRaster"),"? \ud83d\ude42")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021807402510716970",source:"discord",createTime:"2022-09-20T15:37:49.022+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I'm curious about this, maybe it'd help to see a little bit more detail around implemenation. Perhaps write up a doc?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021917668288245772",source:"discord",createTime:"2022-09-20T22:55:58.432+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Just do not do that \ud83d\ude09 It is like asking "what if dev use a million of pushLayer today (answer: it will be slow)"')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021917840808362024",source:"discord",createTime:"2022-09-20T22:56:39.564+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure! Do you mean ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1SFRO8U2toOlAaZ38dsuEU7Wm5fn41wvBCWKiwADqfmw/edit"},"https://docs.google.com/document/d/1SFRO8U2toOlAaZ38dsuEU7Wm5fn41wvBCWKiwADqfmw/edit")," the flutter design doc template?")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021917907569090641",source:"discord",createTime:"2022-09-20T22:56:55.481+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So I think an ideal solution will not require developers to update their widgets/render objects, and will not break if developers decide to just throw tons of work into a new method they have to implement")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021917931367583814",source:"discord",createTime:"2022-09-20T22:57:01.155+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, that would be good")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021917995548815420",source:"discord",createTime:"2022-09-20T22:57:16.457+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"not require developers to update their widgets/render objects -> Yes, this solution do not require")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021918064721276928",source:"discord",createTime:"2022-09-20T22:57:32.949+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"will not break if developers decide to just throw tons of work into a new method they have to implement -> dev do not implement preemptRaster")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021918138276773928",source:"discord",createTime:"2022-09-20T22:57:50.486+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Instead, the API we give is like this:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021918398495592519",source:"discord",createTime:"2022-09-20T22:58:52.527+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"No dev will know what is preemptRaster. They only know that, when they want a smooth CircularProgressIndicator, or a smooth ListView scroll, or a smooth opacity animation, they put a special widget into the tree, say, ",(0,s.kt)("inlineCode",{parentName:"p"},"PreemptCircularProgressIndicator()"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021918533053055027",source:"discord",createTime:"2022-09-20T22:59:24.608+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Under the hood, our PreemptCircularProgressIndicator will utilize preemptRaster.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021918625873022996",source:"discord",createTime:"2022-09-20T22:59:46.738+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw, preemptRaster is ",(0,s.kt)("em",{parentName:"p"},"not")," a method in RenderObject that everyone needs to implement, unlike layout/paint/... which everyone should impl")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021918706621755533",source:"discord",createTime:"2022-09-20T23:00:05.99+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"preemptRaster is like some utility function, that only we flutter ",(0,s.kt)("em",{parentName:"p"},"framework")," dev need to impl once")),(0,s.kt)(c,{author:"ping",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021918768307392545",source:"discord",createTime:"2022-09-20T23:00:20.697+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"}," when they want a smooth CircularProgressIndicator, or a smooth ListView scroll, or a smooth opacity animation\nIsn't that always?"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021918890294521866",source:"discord",createTime:"2022-09-20T23:00:49.781+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Haha, then maybe make it the default \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021918915426795630",source:"discord",createTime:"2022-09-20T23:00:55.773+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Or, maybe add a flag into it")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021918989674369094",source:"discord",createTime:"2022-09-20T23:01:13.475+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"say, ",(0,s.kt)("inlineCode",{parentName:"p"},"CircularProgressIndicator(preempt: true/false)"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021919185909063761",source:"discord",createTime:"2022-09-20T23:02:00.261+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Anyway I have not think about the details about the ",(0,s.kt)("em",{parentName:"p"},"high level")," apis inside preemptRender. It may or may not support ",(0,s.kt)("em",{parentName:"p"},"arbitrary")," widgets. I am thinking about making it run firstly.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021920487183499294",source:"discord",createTime:"2022-09-20T23:07:10.509+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw, what are you guy's timezone? I will create a design doc probably within an hour, not sure whether you guys are online or not")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021921192090812448",source:"discord",createTime:"2022-09-20T23:09:58.572+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just sharing some experience I've had working on performance: it's very rare to find that applications are blocked on the UI thread, except for 1) incorrectly implemented scrolling 2) lack of isolate usage for data processing. Thus I would be quite skeptical that this sort of change would actually be beneficial to most Flutter developers, and design doc or not there is almost no chance I would be in favor of adding this to the framework."),(0,s.kt)("p",null,"@dnfield pointed out another case to me, which is that on particularly low end android devices, even simple UIs can jank due to text layout costs. Though I think its also fairly common for these particularly low end devices to have very few cores, or only one or two fast cores - meaning that multithreading may not help much either."),(0,s.kt)("p",null,"I think the only thing that would cause me to change my mind is a prototype that demonstrated substantially better performance on a real-ish app; that is one that did not intentionally do way too much work."),(0,s.kt)("p",null,"Not trying to be too discouraging, but I want to make sure that we're on the same page on the expectations for a feature like this.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021921345145147392",source:"discord",createTime:"2022-09-20T23:10:35.063+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"it's very rare to find that applications are blocked on the UI thread,\nMe \ud83d\ude26 Quite complex UI, on very low end devices"))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021921455816048681",source:"discord",createTime:"2022-09-20T23:11:01.449+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I understand that, but then every time I get source code access, its always 1) or 2).")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021921571339784193",source:"discord",createTime:"2022-09-20T23:11:28.992+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"not saying that you're wrong, just that I'm not willing to take anyone at their word for this. I want to see the example code")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021921790752206859",source:"discord",createTime:"2022-09-20T23:12:21.304+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(Sorry you already mentioned that example)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021921827733389322",source:"discord",createTime:"2022-09-20T23:12:30.121+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(wait a minute I first read all messages)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922041307340880",source:"discord",createTime:"2022-09-20T23:13:21.041+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Though I think its also fairly common for these particularly low end devices to have very few cores, or only one or two fast cores - meaning that multithreading may not help much either.\nMy suggestion is not multithreading, it is still single thread \ud83d\ude42"))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922205292056706",source:"discord",createTime:"2022-09-20T23:14:00.138+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I might be mixing this up with the other github issue on a separate animation thread")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922220026626098",source:"discord",createTime:"2022-09-20T23:14:03.651+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I think the only thing that would cause me to change my mind is a prototype that demonstrated substantially better performance on a real-ish app; that is one that did not intentionally do way too much work.\n@Jsouliang @Nayuta I think their ",(0,s.kt)("inlineCode",{parentName:"p"},"keframe")," has demonstrated some real cases where it boosts performance. I will find an article. Wait for a minute"))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922313995812875",source:"discord",createTime:"2022-09-20T23:14:26.055+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"A document would be a good place to start then \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922367812943872",source:"discord",createTime:"2022-09-20T23:14:38.886+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/LianjiaTech/keframe"},"https://github.com/LianjiaTech/keframe"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922410418675783",source:"discord",createTime:"2022-09-20T23:14:49.044+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"The readme explains a bit")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922490622152774",source:"discord",createTime:"2022-09-20T23:15:08.166+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"They also use it in LianJia app IIRC, a somewhat large company")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922545705951322",source:"discord",createTime:"2022-09-20T23:15:21.299+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And in Bytedance, they said they have done sth similar to optimize")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922594917732433",source:"discord",createTime:"2022-09-20T23:15:33.032+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"so I guess these are evidence of optimization of speed in real world")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922677595840543",source:"discord",createTime:"2022-09-20T23:15:52.744+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1247545240"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1247545240")," Yes, we ","[people in bytedance]"," all farmilar with KeFrame and has already applied some optimize like it.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922765315526656",source:"discord",createTime:"2022-09-20T23:16:13.658+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Note that my solution is quite diff from keframe.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922858630385744",source:"discord",createTime:"2022-09-20T23:16:35.906+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If your solution is quite different, definitely write up a doc")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922877018226709",source:"discord",createTime:"2022-09-20T23:16:40.29+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"The only similarity is that, we both want to address the less-than-60fps jank")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922909763145809",source:"discord",createTime:"2022-09-20T23:16:48.097+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure! I will do that in an hour")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021922983322857553",source:"discord",createTime:"2022-09-20T23:17:05.635+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw there is a brief (1-page) proposal currently: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1252379787"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1252379787"))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021923104173334548",source:"discord",createTime:"2022-09-20T23:17:34.448+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I thought that was the dual isolates/multithreading idea?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021923234494566463",source:"discord",createTime:"2022-09-20T23:18:05.519+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Nonono")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021923275145744394",source:"discord",createTime:"2022-09-20T23:18:15.211+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I have removed dual isolates and multithreading or coroutine \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021923312353427526",source:"discord",createTime:"2022-09-20T23:18:24.082+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Now look at the biggest fig in that comment")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021923333434003567",source:"discord",createTime:"2022-09-20T23:18:29.108+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"it is nothing but NORMAL function calls")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021923506537107487",source:"discord",createTime:"2022-09-20T23:19:10.379+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw, ",(0,s.kt)("inlineCode",{parentName:"p"},"keframe")," has popularity of ",(0,s.kt)("inlineCode",{parentName:"p"},"93%")," with 100+ likes in pub ",(0,s.kt)("a",{parentName:"p",href:"https://pub.dev/packages/keframe"},"https://pub.dev/packages/keframe"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021923580948258856",source:"discord",createTime:"2022-09-20T23:19:28.12+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If nobody is facing build/layout jank, I guess it should not be a popular lib at all \ud83d\ude09")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021923680202268762",source:"discord",createTime:"2022-09-20T23:19:51.784+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"keframe has some hard-to-overcome shortcomings, but it is still already ",(0,s.kt)("em",{parentName:"p"},"this")," popoular")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021924577791717408",source:"discord",createTime:"2022-09-20T23:23:25.786+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"most popular packages don't get folded into the SDK")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021925175878484070",source:"discord",createTime:"2022-09-20T23:25:48.381+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy I would second @dnfield 's recommendation to write a doc. Most of us are going to have trouble following a github issue with dozens of comments, and we're not sure which parts of the proposal are still valid and which aren't")),(0,s.kt)(c,{author:"stuartmorgan",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021926433997733928",source:"discord",createTime:"2022-09-20T23:30:48.34+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"93% isn't actually as popular as it sounds; there are enough packages uploaded now that the percentage can be somewhat misleading. That puts it at something like 2000th.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021928405853294602",source:"discord",createTime:"2022-09-20T23:38:38.467+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'most popular packages don\'t get folded into the SDK\nSure, I know that \ud83d\ude42 I just want to say "there do exist real-world cases who needs to be extra smooth"'))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021928436517838969",source:"discord",createTime:"2022-09-20T23:38:45.778+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Most of us are going to have trouble following a github issue with dozens of comments, and we're not sure which parts of the proposal are still valid and which aren't"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021928474002346024",source:"discord",createTime:"2022-09-20T23:38:54.715+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see, just ate and now start writing")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021928515320430643",source:"discord",createTime:"2022-09-20T23:39:04.566+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"93% isn't actually as popular as it sounds; there are enough packages uploaded now that the percentage can be somewhat misleading. That puts it at something like 2000th."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021928545339048021",source:"discord",createTime:"2022-09-20T23:39:11.723+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Did not know that before \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021928729800347648",source:"discord",createTime:"2022-09-20T23:39:55.702+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But anyway, hopefully my comments above already show realworld cases: The bytedance and the lianjia. Especially bytedance (IIRC it is even on flutter.dev frontpage?).")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021934264704573471",source:"discord",createTime:"2022-09-21T00:01:55.326+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I understand that this technique has been successful for bytedance and others, I'm not disputing or disagreeing with this. But adding something to the SDK, especially if it is a large intrusive change, is going to be held to the standard of whether it will be successful for all or most users of Flutter today. To evaluate this, we'll need ",(0,s.kt)("em",{parentName:"p"},"at least")," a design doc, so we can understand the change you're trying to make. Ideally we would also have some sort of prototype, so that we can understand the behavioral changes, if any, required.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021935139879665724",source:"discord",createTime:"2022-09-21T00:05:23.984+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'"large intrusive change" - I am trying to make it small \ud83d\ude42\n"we\'ll need at least a design doc" - writing! ',(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit#"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit#"),' (surely not finished yet though)\n" Ideally we would also have some sort of prototype, so that we can understand the behavioral changes, if any, required." - I also want to do that')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021935177766797353",source:"discord",createTime:"2022-09-21T00:05:33.017+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Will ping here when finish writing")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021936142834225223",source:"discord",createTime:"2022-09-21T00:09:23.107+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thank you!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021938725619511336",source:"discord",createTime:"2022-09-21T00:19:38.891+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"You are welcome!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021949519459528755",source:"discord",createTime:"2022-09-21T01:02:32.343+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?usp=sharing"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?usp=sharing")," is ready")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021949801761357874",source:"discord",createTime:"2022-09-21T01:03:39.649+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Jonah Williams @dnfield (who said I should provide a doc)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-21T01:05:56Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Design proposal: ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?usp=sharing"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?usp=sharing"))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1SuE",source:"google_doc_comments",createTime:"2022-09-21T01:14:35.939Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If we can stop rendering at any point, how do we resolve the sizes of render objects that depend on their children?"),(0,s.kt)("p",null,"What about something like a layout builder? If we pre-empted layout then we may not actually be able to finish building?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1SuI",source:"google_doc_comments",createTime:"2022-09-21T01:16:01.875Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If we stop rendering based on time elapsed at an arbitrary RO, there is a risk we end up with a UI that makes no sense. i.e. we could get buttons with no labels or half filled in text. I'd be concerned that without a developer making an intentional choice of where to stop rendering, we'd be worse off than if we janked and took longer to render")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1SuQ",source:"google_doc_comments",createTime:"2022-09-21T01:17:55.051Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It might be worth contrasting this approach with keframe, or elaborating on what problems this solves that keframe cannot")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1SuY",source:"google_doc_comments",createTime:"2022-09-21T01:19:00.455Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"We do not resolve sizes. Indeed, we are using the ",(0,s.kt)("em",{parentName:"p"},"previous fully")," rendered UI (plus modifications in preemptModifyLayer).")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Suc",source:"google_doc_comments",createTime:"2022-09-21T01:19:56.363Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Well we are using the ",(0,s.kt)("em",{parentName:"p"},"previous fully")," rendered UI + modifications in preemptModifyLayer. We will never see half filled UI!")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Sug",source:"google_doc_comments",createTime:"2022-09-21T01:20:49.234Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"The flutter test framework generally allows developers to elapsed\xa0arbitrary amounts of time with fake async usage. This is intentional to ensure that unit tests can be reasonably deterministic."),(0,s.kt)("p",null,"It would be massively breaking for unit tests to take a different number of frames to reach the same conclusion, depending on the speed of the host hardware.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Suk",source:"google_doc_comments",createTime:"2022-09-21T01:21:19.125Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Indeed, imagine the whole proposal like this: We are still running the janky slow UI that is less than 60FPS. But, once in a while, we "secretly" flush old layer tree + some preemptModifyLayer modifications to the screen.')),(0,s.kt)(c,{author:"jonahwilliams",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Suo",source:"google_doc_comments",createTime:"2022-09-21T01:22:26.962Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It seems like that would only work if the previous UI was quite similar to the current UI, but that may not be the case."),(0,s.kt)("p",null,"How do you connect the current render object with the previous UI? The ROs are stateful objects, the only stable representation may be the old layer tree.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Sus",source:"google_doc_comments",createTime:"2022-09-21T01:23:19.756Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'We should fake the meaning of "time" in this proposal as well. For example, we may provide a variable called ',(0,s.kt)("inlineCode",{parentName:"p"},"preemptStrategy"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"abstract class PreemptStrategy {\nbool shouldWePreemptNow();\n}\xa0\n")),(0,s.kt)("p",null,'and call it in place of "checking whether 15 ms has passed".'),(0,s.kt)("p",null,"Then, when testing, we are in full control. For example, we can disable the whole preempt. We can decide to preempt at a specific RenderObject we like to test. etc")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Suw",source:"google_doc_comments",createTime:"2022-09-21T01:23:58.886Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure. I will do that in a minute.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Su4",source:"google_doc_comments",createTime:"2022-09-21T01:24:34.176Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Seems reasonable. FWIW, the amount of time available will vary per platform, and in the case of devices with dynamic refresh rates it may even vary frame to frame. I believe we should know the approximate target time for each frame when it starts though")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Su8",source:"google_doc_comments",createTime:"2022-09-21T01:26:55.990Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I am mainly thinking about janks in animations. The examples - progress indicator, scrolling listview, enter page transition, all are examples."),(0,s.kt)("p",null,'If your previous UI does not look similar to current, it is also OK. My proposal is just like, "originally\xa0the UI is janky, now we add some extra frames into its normal frames".'),(0,s.kt)("p",null,"Anyway they can always disable it by a simple flag in widgets."),(0,s.kt)("p",null,"When flushing ui during animation, we just provide (old + minor modified) layer tree. We do not touch RO indeed.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1SvA",source:"google_doc_comments",createTime:"2022-09-21T01:27:57.841Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Agree, and that should be fetchable from some kind of platform APIs. I am saying 15ms or 16.6ms just because it is simple to explain :)")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1SvQ",source:"google_doc_comments",createTime:"2022-09-21T01:31:57.627Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, understood! :)")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1SvU",source:"google_doc_comments",createTime:"2022-09-21T01:33:54.168Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"What I mean is - how do you detect that the previous UI is not like the current UI? Its OK if this isn't a performance improvement for that case, but I don't see how you would actually determine that it was \"Safe\" to use an old layer tree")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Svc",source:"google_doc_comments",createTime:"2022-09-21T01:36:30.982Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'It is always safe. Because we are just "inserting" extra frames into the plain old frames!'),(0,s.kt)("p",null,"For example, suppose it originally runs at 10 fps. Now, between frame 1 and frame 2, we insert frame 1a,1b,1c, ..., which is very alike frame 1 except for minor modifications (such as one OffsetLayer.offset)."),(0,s.kt)("p",null,"If the users find this UI weird in their special case, they can also choose to disable surely.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021960815567454258",source:"discord",createTime:"2022-09-21T01:47:25.545+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks @fzyzcjy , I left some comments in the doc which I see you've responded to. In general, my feedback is that I don't see how some parts of your proposal would actually work in practice. Re-using the previous frame and yielding during layout may break many fundamental assumptions we've made throughout the framework, and without a runnable example/prototype I don't think we're going to be able to understand the trade-offs you're making."),(0,s.kt)("p",null,"I'd also add that I don't think you need new engine APIS for this.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021961588355371110",source:"discord",createTime:"2022-09-21T01:50:29.792+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Jonah Williams Hi thanks for the suggestions!"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I don't think you need new engine APIS for this.\nI am worried about this. FlutterView.render says:\n/// If this function is called a second time during a single\n/// ","[PlatformDispatcher.onBeginFrame]","/","[PlatformDispatcher.onDrawFrame]","\n/// callback sequence or called outside the scope of those callbacks, the call\n/// will be ignored."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021961676532236388",source:"discord",createTime:"2022-09-21T01:50:50.815+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So in our case it will be ignored. We have to change the engine...")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021961831218159657",source:"discord",createTime:"2022-09-21T01:51:27.695+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"that is pretty fundamental")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021961855054389268",source:"discord",createTime:"2022-09-21T01:51:33.378+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"you can only submit a single frame in a vsync")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021961863724007464",source:"discord",createTime:"2022-09-21T01:51:35.445+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"without a runnable example/prototype I don't think we're going to be able to understand the trade-offs you're making.\nI will try to do so today"))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021961880987762761",source:"discord",createTime:"2022-09-21T01:51:39.561+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"otherwise you're just doing extra work")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021961946301464587",source:"discord",createTime:"2022-09-21T01:51:55.133+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"you'd have to submit a frame with you pre-empted frame, and then schedule a new frame to continue running")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021962009870344212",source:"discord",createTime:"2022-09-21T01:52:10.289+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think you'd want that approach anyway.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021962033492656180",source:"discord",createTime:"2022-09-21T01:52:15.921+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, only one in single vsync. But when the main code is very slow (say 10 frames to build/layout/paint/...), we want to respond to 2nd 3rd ... vsync")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021962093332803615",source:"discord",createTime:"2022-09-21T01:52:30.188+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So engine has to be modified IMHO")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021962350917591151",source:"discord",createTime:"2022-09-21T01:53:31.601+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I am not an expert in engine TBH (never did such big changes before!), but I will try my best to prototype it.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021962694091350057",source:"discord",createTime:"2022-09-21T01:54:53.42+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That is a very substantial change. What is the advantage to that approach over scheduling a new frame after the preemption?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021963163702415360",source:"discord",createTime:"2022-09-21T01:56:45.384+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sorry not quite get it. If we schedule a new frame, and vsync comes, what should we do? We cannot call Flutter's onDrawFrame definitely, because Flutter is still busy doing build/layout/... of the first frame.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021963804747255929",source:"discord",createTime:"2022-09-21T01:59:18.221+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So backing up a bit, you're not really pre-empting in the way I thought you were. My idea was something like:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Start drawing a frame"),(0,s.kt)("li",{parentName:"ul"},"Exceed threshold"),(0,s.kt)("li",{parentName:"ul"},"Submit frame"),(0,s.kt)("li",{parentName:"ul"},"Schedule new frame with some metadata that allows continuation."),(0,s.kt)("li",{parentName:"ul"},"Repeat")),(0,s.kt)("p",null,"Then your idea is more like:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Start drawing a frame"),(0,s.kt)("li",{parentName:"ul"},"Exceed threshold"),(0,s.kt)("li",{parentName:"ul"},"Submit frame"),(0,s.kt)("li",{parentName:"ul"},"Continue building"),(0,s.kt)("li",{parentName:"ul"},"Submit frame"),(0,s.kt)("li",{parentName:"ul"},"Finish building")),(0,s.kt)("p",null,"Is that correct?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021964564876775464",source:"discord",createTime:"2022-09-21T02:02:19.45+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021964603204304956",source:"discord",createTime:"2022-09-21T02:02:28.588+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That is why I have zero overhead for suspending the layout phase")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021965008751566888",source:"discord",createTime:"2022-09-21T02:04:05.278+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'"with some metadata that allows continuation" - that seems to be the approach that was discussed in Jan 2022 by @Hixie etc, and discussed again in May (?) 2022 by bytedance people, and discussed again by me in github. I am writing comparison about it in google doc now (WIP), under the title"Compared with modify-the-layout-function methods".')),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021965174703403038",source:"discord",createTime:"2022-09-21T02:04:44.844+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"one disadvantage of not yielding is that I don't think you'll receive input events. i.e. you start a page transition, start janking and then the user cancels. How do you avoid just continuing the animation?"),(0,s.kt)("p",null,"At least if you yield, you could receive input events and run event handlers")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021965288813625434",source:"discord",createTime:"2022-09-21T02:05:12.05+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Please have a look at ",(0,s.kt)("inlineCode",{parentName:"p"},"preemptHandleTouchEvents"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021965367934988378",source:"discord",createTime:"2022-09-21T02:05:30.914+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'The preempt-aware special widgets will do that. For example, see "scrolling ListView" example. The scrolling will be 60fps.')),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021965808668246039",source:"discord",createTime:"2022-09-21T02:07:15.993+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"You're going to end up rebuilding widgets recursively from within layout of a layer tree. I'm not really sure if that would work.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021965914293407786",source:"discord",createTime:"2022-09-21T02:07:41.176+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I guess have pre-emption you can yield from layout, handle events, and then go back?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021966043486363668",source:"discord",createTime:"2022-09-21T02:08:11.978+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But TBH that seems a lot more complicated than using the existing drawFrame APIs and scheduling new tasks.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021966338601783358",source:"discord",createTime:"2022-09-21T02:09:22.339+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and preemptHandleTouchEvents isn't sufficient, because you need to account for the existing gesture areas, otherwise event behavior may change between non pre-empted and pre-empted rendering")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021966535557922857",source:"discord",createTime:"2022-09-21T02:10:09.297+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"rebuilding widgets recursively from within layout of a layer tree\nWell no? I will just grab the layer tree and send to raster thread, without touching RenderObject, let alone element or widget"))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021966554470027304",source:"discord",createTime:"2022-09-21T02:10:13.806+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think if you broke it down so that each pre-emption behaved like a regular flutter frame though, it might work")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021966601504952320",source:"discord",createTime:"2022-09-21T02:10:25.02+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but then you might as well just schedule a frame")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021966650016284713",source:"discord",createTime:"2022-09-21T02:10:36.586+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but event handlers can setState")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021966860775850054",source:"discord",createTime:"2022-09-21T02:11:26.835+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'and preemptHandleTouchEvents isn\'t sufficient, because you need to account for the existing gesture areas, otherwise event behavior may change between non pre-empted and pre-empted rendering\nIt is just for simple things like "shifting a listview". For normal gestures, let it be done in normal frame pipeline. In other words, suppose it takes 1s to run a full pipeline, then the ListView will see all touch events during this 1s.'))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021966932267782295",source:"discord",createTime:"2022-09-21T02:11:43.88+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"No, you can't create a distinct pre-empty only set of gestures")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021966959698513950",source:"discord",createTime:"2022-09-21T02:11:50.42+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'The preemptHandleTouchEvents will see events in each of 60fps frame, but that is like "secretly peeking at it"')),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967005055733872",source:"discord",createTime:"2022-09-21T02:12:01.234+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"you'll get different behavior between pre epmted and non pre-empted rendering")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967036492034108",source:"discord",createTime:"2022-09-21T02:12:08.729+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"you have to go through the full event dispatch for correctness")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967109279981578",source:"discord",createTime:"2022-09-21T02:12:26.083+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"each pre-emption behaved like a regular flutter frame though, it might work\nI am worried about that, b/c we will be build/layout a whole tree, inside the middle of build/layout a whole tree"))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967141920067674",source:"discord",createTime:"2022-09-21T02:12:33.865+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"consider the case where a ListView is behind something like a pointer interceptor")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967256730730516",source:"discord",createTime:"2022-09-21T02:13:01.238+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"you don't want the listview to get scroll events in pre-empted frames because the pointer interceptor isn't aware of the pre-empt behavior")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967276943085710",source:"discord",createTime:"2022-09-21T02:13:06.057+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"consider the case where a ListView is behind something like a pointer interceptor\nThat's why preemptHandleTouchEvents is for ",(0,s.kt)("em",{parentName:"p"},"animations"),", not general-purpose"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967475107188847",source:"discord",createTime:"2022-09-21T02:13:53.303+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Users may set a preempt handler in this case, specifying it not to scroll")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967612315451492",source:"discord",createTime:"2022-09-21T02:14:26.016+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It is like how React Fiber does things")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967656401768518",source:"discord",createTime:"2022-09-21T02:14:36.527+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"With fiber, JS animation still jank. Only css animation is smooth")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967730087297086",source:"discord",createTime:"2022-09-21T02:14:54.095+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"React does not have a layout or paint phase, and ultimately works much different from flutter")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967759833309184",source:"discord",createTime:"2022-09-21T02:15:01.187+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'preemptHandleTouchEvents and its brothers are like "css animation" - another thing, parallel to traditional flutter widgets etc')),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967844306595890",source:"discord",createTime:"2022-09-21T02:15:21.327+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i.e. React essentially yields during the equivalent of build")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967848710606921",source:"discord",createTime:"2022-09-21T02:15:22.377+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure, I am just analogy \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021967986602553374",source:"discord",createTime:"2022-09-21T02:15:55.253+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I am analogy about the framework users' feeling: They have to write down something different (CSS instead of JS) for smooth animation.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021968036602847282",source:"discord",createTime:"2022-09-21T02:16:07.174+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Introducing a different set of event handlers, that may only fire sometimes during scrolling, is not a reasonable change IMO")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021968063421231186",source:"discord",createTime:"2022-09-21T02:16:13.568+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"it will be too hard for users to predict the behavior")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021968071356858419",source:"discord",createTime:"2022-09-21T02:16:15.46+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Anyway for standard cases, such as ListView scrolling, or any animation that requires one DisplayListLayer, we can embed into framework")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021968561440292864",source:"discord",createTime:"2022-09-21T02:18:12.305+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hmm")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021968602678702151",source:"discord",createTime:"2022-09-21T02:18:22.137+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So what solution do you think?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021968714339467294",source:"discord",createTime:"2022-09-21T02:18:48.759+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"adjust your design \ud83d\ude42")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021968757003931679",source:"discord",createTime:"2022-09-21T02:18:58.931+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"you are essentially proposing a new, Flutter-like framework")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021968788729639014",source:"discord",createTime:"2022-09-21T02:19:06.495+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"which, maybe that is the right thing for your use-case")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021968856408928257",source:"discord",createTime:"2022-09-21T02:19:22.631+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"We cannot run hitTest for not-yet-layout widgets I guess")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021968883231494205",source:"discord",createTime:"2022-09-21T02:19:29.026+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"What?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969027783983235",source:"discord",createTime:"2022-09-21T02:20:03.49+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Well I am considering the general use case: Loading indicator, scrolling ListView, enter page transition. Isn't that many people needs \ud83d\ude42")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969047916658758",source:"discord",createTime:"2022-09-21T02:20:08.29+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"event handling is pretty core to how the framework behaves. not that we can't adjust the behavior, but what you are describing sounds like a huge departure.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969206163546142",source:"discord",createTime:"2022-09-21T02:20:46.019+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and, if you are seriously dropping frames on the UI side of things with those examples, you will also drop raster frames")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969225746751528",source:"discord",createTime:"2022-09-21T02:20:50.688+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Indeed for my own case, I have heavy rasterize. But I do not propose PRs about this, since I guess few people have my own case")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969267509444651",source:"discord",createTime:"2022-09-21T02:21:00.645+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"so that may not help reduce the perception of jank")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969418911227934",source:"discord",createTime:"2022-09-21T02:21:36.742+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sorry I do not quite get it. I send layer tree to rasterizer at 60fps, so no jank?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969445087879209",source:"discord",createTime:"2022-09-21T02:21:42.983+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969480093552742",source:"discord",createTime:"2022-09-21T02:21:51.329+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"no, because each layer tree also has to be rasterized and then submitted")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969517427052624",source:"discord",createTime:"2022-09-21T02:22:00.23+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and that requires work on the engine side and then the GPU")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969530571997234",source:"discord",createTime:"2022-09-21T02:22:03.364+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"which can also jank")),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969550171975740",source:"discord",createTime:"2022-09-21T02:22:08.037+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think the React generator the VirtualDom Tree and Diff VDomTree will cost too long time, so in React18 it use a Fiber to interrupt the process if a  recursion level is too deep")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969559491711107",source:"discord",createTime:"2022-09-21T02:22:10.259+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"You mean rastierzed at ui thread or raster thread?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969601468317757",source:"discord",createTime:"2022-09-21T02:22:20.267+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"raster thread")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969675539730452",source:"discord",createTime:"2022-09-21T02:22:37.927+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'"raster thread runs too slow that it causes visual jank" is not addressed in this proposal indeed.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969700973977690",source:"discord",createTime:"2022-09-21T02:22:43.991+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That may be a separate proposal")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969874370707538",source:"discord",createTime:"2022-09-21T02:23:25.332+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes I am not analogy to that specific algorithm, just analogy about dev experience.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021969920545792120",source:"discord",createTime:"2022-09-21T02:23:36.341+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Which I think is essentially yielding during build, for the Flutter analogy. But Flutter runs layout/paint in the same thread, whereas browsers already have separate threads")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970032911200296",source:"discord",createTime:"2022-09-21T02:24:03.131+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, so my design is not an analogy to fiber when it comes to implementation")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970040238657576",source:"discord",createTime:"2022-09-21T02:24:04.878+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"html is also much more tolerant of half finished UIs....")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970106282147840",source:"discord",createTime:"2022-09-21T02:24:20.624+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Indeed this design very different from fiber \ud83d\ude42")),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970149466710026",source:"discord",createTime:"2022-09-21T02:24:30.92+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But the widget build or layout is run on the UI Thread, if build or layout is cost too long time, it will jank")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970213429854279",source:"discord",createTime:"2022-09-21T02:24:46.17+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, and this proposal tries to address the problem")),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970230689398935",source:"discord",createTime:"2022-09-21T02:24:50.285+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"that same like the vdom diff or build in the js thread")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970288327536680",source:"discord",createTime:"2022-09-21T02:25:04.027+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So, currently our problem is, how to handle input events?")),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970288671457380",source:"discord",createTime:"2022-09-21T02:25:04.109+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i think they are the same issue")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970361677520917",source:"discord",createTime:"2022-09-21T02:25:21.515+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think you should handle input events by using the regular event handling pipeline")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970389578027100",source:"discord",createTime:"2022-09-21T02:25:28.167+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes that is our goal")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970484746784798",source:"discord",createTime:"2022-09-21T02:25:50.857+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"which requires you to implement this by scheduling new frames instead of allowing multiple submissions from a single frame")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021970663508021318",source:"discord",createTime:"2022-09-21T02:26:33.477+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I am thinking about it - is it possible to do this inside preempt...")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021971446169346098",source:"discord",createTime:"2022-09-21T02:29:40.078+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Is it possible to do like this:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021971585202126888",source:"discord",createTime:"2022-09-21T02:30:13.226+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Do not propagate to ROs that are dirty. Only propagate to those who are clean.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021971597529202750",source:"discord",createTime:"2022-09-21T02:30:16.165+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i.e. call hitTests etc")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021971631859572756",source:"discord",createTime:"2022-09-21T02:30:24.35+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"All done inside the preemptRender.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021971810293645332",source:"discord",createTime:"2022-09-21T02:31:06.892+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Jonah Williams Will we have trouble?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021971892904669286",source:"discord",createTime:"2022-09-21T02:31:26.588+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"TBH I think you'll have a tremendous amount of trouble")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021971938295418932",source:"discord",createTime:"2022-09-21T02:31:37.41+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"good luck!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021971960537825280",source:"discord",createTime:"2022-09-21T02:31:42.713+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Ah??")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972064816603157",source:"discord",createTime:"2022-09-21T02:32:07.575+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For design of event handler, or for the whole proposal?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972086887022633",source:"discord",createTime:"2022-09-21T02:32:12.837+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"whole thing")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972107850170449",source:"discord",createTime:"2022-09-21T02:32:17.835+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Ah")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972304286191717",source:"discord",createTime:"2022-09-21T02:33:04.669+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I would really be interested in a using a prototype")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972329389109319",source:"discord",createTime:"2022-09-21T02:33:10.654+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes I will do that")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972357507723284",source:"discord",createTime:"2022-09-21T02:33:17.358+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"do you think it is worthwhile to prototype it")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972369704755201",source:"discord",createTime:"2022-09-21T02:33:20.266+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but I am worried this would break in many unexpected ways")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972448373125130",source:"discord",createTime:"2022-09-21T02:33:39.022+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"if it is a meaningless proposal, I will just halt ",(0,s.kt)("em",{parentName:"p"},"now"))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972701331599412",source:"discord",createTime:"2022-09-21T02:34:39.332+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It depends on what your goal is. If you want to keep exploring this, I don't see any way forward besides building a prototype. I may yet be wrong, or we may learn something from the proposal even if it doesn't get accepted."),(0,s.kt)("p",null,"But building a prototype doesn't mean that we're committed to accepting it in the framework or engine")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972830306455612",source:"discord",createTime:"2022-09-21T02:35:10.082+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"or you may find ways to adjust the proposal to implement it with few or no changes to the framework")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972845724704789",source:"discord",createTime:"2022-09-21T02:35:13.758+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"But building a prototype doesn't mean that we're committed to accepting it in the framework or engine"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021972862703259698",source:"discord",createTime:"2022-09-21T02:35:17.806+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure I know that")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021974345083527208",source:"discord",createTime:"2022-09-21T02:41:11.233+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@Jonah Williams About the event handler problem: In React Fiber example, a programmer has to think about two systems as well - the JS animation system and CSS animation system. They have to think about "the JS animation is jank while CSS animation runs smoothly" and collaborate with that. So in our Flutter even handler problem, maybe it is OK for dev to think about "the ListView  event handler is janky, while the preempt scrolling is smooth"?')),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021974496510492763",source:"discord",createTime:"2022-09-21T02:41:47.336+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"No")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021974538092818453",source:"discord",createTime:"2022-09-21T02:41:57.25+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I mean, maybe")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021974552626081863",source:"discord",createTime:"2022-09-21T02:42:00.715+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but my guess is no")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021974578051956797",source:"discord",createTime:"2022-09-21T02:42:06.777+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hmm")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021974617700696104",source:"discord",createTime:"2022-09-21T02:42:16.23+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It is opt-in. If someone hates it just set flag to false.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021974626617786468",source:"discord",createTime:"2022-09-21T02:42:18.356+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"HTML+CSS+JS Is not exactly a high water mark of ease of use")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021974675049418842",source:"discord",createTime:"2022-09-21T02:42:29.903+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and its not a goal to be as complicated as it can be")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021974850060955729",source:"discord",createTime:"2022-09-21T02:43:11.629+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"because the problem isn't just that \"the ListView  event handler is janky, while the preempt scrolling is smooth\"?, its that the ListView only scrolls when pre-empted because I'm actually expecting the events to be sent to a different event handler")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021974855014436977",source:"discord",createTime:"2022-09-21T02:43:12.81+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I know its limitation and love Flutter (as you can see - I write Flutter code now instead of web code)")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021975024002945044",source:"discord",createTime:"2022-09-21T02:43:53.1+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"or consider the case where the listview is literally covered")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021975056567509033",source:"discord",createTime:"2022-09-21T02:44:00.864+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'"the ListView only scrolls when pre-empted because I\'m actually expecting the events to be sent to a different event handler"\nWhen ',(0,s.kt)("inlineCode",{parentName:"p"},"preempt: true")," they are expecting it to happen maybe?"))),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021975098959351808",source:"discord",createTime:"2022-09-21T02:44:10.971+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"so it wouldn't get events normally because the dispatchEvent code handles that")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021975153095221358",source:"discord",createTime:"2022-09-21T02:44:23.878+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I will think about thta")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021975156383555604",source:"discord",createTime:"2022-09-21T02:44:24.662+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but now suddenly its receiving scroll events?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021975471514210314",source:"discord",createTime:"2022-09-21T02:45:39.795+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"With my apologies to @Hixie  \ud83d\ude06")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021976107408429158",source:"discord",createTime:"2022-09-21T02:48:11.404+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I agree that should never happen")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021976421796696194",source:"discord",createTime:"2022-09-21T02:49:26.36+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Is it possible we let developers manually handle it? Flutter is like a automatic car, but when really needed (for performance), give dev a manual control button?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021976509239545856",source:"discord",createTime:"2022-09-21T02:49:47.208+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"everything is opt in, not opt out")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021976608317378580",source:"discord",createTime:"2022-09-21T02:50:10.83+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If I'm trying to provide a generic ListView like widget, how can I tell within a frame if I am obscured or not?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021976744095395900",source:"discord",createTime:"2022-09-21T02:50:43.202+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(generally you don't need to handle this, because the hitTest system does for you)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021976856678912050",source:"discord",createTime:"2022-09-21T02:51:10.044+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Let the dev do the job. For example, suppose we are developing this Discord mobile app. Then I will specify "it is always visible" if I am the dev.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021976969040117910",source:"discord",createTime:"2022-09-21T02:51:36.833+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'If we are developing docs.google.com I will also specify "always visible"')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021977090951761963",source:"discord",createTime:"2022-09-21T02:52:05.899+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Of course, except that it is not the latest route entry - but that case is simple to be built-in")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021977148069789696",source:"discord",createTime:"2022-09-21T02:52:19.517+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"that means that nothing in the framework will be able to use this")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021977225823780914",source:"discord",createTime:"2022-09-21T02:52:38.055+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That maybe means framework needs to accept a parameter")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021977241929916426",source:"discord",createTime:"2022-09-21T02:52:41.895+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"by users")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021977281935183913",source:"discord",createTime:"2022-09-21T02:52:51.433+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"eg. ",(0,s.kt)("inlineCode",{parentName:"p"},"ListView(prempt: PreemptStrategy?)"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021977358347030568",source:"discord",createTime:"2022-09-21T02:53:09.651+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"where ",(0,s.kt)("inlineCode",{parentName:"p"},"abstract class PreemptStrategy { bool shouldWeAcceptThatHitTest(); }"),". And provide null to disable preempt.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021977465264025670",source:"discord",createTime:"2022-09-21T02:53:35.142+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I know it is not an automatic car in such cases \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021977622487519262",source:"discord",createTime:"2022-09-21T02:54:12.627+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And, for the enter page transition, and the loading indicator, we even do not need gestures handling")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021977662278881332",source:"discord",createTime:"2022-09-21T02:54:22.114+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"you do, because they can be cancelled")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021977799873007626",source:"discord",createTime:"2022-09-21T02:54:54.919+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I mean, no extra gesture handling at 60fps. Just normal handling at low fps")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978041062277124",source:"discord",createTime:"2022-09-21T02:55:52.423+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I don't really think it would be OK. You've got a performance improvement that is off by default, and using requires knowing exactly how your layout will look at all times. And nothing in the framework can use it....")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978047118844004",source:"discord",createTime:"2022-09-21T02:55:53.867+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For example, I tap a button and enter a page. Maybe we do not care that the system cannot respond to my touch ",(0,s.kt)("em",{parentName:"p"},"when")," the new page is transitioning in (indeed, what gesture will we have there?)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978228262453258",source:"discord",createTime:"2022-09-21T02:56:37.055+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But, when new page is transitioning in, if that transition is, say, 15fps, humans eyes can see it and feel it not good")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978434815131648",source:"discord",createTime:"2022-09-21T02:57:26.301+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"have you looked at how we made the Android ZoomPageTransition faster  (on master currently)? FWIW It was almost entirely raster thread issues")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978490729398272",source:"discord",createTime:"2022-09-21T02:57:39.632+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes I followed that github issue")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978552620552234",source:"discord",createTime:"2022-09-21T02:57:54.388+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"ahh right, I remember you were in the Github review")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978576620363827",source:"discord",createTime:"2022-09-21T02:58:00.11+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"haha")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978657645928448",source:"discord",createTime:"2022-09-21T02:58:19.428+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But when the new page has a ton of widgets, we will face build/layout jank I guess?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978765582143498",source:"discord",createTime:"2022-09-21T02:58:45.162+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"raster slowness is like a separate issue that my current design doc does not address")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978786054549535",source:"discord",createTime:"2022-09-21T02:58:50.043+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"even on the low end android devices I tested, all of the jank was raster jank")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978861120004177",source:"discord",createTime:"2022-09-21T02:59:07.94+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"that or GCs, which you will hit even with your system")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021978997028036638",source:"discord",createTime:"2022-09-21T02:59:40.343+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hmm so you are saying we do not need to optimize build/layout jank?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021979112652410991",source:"discord",createTime:"2022-09-21T03:00:07.91+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Jsouliang do you see build/layout jank in your bytedance app? Or are all of them raster jank?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021979146009727107",source:"discord",createTime:"2022-09-21T03:00:15.863+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Personally speaking my app has build/layout jank as well")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021979260644229140",source:"discord",createTime:"2022-09-21T03:00:43.194+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But given it is not open sourced and I cannot say I am the expert in optimization this may not be a big evidence")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021979417234374707",source:"discord",createTime:"2022-09-21T03:01:20.528+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"text layout can be quite slow")),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021979601142034535",source:"discord",createTime:"2022-09-21T03:02:04.375+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Raster jank we call look forward to impeller to solve it, case most raster thread jank are caused by share compile")),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021979726463651880",source:"discord",createTime:"2022-09-21T03:02:34.254+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, some UI jank are cased the measure text content")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021979750476021850",source:"discord",createTime:"2022-09-21T03:02:39.979+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I wish that were true, some Skia functionality is actually quite slow the way we use it. Clips for example, not slow due to shader compile. Same with ImageFilters")),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021979764883456060",source:"discord",createTime:"2022-09-21T03:02:43.414+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"that will block the UI Layout")),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021979927911858209",source:"discord",createTime:"2022-09-21T03:03:22.283+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"do you have some idea to optimize the text measure?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021980209798455427",source:"discord",createTime:"2022-09-21T03:04:29.49+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"We've not had any success")),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021980251171061790",source:"discord",createTime:"2022-09-21T03:04:39.354+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1021980250357371010/2022-09-21_11.04.19.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1021980250818756618/2022-09-21_11.04.10.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021980287787352125",source:"discord",createTime:"2022-09-21T03:04:48.084+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Then maybe my proposal is a bit useful I guess?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021980441080758273",source:"discord",createTime:"2022-09-21T03:05:24.632+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If your prototype works and doesn't require Flutter 4.0, then maybe")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021980497649336390",source:"discord",createTime:"2022-09-21T03:05:38.119+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Haha surely not 4.0 - all user visible API are opt in (and btw Flutter 3.0 has no breaking change)")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021980721356754975",source:"discord",createTime:"2022-09-21T03:06:31.455+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"the problem with opt in, is that most folks won't. Similarly, I don't think creating a parallel event handling system is reasonable. I think you will have better luck trying to break apart expensive scenes into multiple frames. But ultimately its your time + resources, so spend them how you see fit")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021980884871680000",source:"discord",createTime:"2022-09-21T03:07:10.44+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"break apart expensive scenes into multiple frames\nI guess that is how hixie, dnfield, bytedance people, and I have tried. No success yet \ud83d\ude26"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021980939838042183",source:"discord",createTime:"2022-09-21T03:07:23.545+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Anyway I will also try on that")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021982672098168923",source:"discord",createTime:"2022-09-21T03:14:16.548+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Jonah Williams Another workaround: What if we throw away support for gesture system in preemptRender?\nWhen scrolling a ListView, it is mainly the inertia the drives the list to move, and seems that human finger speed will not dramatically change during a swipe. Then, if we never support gesture in preemptRender, the following will happen: (1) ListView is scrolled at 60fps, instead of (e.g.) 15fps, so user eyes will not see jank. (2) ListView is responding to user finger at only 15fps, but since this is not a game but just a scrolling, users may not feel it")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021982752372957266",source:"discord",createTime:"2022-09-21T03:14:35.687+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Now we can by default enable the feature, and no parallel event handling system")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021982864344109116",source:"discord",createTime:"2022-09-21T03:15:02.383+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw for the loading indicator and the enter page transition example, already no need for event handling by default")),(0,s.kt)(c,{author:"Callum",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021983030597926952",source:"discord",createTime:"2022-09-21T03:15:42.021+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I looked at the document, an interesting idea for sure with the synchronous/parallel tree. But I also think it won't be feasible to implement the preemptModifyLayerTree() unless the animation is very simple. The more applicable it is, the more you are just reimplementing the framework.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021983708842037328",source:"discord",createTime:"2022-09-21T03:18:23.727+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"But I also think it won't be feasible to implement the preemptModifyLayerTree() unless the animation is very simple. The more applicable it is, the more you are just reimplementing the framework.\nIt already supports the following with simple code, see doc for details:"),(0,s.kt)("ul",{parentName:"blockquote"},(0,s.kt)("li",{parentName:"ul"},"any widgets fit within DisplayListLayer, such as CircularProgressIndicator. Arbitrarily fancy animation goes here, as long as in one DisplayListLayer. Or more generally, if they fit in a leaf subtree."),(0,s.kt)("li",{parentName:"ul"},"let ListView scroll at 60fps")))),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021983909887615007",source:"discord",createTime:"2022-09-21T03:19:11.66+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Jonah Williams what's the 'ghost text' ?\n",(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1021983909887627284/20220921-111837.jpeg",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021985366049312788",source:"discord",createTime:"2022-09-21T03:24:58.836+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Callum We may integrate with the existing framework and allow a lot of widgets to animate (just a very rough proposal): Indeed what is done in preemptModifyLayerTree is just to modify arbitrary layers, so maybe we can reuse existing framework to arbitrarily render a subtree etc. Not come up with details yet though.\nBut anyway, I guess most people just need a smooth loading indicator, a smooth scrolling listview?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021985826193813525",source:"discord",createTime:"2022-09-21T03:26:48.543+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Jonah Williams So is this proposal looks ok? (repeat here in case the original comment is already so above that it is not read)")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021986923293724733",source:"discord",createTime:"2022-09-21T03:31:10.112+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Rendering placeholder text, like a bunch of grey blocks in place of your actual text on first frames or when doing larger transitions")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021987187870421053",source:"discord",createTime:"2022-09-21T03:32:13.192+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If the behavior of the framework is changing substantially in pre-empty frames then I think most developers would interpret that as a bug")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021987751710699632",source:"discord",createTime:"2022-09-21T03:34:27.622+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But I wonder how should we know how many blocks? You know each english letter has different width, and paragraphing is quite hard to guess. If we put wrong number of grey blocks, the UI will be of wrong height. Then, after it gets the real height, all widgets below it (suppose we have a ListView) will jump")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021987957021868062",source:"discord",createTime:"2022-09-21T03:35:16.572+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@Jonah Williams Well, what about this: It is still the plain old Flutter with (e.g.) 15fps. But we just have some "magic" here, such that it automatically generates something as a "tween" to have 60fps.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021988294550110259",source:"discord",createTime:"2022-09-21T03:36:37.045+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'IIRC, some researches or nvidia has some "magic" such that, they input some low resolution low fps frames, and output high resolution high fps frames\nConsider this proposal as such kind of "tween creator", then maybe dev will feel it natural')),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1021993719337058354",source:"discord",createTime:"2022-09-21T03:58:10.415+00:00",mdxType:"DiscussionComment"}),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1021993719337058359",source:"discord",createTime:"2022-09-21T03:58:10.415+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Started a thread.")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1021993721140621353",source:"discord",createTime:"2022-09-21T03:58:10.845+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This is a good part of what makes it hard. The difficult case right now isn't the progress indicator, it's when you have a large scene change (like a route transition or some other full screen animation).")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1021993881371418714",source:"discord",createTime:"2022-09-21T03:58:49.047+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And lets say you want to render a lot of small pieces of text, which now all have to get laid out for the first time and will send you over budget for a single frame.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1021994148284334130",source:"discord",createTime:"2022-09-21T03:59:52.684+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see, I guess my proposal can solve the problem?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1021994222368329809",source:"discord",createTime:"2022-09-21T04:00:10.347+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Btw what do you think about the proposal \ud83d\ude42")),(0,s.kt)(c,{author:"dnfield",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Swc",source:"google_doc_comments",createTime:"2022-09-21T04:03:57.720Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Layout for a single widget can easily blow through frame budget. That's part of what we'd like to solve with an interruptible approach, assuming such an approach is possible.")),(0,s.kt)(c,{author:"dnfield",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Swg",source:"google_doc_comments",createTime:"2022-09-21T04:04:10.196Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This will cause problems with scrolling/touch events.")),(0,s.kt)(c,{author:"dnfield",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Swk",source:"google_doc_comments",createTime:"2022-09-21T04:05:06.582Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"These are not particularly pressing examples right now - showing a single progress indicator or simple animation tends not to be the issue, it's more like doing a full screen route transition where you're building a a large new tree or subtree with a few hundred widgets to inflate and layout.")),(0,s.kt)(c,{author:"dnfield",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Sws",source:"google_doc_comments",createTime:"2022-09-21T04:05:58.504Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This needs a lot more details about how you would sensibly interrupt and restart layout at a meaningful point.")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1021995751154389032",source:"discord",createTime:"2022-09-21T04:06:14.838+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think it's interesting but it's missing a lot of important details")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1021997189628706838",source:"discord",createTime:"2022-09-21T04:11:57.797+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I am willing to fill in details")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1021997228736389150",source:"discord",createTime:"2022-09-21T04:12:07.121+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and will prototype as well")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1021997250488053840",source:"discord",createTime:"2022-09-21T04:12:12.307+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"so what is missing?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Sww",source:"google_doc_comments",createTime:"2022-09-21T04:13:53.415Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hmm do you mean one single ",(0,s.kt)("em",{parentName:"p"},"leaf")," widget?\xa0"),(0,s.kt)("p",null,"Indeed that is also very simple: I am proposing adding ",(0,s.kt)("inlineCode",{parentName:"p"},"if (timeout) preemptRender()")," at the beginning of each RenderObject.layout."),(0,s.kt)("p",null,"Now, we can add more. Say, for YourHeavyRenderObject.performLayout() function, add 10 of such ",(0,s.kt)("inlineCode",{parentName:"p"},"if timeout preemptRender"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Sw0",source:"google_doc_comments",createTime:"2022-09-21T04:14:24.576Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'That\'s "that" approach which I am comparing\xa0to. My proposal does not have this :)')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Sw4",source:"google_doc_comments",createTime:"2022-09-21T04:16:01.715Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\xa0showing a single progress indicator or simple animation tends not to be the issue")),(0,s.kt)("p",null,'Well the example is indeed, "have progress indicator 60fps, ',(0,s.kt)("em",{parentName:"p"},"while"),' we are doing something really heavy". i.e. just the interesting case you said :)'),(0,s.kt)("p",null,"Content edited")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgdW1Sw8",source:"google_doc_comments",createTime:"2022-09-21T04:18:05.939Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"The proposal do not interrupt, neither restart. It just calls a function (the preemptRender)."),(0,s.kt)("p",null,"Not sure but maybe you have the same understanding as @JonahWilliams? This comment may be helpful:\xa0",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608021234516754444/1021963804747255929"},"https://discord.com/channels/608014603317936148/608021234516754444/1021963804747255929"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1021998838363463690",source:"discord",createTime:"2022-09-21T04:18:30.886+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I have replied to google doc (not see that just now)")),(0,s.kt)(c,{author:"Nayuta403",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgfacSXE",source:"google_doc_comments",createTime:"2022-09-21T12:15:28.332Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"How is this Layertree generated (since the current RO is not painted), it still looks like the LayerTree from the previous frame?")),(0,s.kt)(c,{author:"Nayuta403",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgfacSXI",source:"google_doc_comments",createTime:"2022-09-21T12:20:48.095Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If I understand correctly, you want to use the full LayerTree result from the last time. Like this object in the Raster thread?"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/blob/4839a3b5d225f7d522bf9edf5cfe395c187b0e93/shell/common/rasterizer.cc#L381"},"https://github.com/flutter/engine/blob/4839a3b5d225f7d522bf9edf5cfe395c187b0e93/shell/common/rasterizer.cc#L381"))),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022130584279068772",source:"discord",createTime:"2022-09-21T13:02:01.56+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"In the current Framework design, once entering the RenderFlexObject, all child nodes will be Layout, and when the RO tree Layout is completed, paint will be submitted. Now we add a timer to the RenderFlexObject layout, the first child node layout is almost finished (16ms), at which point we interrupt the layout and submit the current RO tree for Paint. At this point, RenderFlexObject contains a child node. When the next schedule comes, do I continue to start from this RenderFlexObject node or something else?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022131117471580190",source:"discord",createTime:"2022-09-21T13:04:08.683+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So I guess you mean your example has an app which has Flex as its root widget, and thus RenderFlex as its root RenderObject?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022131391699353620",source:"discord",createTime:"2022-09-21T13:05:14.064+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'When the next schedule comes, do I continue to start from this RenderFlexObject node or something else?\nWe do not continue to "start from" anywhere. We just ',(0,s.kt)("em",{parentName:"p"},"call")," the preemptRender function inside ",(0,s.kt)("inlineCode",{parentName:"p"},"RenderObject.layout()"),". And then, when preemptRender function returns, we continue running our code."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022131453099786250",source:"discord",createTime:"2022-09-21T13:05:28.703+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"preemptRender is nothing but a very normal function")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgfusIVM",source:"google_doc_comments",createTime:"2022-09-21T13:06:00.227Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, from previous frame, but modified a bit from preemptModifyLayerTree.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgfusIVQ",source:"google_doc_comments",createTime:"2022-09-21T13:06:28.964Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Almost the same full layer tree, except for preemptModifylayerTree")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022131706469306388",source:"discord",createTime:"2022-09-21T13:06:29.111+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I want to know more details of preemptModifyLayerTree CircularProgressIndicator such as you mentioned. What will do in preemptModifyLayerTree?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022131786446282772",source:"discord",createTime:"2022-09-21T13:06:48.179+00:00",mdxType:"DiscussionComment"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"void preemptModifyLayerTree() {\n  for (final renderObject in renderObjectsWhoWantsToPreemptModifyTheLayerTree) renderObject.preemptModifyLayerTree();\n}\n"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022131839164485632",source:"discord",createTime:"2022-09-21T13:07:00.748+00:00",mdxType:"DiscussionComment"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"class RenderPreemptDisplayList extends RenderBox {\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    layer = paint_child_subtree_inside_a_DisplayListLayer();\n  }\n\n  @override\n  void preemptModifyLayerTree() {\n    layer = paint_child_subtree_inside_a_DisplayListLayer();\n  }\n}\n\n"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022131888640499782",source:"discord",createTime:"2022-09-21T13:07:12.544+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So, it calls RenderPreemptDisplayList.preemptModifyLayerTree")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022131947541102632",source:"discord",createTime:"2022-09-21T13:07:26.587+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Then, RenderPreemptDisplayList.preemptModifyLayerTree paints its child.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022132013194547200",source:"discord",createTime:"2022-09-21T13:07:42.24+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For simplicity, let's say, we do not want a CircularProgressIndicator, but only want a color rect")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022132021784498186",source:"discord",createTime:"2022-09-21T13:07:44.288+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Then it is like:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022132176910831656",source:"discord",createTime:"2022-09-21T13:08:21.273+00:00",mdxType:"DiscussionComment"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"class RenderWhatever extends RenderBox {\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    layer = create_DisplayListLayer_and_paint_a_colored_rect(color: red);\n  }\n\n  @override\n  void preemptModifyLayerTree() {\n    layer = create_DisplayListLayer_and_paint_a_colored_rect(color: whatever_color_you_like_in_animation);\n  }\n}\n"))),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022132562606440488",source:"discord",createTime:"2022-09-21T13:09:53.23+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"What would you do in the ",(0,s.kt)("inlineCode",{parentName:"p"},"paint_child_subtree_inside_a_DisplayListLayer")," method at this point in the interrupt, maybe the child node hasn't been built/laid out yet?")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022132763761053716",source:"discord",createTime:"2022-09-21T13:10:41.189+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"    layer = create_DisplayListLayer_and_paint_a_colored_rect(color: red);"),"\nlike placeholder \uff1f")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022132843473809458",source:"discord",createTime:"2022-09-21T13:11:00.194+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For circular progress indicator, just paint a indicator you need")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022132900289851432",source:"discord",createTime:"2022-09-21T13:11:13.74+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"for scrolling listview, it is a longer story, maybe see doc")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-21T13:15:53Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For readers of GitHub and not yet read Discord: Some discussions happen in Discord as well, see - ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608021234516754444/1021783497112821861"},"https://discord.com/channels/608014603317936148/608021234516754444/1021783497112821861")),(0,s.kt)("p",null,"As well as the sub-discussion in discord: ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/1021987751710699632"},"https://discord.com/channels/608014603317936148/1021987751710699632"))),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022136927232720916",source:"discord",createTime:"2022-09-21T13:27:13.838+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy  The build/layout phase is a recursive call, how do you break it?On keframe, we're actually doing recursion on the current frame, just using placeholders")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022137348475068487",source:"discord",createTime:"2022-09-21T13:28:54.27+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just do not break it \ud83d\ude42 We are ",(0,s.kt)("em",{parentName:"p"},"calling")," preemptRender. The call stack become deeper when calling that function")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022137580600438815",source:"discord",createTime:"2022-09-21T13:29:49.613+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1021987751710699632/1022137580218761226/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022137683688030228",source:"discord",createTime:"2022-09-21T13:30:14.191+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"In that figure, a rectangle means the life of a function.")),(0,s.kt)(c,{author:"JsouLiang",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022137801099190334",source:"discord",createTime:"2022-09-21T13:30:42.184+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"so for not layout node we will paint a placeholder rect like this?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022137931881795694",source:"discord",createTime:"2022-09-21T13:31:13.365+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"We will know nothing for a node that ",(0,s.kt)("em",{parentName:"p"},"has not")," been painted ",(0,s.kt)("em",{parentName:"p"},"before")," this frame")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022137959962644480",source:"discord",createTime:"2022-09-21T13:31:20.06+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Because it is not in the layer tree")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022138051855667302",source:"discord",createTime:"2022-09-21T13:31:41.969+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"No placeholder rect indeed. But if you like, what about just putting a placeholder rect there, in previous frame")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022138088354480258",source:"discord",createTime:"2022-09-21T13:31:50.671+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Well the story is like:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022138149327085609",source:"discord",createTime:"2022-09-21T13:32:05.208+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608021234516754444/1021988294550110259"},"https://discord.com/channels/608014603317936148/608021234516754444/1021988294550110259"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022138208898781204",source:"discord",createTime:"2022-09-21T13:32:19.411+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Some researches or nvidia has some "magic" such that, they input some low resolution low fps frames, and output high resolution high fps frames. Consider this proposal as such kind of "tween creator".')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022138382106771496",source:"discord",createTime:"2022-09-21T13:33:00.707+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'So this proposal will output some extra frames, which are just "previous jank frame\'s layer tree + preemotModifyLayerTree minor changes like animation"')),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022138949931634688",source:"discord",createTime:"2022-09-21T13:35:16.087+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Does this mean that the build/layout of all nodes needs to be synchronized for this to happen? Normally build, layout are recursive calls.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022139119264075839",source:"discord",createTime:"2022-09-21T13:35:56.459+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Does this mean that the build/layout of all nodes needs to be synchronized for this to happen? Normally build, layout are recursive calls.\nIt is still recursive call. Just like plain old. Except that one extra line:"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022139135709945856",source:"discord",createTime:"2022-09-21T13:36:00.38+00:00",mdxType:"DiscussionComment"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"class RenderObject {\n  void layout(Constraints constraints, { bool parentUsesSize = false }) {\n    if (nearTimeout) { preemptRender(); }\n    \u2026 the original layout code \u2026\n  }\n}\n"))),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022141575133929614",source:"discord",createTime:"2022-09-21T13:45:41.984+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I kind of figured it out. The core thing is that when my time is running out, submit a LayerTree to the engine in ",(0,s.kt)("inlineCode",{parentName:"p"},"preemptRender")," for rendering, and then continue with layout (The recursion does not exit at this point\n).")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022141675839180829",source:"discord",createTime:"2022-09-21T13:46:05.994+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022141746286702642",source:"discord",createTime:"2022-09-21T13:46:22.79+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Then we get zero overhead for a lot of thing, etc")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022141794525401098",source:"discord",createTime:"2022-09-21T13:46:34.291+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"What if the whole element tree and RO tree change in the next frame")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022141849995063376",source:"discord",createTime:"2022-09-21T13:46:47.516+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just do the same thing in the next cycle")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022141859230928947",source:"discord",createTime:"2022-09-21T13:46:49.718+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Is there any problem")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022141913366810754",source:"discord",createTime:"2022-09-21T13:47:02.625+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just use this mimic")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022142732887670905",source:"discord",createTime:"2022-09-21T13:50:18.014+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Is paint applied to the parent of the interrupt node? I'm more concerned with the generation of this Layertree.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022143507558834216",source:"discord",createTime:"2022-09-21T13:53:22.71+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"No")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022143624709935125",source:"discord",createTime:"2022-09-21T13:53:50.641+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"no paint is happened in preemptRender, except for preemptModifyLayerTree - which only few specialized RO will handle")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022143715445325896",source:"discord",createTime:"2022-09-21T13:54:12.274+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but anyway, if you use PreemptDisplayList and put progress indicator as its child, then that child does get painted")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022144207617527848",source:"discord",createTime:"2022-09-21T13:56:09.617+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"The key point I think is that the generation of this Layertree, if we just call preemptRender(), For example, ",(0,s.kt)("inlineCode",{parentName:"p"},"layer = create_DisplayListLayer_and_paint_a_colored_rect(color: whatever_color_you_like_in_animation);"),"  , it could be very different from the previous UI")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022145486444056636",source:"discord",createTime:"2022-09-21T14:01:14.513+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"We do not generate a whole new layer tree. Instead, we modify it a little bit in the preemptModifyLayerTree")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022145565699612773",source:"discord",createTime:"2022-09-21T14:01:33.409+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For example, modify the color of a box a little bit, modify the shifting of the listview a bit")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022145618166157332",source:"discord",createTime:"2022-09-21T14:01:45.918+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"so it will be very similar to previous (janky) frame except for a bit of animation change")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022145714115067975",source:"discord",createTime:"2022-09-21T14:02:08.794+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"surely it may be different from next frame, if your prev frame is diff from next frame - but that definitely should be like that")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022146721645596773",source:"discord",createTime:"2022-09-21T14:06:09.008+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, I think it depends on the height similarity between the two frames")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022147860646600797",source:"discord",createTime:"2022-09-21T14:10:40.567+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"There are two issues I would love to see more detail on: "),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"How to generate this Layertree to the Engine when an interrupt occurs (e.g., two frames are completely different) "),(0,s.kt)("li",{parentName:"ol"},"How to handle vsync scheduling in case of interruption (for example, the whole Widget tree changes in the next vsync)"))),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022147953902759956",source:"discord",createTime:"2022-09-21T14:11:02.801+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Would you consider making a prototype of this solution any time soon?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022148131804151829",source:"discord",createTime:"2022-09-21T14:11:45.216+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"How to generate this Layertree to the Engine when an interrupt occurs (e.g., two frames are completely different)\nSince when preemptRender happens, we are in build & layout phase, we never touch layer tree yet. So we have the old layer tree. Now, we provide the old layer tree (with minor modify from preemptModifyLayerTree), to the engine"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022148419046866964",source:"discord",createTime:"2022-09-21T14:12:53.7+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"How to handle vsync scheduling in case of interruption (for example, the whole Widget tree changes in the next vsync)\nNo vsync is passed to dart layer during jank. Say we have a build/layout that takes 1s. Then during the 60 hardware vsync, we render 60 frames to screen via preemptRender. However, for the Dart code (excluding the preemptRender part), it only sees ",(0,s.kt)("em",{parentName:"p"},"one")," vsync, ",(0,s.kt)("em",{parentName:"p"},"one")," build/paint/layout/etc."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022148441746440192",source:"discord",createTime:"2022-09-21T14:12:59.112+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Would you consider making a prototype of this solution any time soon?"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022148462906724436",source:"discord",createTime:"2022-09-21T14:13:04.157+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure \ud83d\ude42")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022149372185686128",source:"discord",createTime:"2022-09-21T14:16:40.946+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think the core is the design of this ",(0,s.kt)("inlineCode",{parentName:"p"},"preemptModifyLayerTree")," which sounds similar to some low FPS conversion high FPS (inserting excessive frames in the middle).")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022149456407314502",source:"discord",createTime:"2022-09-21T14:17:01.026+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, I have said that here:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022149493371711488",source:"discord",createTime:"2022-09-21T14:17:09.839+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608021234516754444/1021987957021868062"},"https://discord.com/channels/608014603317936148/608021234516754444/1021987957021868062"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022149552012263494",source:"discord",createTime:"2022-09-21T14:17:23.82+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and here: ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/1021987751710699632/1022138208898781204"},"https://discord.com/channels/608014603317936148/1021987751710699632/1022138208898781204"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022150021883383838",source:"discord",createTime:"2022-09-21T14:19:15.846+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Indeed I am inserting a paragraph saying similar things into the doc at the same minute haha\n",(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1021987751710699632/1022150020344070244/unknown.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1021987751710699632/1022150020788654110/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022150200313266247",source:"discord",createTime:"2022-09-21T14:19:58.387+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, (sorry I didn't really understand that before)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022150233808982176",source:"discord",createTime:"2022-09-21T14:20:06.373+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1021987751710699632/1022150233473417246/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022150268843987016",source:"discord",createTime:"2022-09-21T14:20:14.726+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That's OK")),(0,s.kt)(c,{author:"xanahopper",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022152307984584764",source:"discord",createTime:"2022-09-21T14:28:20.895+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If the core is ",(0,s.kt)("inlineCode",{parentName:"p"},"preemptModifyLayerTree"),", that means when you want do some high priority render, you have to implement it?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022152899582754897",source:"discord",createTime:"2022-09-21T14:30:41.943+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes and no. "),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"For whatever widget tree that fit in a layer subtree without disturbing others, like a CircularProgressIndicator, reuse existing (well, to-be-written) PreemptDisplayList"),(0,s.kt)("li",{parentName:"ol"},"For listview scrolling, maybe just let ListView's RO implement preemptModifyLayerTree to implement inertia etc. (The design doc is a bit old, see discussions above for details)"),(0,s.kt)("li",{parentName:"ol"},"But I will think about more general solution to support arbitrary case. Anyway this is not the top priority - we should have the main idea running"))),(0,s.kt)(c,{author:"xanahopper",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022153705920921630",source:"discord",createTime:"2022-09-21T14:33:54.189+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"that means a new mechanism to implement for widgets who want use it, and has a cost to migrate")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022153885541998693",source:"discord",createTime:"2022-09-21T14:34:37.014+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For widgets who want 60fps, I guess not much - you can reuse it in many places")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022154012226748476",source:"discord",createTime:"2022-09-21T14:35:07.218+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It is like, we write down computeIntrinsicWidth, performLayout, performDryLayout, etc, a lot of things manually nowadays")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022154256196829195",source:"discord",createTime:"2022-09-21T14:36:05.385+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Notice we never need to implement new functions for things like CircularProgressIndicator")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022154342666604574",source:"discord",createTime:"2022-09-21T14:36:26.001+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"for those, just use the existing (will-be-in-framework) PreemptDisplayList")),(0,s.kt)(c,{author:"xanahopper",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022154720980258907",source:"discord",createTime:"2022-09-21T14:37:56.198+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And according to you pseudo code, one RO has a layer for previous frame, if it laid with all its relative parts, what should we do for its layer, will it be updated? and what happened when it completed?\nDid that means layer painting is un-interrupted?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022154930213101578",source:"discord",createTime:"2022-09-21T14:38:46.083+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"if it laid with all its relative parts\nDo you mean, what happen if that RO has its layer be the new data (instead of old data of previous frame)?"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022154962270179429",source:"discord",createTime:"2022-09-21T14:38:53.726+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That will not happen. We only preempt during build & layout phase. Paint is not happen yet")),(0,s.kt)(c,{author:"xanahopper",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022155160287445063",source:"discord",createTime:"2022-09-21T14:39:40.937+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I got it, layers only change when paint commit")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022155199147671583",source:"discord",createTime:"2022-09-21T14:39:50.202+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, IIRC")),(0,s.kt)(c,{author:"xanahopper",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022155442824159242",source:"discord",createTime:"2022-09-21T14:40:48.299+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So there is no such thing like Fiber do, build/layout, record and diff?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022155514773258240",source:"discord",createTime:"2022-09-21T14:41:05.453+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Maybe yes?")),(0,s.kt)(c,{author:"xanahopper",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022156434760269905",source:"discord",createTime:"2022-09-21T14:44:44.795+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"What if the ",(0,s.kt)("inlineCode",{parentName:"p"},"preemptModifyLayerTree")," overcost?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022156603660697612",source:"discord",createTime:"2022-09-21T14:45:25.064+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Then it janks, surely")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022156617799696425",source:"discord",createTime:"2022-09-21T14:45:28.435+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but why it overcost")),(0,s.kt)(c,{author:"xanahopper",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022156698871402607",source:"discord",createTime:"2022-09-21T14:45:47.764+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"when the implement sucks")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022156706198847548",source:"discord",createTime:"2022-09-21T14:45:49.511+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"e.g. painting a tiny progress indicator, should be fast; for listview scrolling example, just modify a little bit of OffsetLayer.offset")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022156765103669288",source:"discord",createTime:"2022-09-21T14:46:03.555+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'It is like asking "what if you misuse flutter" - answer is you get trouble \ud83d\ude42')),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022158210309820436",source:"discord",createTime:"2022-09-21T14:51:48.119+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"A question popped into my mind, I'm thinking of what the difference between this and Keframe(Especially after your optimization, build/layout as many widgets as possible in one frame)? For example, for some Wigdet you mentioned, need to implement preemptModifyLayerTree, and in this case, what if you use KeFrame and you set a placeholder like that?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022158616666587247",source:"discord",createTime:"2022-09-21T14:53:25.002+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"tell me the difference between this and Keframe\nI am going to sleep in a minute, will compare it tomorrow morning. Indeed the design doc has talked a little bit, and github issues also talked a bit."))),(0,s.kt)(c,{author:"SecondFlight",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022158676565430372",source:"discord",createTime:"2022-09-21T14:53:39.283+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy Hey! I've been lurking on the GitHub thread and didn't want to ask this there as I feel like I'm missing something."),(0,s.kt)("p",null,"Does your most recent proposal allow trivial layout changes to take priority over multi-frame changes? It seems a lot of nontrivial animations require some amount of layout shifting, but your diagram seems to indicate that all widgets must still build and layout in turn, so if an expensive widget needed to rebuild in a different part of the tree then it would still jank since the animation builder would still need to wait its turn."),(0,s.kt)("p",null,"Sorry if this is somewhat ignorant, I'm still trying to wrap my mind around it all.")),(0,s.kt)(c,{author:"SecondFlight",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022158725873664070",source:"discord",createTime:"2022-09-21T14:53:51.039+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Also please sleep if you need to, the question can wait \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022158850192855142",source:"discord",createTime:"2022-09-21T14:54:20.679+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@SecondFlight Hi, I will reply tomorrow morning \ud83d\ude42")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022159079478661151",source:"discord",createTime:"2022-09-21T14:55:15.345+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Well, I actually know the answer to that, but I think it might need to be spelled out a little bit more clearly")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022159499781484624",source:"discord",createTime:"2022-09-21T14:56:55.553+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I'm still looking forward to your prototype \uff0cWell done")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022159538683662387",source:"discord",createTime:"2022-09-21T14:57:04.828+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"good night \ud83c\udf19")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022159633785290862",source:"discord",createTime:"2022-09-21T14:57:27.502+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks, good night")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022189103132987392",source:"discord",createTime:"2022-09-21T16:54:33.542+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I've already lost track of this thread, but I think there's some good questions here about how this would work in a flex based widget (e.g. a column or row). We also should try to think about how it'd work in general for multi-child ROs")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022272736648757341",source:"discord",createTime:"2022-09-21T22:26:53.326+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think we should probably have  a linter that sorts ",(0,s.kt)("inlineCode",{parentName:"p"},"required")," keyword parameters first.  See this screenshot of the api popup in vscode, you have to scroll around and hunt for the signature of itembuilder\n",(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1022272736682324020/Screen_Shot_2022-09-21_at_3.11.03_PM.png",alt:"image"}))),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022276047904981132",source:"discord",createTime:"2022-09-21T22:40:02.791+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/dart-lang/linter/issues/3708"},"https://github.com/dart-lang/linter/issues/3708"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022282476191756288",source:"discord",createTime:"2022-09-21T23:05:35.414+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Jonah Williams Continuing from the problem of gesture subsystem of the design, here is a mental modal:"),(0,s.kt)("p",null,'Some researchers/nvidia/etc have some "magic" such that, they can input some low resolution low fps frames, and output high resolution high fps frames. Consider this proposal as such a kind of "tween creator". In other words, originally we have janky rendering (say, 15fps). And now, we add three extra animating frames after each of the 15fps frames, to get a 60fps smooth feeling.'),(0,s.kt)("p",null,"(Copied from updated design doc)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022282608626892891",source:"discord",createTime:"2022-09-21T23:06:06.989+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I've already lost track of this thread\nAh feel free to ask any questions and I am willing to answer!"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022282692638806026",source:"discord",createTime:"2022-09-21T23:06:27.019+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"how this would work in a flex based widget (e.g. a column or row). We also should try to think about how it'd work in general for multi-child ROs\nIt works well, no need to do any special treatment indeed \ud83d\ude42"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022282837015150662",source:"discord",createTime:"2022-09-21T23:07:01.441+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Btw I have answered your comments in google doc as well")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022283305078501416",source:"discord",createTime:"2022-09-21T23:08:53.036+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"allow trivial layout changes to take priority over multi-frame changes\nyes, allow things like a animating indicator or a scrolling listview to take priority over normal janky heavy build/layout"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022283500801499156",source:"discord",createTime:"2022-09-21T23:09:39.7+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"if an expensive widget needed to rebuild in a different part of the tree then it would still jank since the animation builder would still need to wait its turn"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022283729735000186",source:"discord",createTime:"2022-09-21T23:10:34.282+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If you mean that, your animation requires an expensive widget built onto a different part of tree, then yes it will jank")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022284203703939164",source:"discord",createTime:"2022-09-21T23:12:27.285+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'But will that be common? "some amount of layout shifting" - For example, a scrolling listview is very common case where we need 60fps smoothness. See the design doc, it indeed only needs a tiny change to OffsetLayer.offset')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022284953779707906",source:"discord",createTime:"2022-09-21T23:15:26.117+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(I will update the doc probably within an hour)")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022285320395444265",source:"discord",createTime:"2022-09-21T23:16:53.525+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I understand the argument you are trying to make but I don't find it convincing. Adding a second gesture system is not reasonable IMO. You should be working on how to eliminate that from your proposal. More time spent discussing with me is not going to help you there")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022285591246815292",source:"discord",createTime:"2022-09-21T23:17:58.101+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Adding a second gesture system is not reasonable IMO.\nI am proposing to have ",(0,s.kt)("em",{parentName:"p"},"no")," second gesture system \ud83d\ude42"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022285654723399760",source:"discord",createTime:"2022-09-21T23:18:13.235+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Ok I will update my proposal, reflecting there is no second gesture system at all")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022285676080791633",source:"discord",createTime:"2022-09-21T23:18:18.327+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Forget to do that, sorry")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022286314336428143",source:"discord",createTime:"2022-09-21T23:20:50.499+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And I am going to prototype today btw")),(0,s.kt)(c,{author:"gaaclarke",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK6o",source:"google_doc_comments",createTime:"2022-09-21T23:28:16.183Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'I don\'t see a clear description of what your proposal is.\xa0 The first information under "detailed design" are questions.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK7E",source:"google_doc_comments",createTime:"2022-09-21T23:29:52.258Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I should move it, wait a minute")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022288819921367122",source:"discord",createTime:"2022-09-21T23:30:47.877+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I don't understand the proposal, is it that if ",(0,s.kt)("inlineCode",{parentName:"p"},"build + layout > 1/60ms"),"  then capture a continuation of that work, submit a frame to the renderer, and finish the build/layout on the next frame?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022289152034742292",source:"discord",createTime:"2022-09-21T23:32:07.059+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@Jonah Williams Hi I have removed gesture system from the proposal, and also add explanations why that looks reasonable. Mainly change the "example 2 implementation" at the bottom of proposal.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022289260725948536",source:"discord",createTime:"2022-09-21T23:32:32.973+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'"on the next frame" - if it is quite slow, maybe on the next next next frame etc indeed')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022289372340564038",source:"discord",createTime:"2022-09-21T23:32:59.584+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'"capture a continuation of that work" - Well I do not capture anything. The ',(0,s.kt)("inlineCode",{parentName:"p"},"preemptRender")," is nothing but a normal function call.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022289479584731166",source:"discord",createTime:"2022-09-21T23:33:25.153+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"We just ",(0,s.kt)("em",{parentName:"p"},"call")," preemptRender, which sends layer tree to raster it, and later when it ",(0,s.kt)("em",{parentName:"p"},"returns")," we continue doing layout/build")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022289545619845150",source:"discord",createTime:"2022-09-21T23:33:40.897+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"what are you rendering while that work is happening?  a partial representation of the ui or the previous ui?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022289686045143103",source:"discord",createTime:"2022-09-21T23:34:14.377+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Previous layer tree (given that we preempt at build/layout, no modify to layer tree in current frame). But, we call preemptModifylayerTree, which modifies the layer a little bit for animations")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022289784015700020",source:"discord",createTime:"2022-09-21T23:34:37.735+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"e.g. in listview scrolling example, we call OffsetLayer.offset += 123.45 so content is moved")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022289878379139142",source:"discord",createTime:"2022-09-21T23:35:00.233+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"ahh so, the previous layer, but some effort is made it keep it animating, interesting")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022289946234585098",source:"discord",createTime:"2022-09-21T23:35:16.411+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes, like that")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022289962844037150",source:"discord",createTime:"2022-09-21T23:35:20.371+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks \ud83d\ude42")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022290422132908113",source:"discord",createTime:"2022-09-21T23:37:09.874+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"do you have a profile of those build + layout frames that are going over budget by any chance?")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022290592039964813",source:"discord",createTime:"2022-09-21T23:37:50.383+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I believe it can happen, but my first thought would be that maybe something like synchronous calls that shouldn't be synchronous are happening.")),(0,s.kt)(c,{author:"gaaclarke",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK7c",source:"google_doc_comments",createTime:"2022-09-21T23:41:52.568Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think that stuff we just said on the discord would be a good description: preempt build/layout, update the last layer, render the last frame, resume build/layout")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022291692646318111",source:"discord",createTime:"2022-09-21T23:42:12.788+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"IIRC some discussions above confirm this jank does happens (especially on low end devices), let me find a link")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022291862729527357",source:"discord",createTime:"2022-09-21T23:42:53.339+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Around this comment: ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608021234516754444/1021980287787352125"},"https://discord.com/channels/608014603317936148/608021234516754444/1021980287787352125"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022291936884826192",source:"discord",createTime:"2022-09-21T23:43:11.019+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"In short: bytedance people reported jank of build/layout in their real world app")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022292055847862342",source:"discord",createTime:"2022-09-21T23:43:39.382+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I am not bytedance so maybe need to ask them for a profiling data")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022292185225367644",source:"discord",createTime:"2022-09-21T23:44:10.228+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I also see jank in my app, but given that I am not expert in optimization and the app is not open sourced, my words is not that helpful")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK7o",source:"google_doc_comments",createTime:"2022-09-21T23:44:41.631Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks! I will add that")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022292715221831680",source:"discord",createTime:"2022-09-21T23:46:16.589+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"A couple of months ago I looked into build/layout performance.  I tried to squeeze as much as I could out of the framework but ran out of ideas.  My understanding from looking into is a lot of jank was shader compilation.  The thing that might be holding back layout / build is locality which will be hard to fix.  But I didn't see a lot of evidence from what I remember that it is worth the investment =T")),(0,s.kt)(c,{author:"Hixie",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK8I",source:"google_doc_comments",createTime:"2022-09-21T23:47:38.511Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"the way flutter does build and layout is interleaved, but not fine-grained. lots of building happens, then lots of layout, then lots of building, etc. You can run out of time at any time in this process, with a hundred widgets built but not laid out, for example. now the system is in a very inconsistent state.")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022293294773981184",source:"discord",createTime:"2022-09-21T23:48:34.765+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I guess my point is that if you want to propose a solution that fixes long (build + layout) times, we should establish that that is a worthwhile problem to fix backed up with some data.")),(0,s.kt)(c,{author:"Hixie",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK8M",source:"google_doc_comments",createTime:"2022-09-21T23:48:55.117Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"since we haven't done paint yet, what we're painting here is just the last frame. there's no need to send it to the engine, it's already got it.")),(0,s.kt)(c,{author:"Hixie",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK8Q",source:"google_doc_comments",createTime:"2022-09-21T23:51:38.614Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"how does it know what to do?")),(0,s.kt)(c,{author:"Hixie",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK8U",source:"google_doc_comments",createTime:"2022-09-21T23:52:01.162Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"what if the preempt happened before the progress indicator got to rebuild?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022294891805552672",source:"discord",createTime:"2022-09-21T23:54:55.527+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Thanks I will add a section to design doc.\n"shader compilation" - seems that @Jsouliang has mentioned above, they expect Impeller to solve the problem. Personally speaking I am not very sure b/c have not checked into impeller deeply.\n"might be holding back layout / build is locality" - could you please elaborate it a bit - Do you mean memory locality that causes page fault etc? Anyway, ',(0,s.kt)("em",{parentName:"p"},"any form"),' of build/layout slowness can be fixed by this proposal, no matter the cause. Even if you just heavily compute synchronously inside initState, this proposal can also fix \ud83d\ude42\n"I guess my point is that if you want to propose a solution that fixes long (build + layout) times, we should establish that that is a worthwhile problem to fix backed up with some data." - I agree. I wonder whether this is enough: @dnfield has gived a pointer, "A good canonical case here would be something like ',(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/lib/src/list_text_layout.dart"},"https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/lib/src/list_text_layout.dart"),'. This ends up being janky because layout gets expensive for all that text (on a lower end phone it can easily take 20-30+ms just to layout all the text there, and the ListTile is a little deceptive because Material introduces expense - this is the kind of thing we want to figure out how to break up "automatically")."')),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022296432738320454",source:"discord",createTime:"2022-09-22T00:01:02.914+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Oh interesting, I hadn't seen the list text layout benchmark.  WRT heavily computing inside initState shouldn't happen on the isolate, we should be giving users the tools to quickly offload work to a background isolate.  I think flutter/dart can do better there.  With the locality, yea talking about memory locality.  When I ran profiles I saw numbers that couldn't be associated with a single widget.  I suspect it is the recursive nature of crawling down the widget / render trees which jumps all over in memory.  Also Dart doesn't have value types so every single rectangle in layout is an indirection to another location in memory.  The locality thing is my pet theory, I can't prove it though \ud83d\ude1b")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022297458941902888",source:"discord",createTime:"2022-09-22T00:05:07.58+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"also @fzyzcjy you should look into impeller, i haven't run it recently and I don't want to hype it much, but it should make a huge impact.  it's almost not worth looking into jank until after it.  you can turn it on with a flag.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022297793555083274",source:"discord",createTime:"2022-09-22T00:06:27.358+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"WRT heavily computing inside initState shouldn't happen on the isolate, we should be giving users the tools to quickly offload work to a background isolate.\nSure, that should be a misuse in most of the time \ud83d\ude42\nBut indeed, sometimes it is sane to do so. For a simple example, you may have a giant tree in main isolate, and have to modify a lot of its nodes. It is hard (or impossible) to send it to another isolate, modify, and go back, otherwise copying is either too slow or even impossible for some types of objects. Anyway that is just a side remark, and my proposal is not designed to solely solve this special case"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022297942452875365",source:"discord",createTime:"2022-09-22T00:07:02.858+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"With the locality, yea talking about memory locality.  When I ran profiles I saw numbers that couldn't be associated with a single widget.  I suspect it is the recursive nature of crawling down the widget / render trees which jumps all over in memory.   Also Dart doesn't have value types so every single rectangle in layout is an indirection to another location in memory.  The locality thing is my pet theory, I can't prove it though \ud83d\ude1b\nI see. So my design should solve it \ud83d\ude1b"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022298136930168852",source:"discord",createTime:"2022-09-22T00:07:49.225+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"IMHO impeller is purely about raster thread? (Correct me if I am wrong!) In other words, even if we have impeller, if our ",(0,s.kt)("em",{parentName:"p"},"dart")," code janks, it still janks just like the old days")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK9A",source:"google_doc_comments",createTime:"2022-09-22T00:09:05.191Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure. Then I should insert ",(0,s.kt)("inlineCode",{parentName:"p"},"if timeout then preemptRender")," into the ",(0,s.kt)("inlineCode",{parentName:"p"},"build()")," as well, and seems we have no problem."),(0,s.kt)("p",null,"Btw, no inconsistent state :) I am sending the ",(0,s.kt)("em",{parentName:"p"},"layer tree")," in preemptRender, so I just accept the dart state to be completely in middle")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022298635632918619",source:"discord",createTime:"2022-09-22T00:09:48.125+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I can't remember for sure but shader compilation may happen on the platform thread while the raster thread waits for it synchronously.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK9E",source:"google_doc_comments",createTime:"2022-09-22T00:10:03.149Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Last frame,\xa0 but plus "preemptModifyLayerTree". For the scrolling listview example, we will modify the OffsetLayer.offset a bit (the amount by inertia). Then, users will see the list content shifted a little bit. So users will see list scrolling smoothly at 60fps, even if one build/layout/paint/... cycle takes, say, 10fps.')),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022298850918158356",source:"discord",createTime:"2022-09-22T00:10:39.453+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"It is hard (or impossible) to send it to another isolate, modify, and go back,\nYea a couple months ago I tried to come up with a way to get move semantics for sending data between isolates in constant time.  I couldn't find a good proposal that the dart team liked."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK9I",source:"google_doc_comments",createTime:"2022-09-22T00:10:42.809Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"See examples below, flutter framework dev (e.g. me) write down some code to cover a range of cases. Users can also write some if want very special behavior")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK9M",source:"google_doc_comments",createTime:"2022-09-22T00:11:20.716Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"No problem :) Progress indicator updates the UI also inside preemptModifyLayerTree, and that is why it is smooth 60fps.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022299041490550815",source:"discord",createTime:"2022-09-22T00:11:24.889+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Isolate.exit does send most data in constant time")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022299102769332305",source:"discord",createTime:"2022-09-22T00:11:39.499+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but that doesn't help for long-lived isolates of course, just ",(0,s.kt)("inlineCode",{parentName:"p"},"compute"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022299257744654450",source:"discord",createTime:"2022-09-22T00:12:16.448+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yeah, but the problem is I have to send data to that new isolate, which is linear. Anyway, that is just a special corner case, and my proposal does not aim to solve it as the main problem")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022299332751405108",source:"discord",createTime:"2022-09-22T00:12:34.331+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"yea, sorry to digress but it's an interesting problem")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022299348131909742",source:"discord",createTime:"2022-09-22T00:12:37.998+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see. Btw platform thread is not ui thread IIRC, so ui thread is still ok?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022299381879291964",source:"discord",createTime:"2022-09-22T00:12:46.044+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Haha I also feel it interesting")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022299507666456647",source:"discord",createTime:"2022-09-22T00:13:16.034+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Const time transfering in both side will be quite helpful indeed")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022299954825400360",source:"discord",createTime:"2022-09-22T00:15:02.645+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yea, sorta, but if you are blocking the platform thread you can be blocking events which feels janky.  it really depends on the embedder too what effect it can have.  I'm not saying build/layout isn't a potential issue, but from my having looked into this a couple months ago I think shader compilation was by and far the biggest issue which is good the flutter team is making a big investment there")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022300039516799088",source:"discord",createTime:"2022-09-22T00:15:22.837+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i gotta run, good luck @fzyzcjy nice meeting you")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022300083997376563",source:"discord",createTime:"2022-09-22T00:15:33.442+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see. Eagerly looking to see impeller be in production as well!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022300111293906954",source:"discord",createTime:"2022-09-22T00:15:39.95+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@gaaclarke See you \ud83d\ude42 Nice meeting you")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022300571673305108",source:"discord",createTime:"2022-09-22T00:17:29.713+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Hixie Btw I have replied your questions on google doc (not seeing it just now)")),(0,s.kt)(c,{author:"Hixie",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK90",source:"google_doc_comments",createTime:"2022-09-22T00:47:21.780Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This is the part I don't really understand.")),(0,s.kt)(c,{author:"Hixie",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK94",source:"google_doc_comments",createTime:"2022-09-22T00:47:48.550Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"How does the framework know this is the one that needs painting?"),(0,s.kt)("p",null,"What if it this is the slow part?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK98",source:"google_doc_comments",createTime:"2022-09-22T00:49:30.019Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Users manually write down "PreemptDisplayList(child:CircularProgressIndicator(preempt: false, \u2026 other argos \u2026),)"'),(0,s.kt)("p",null,"Then, when framework wants to preempt render an extra frame, it calls\xa0PreemptDisplayList.preemptModifyLayerTree."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\xa0What if it this is the slow part?")),(0,s.kt)("p",null,"Then it jank. But IMHO this happens rarely, at least should be ok for progress indicator\xa0and scrolling list view - could you please provide some real world case where it will be slow?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK-A",source:"google_doc_comments",createTime:"2022-09-22T00:50:08.815Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I have replied to another comment in google doc. Does that help? If not I can elaborate")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgghZK-E",source:"google_doc_comments",createTime:"2022-09-22T00:50:59.190Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If the animation is really the slow part under that special case, then any single-threaded solution will not work IMHO. (Seems flutter does not want multithread and I agree with that, so we only consider single thread solutions)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022321189730910208",source:"discord",createTime:"2022-09-22T01:39:25.441+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Update: The google doc ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?usp=sharing"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?usp=sharing"),' is updated, most changes are in "touch event handling system" and "comparison"')),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022336752695918713",source:"discord",createTime:"2022-09-22T02:41:15.941+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield  Yes, if I understand correctly, this case should not need to be considered separately. Since this solution does not affect the existing flow, it just calls preemptRender to submit a frame of drawing to engine at the end of the 16ms. Then continue back to the existing Layout flow")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022337039540174888",source:"discord",createTime:"2022-09-22T02:42:24.33+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes it is like that")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022338135360802816",source:"discord",createTime:"2022-09-22T02:46:45.594+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy  Yeah, I thought about it later, and I think one of the challenges is. In the case of video, when we go from 15FPS to 30fps, we actually know the content of each frame, so we can calculate the difference between two frames and interpolate them (IIRC some frames are diff messages). But with Flutter, we don't know what it looks like until we paint it on the next frame.")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022338260871168130",source:"discord",createTime:"2022-09-22T02:47:15.518+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For example, in this case, when I navigate from loading to a specific page")),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022338351434563605",source:"discord",createTime:"2022-09-22T02:47:37.11+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/1021987751710699632/1022338351099027567/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"Nayuta403",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022338478995935334",source:"discord",createTime:"2022-09-22T02:48:07.523+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"video source ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/110063#issuecomment-1223774091"},"https://github.com/flutter/flutter/issues/110063#issuecomment-1223774091"))),(0,s.kt)(c,{author:"Nayuta403",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAggxsF2g",source:"google_doc_comments",createTime:"2022-09-22T02:50:13.980Z",mdxType:"DiscussionComment"}),(0,s.kt)(c,{author:"Nayuta403",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAggxsF2k",source:"google_doc_comments",createTime:"2022-09-22T02:50:15.062Z",mdxType:"DiscussionComment"}),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022339665178669076",source:"discord",createTime:"2022-09-22T02:52:50.331+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@Nayuta I have not checked Nvidia\'s tech in details yet. But I guess, because of latency reasons, it will only "guess" extra frames from previous frame? (Will check this soon)')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022339976869970010",source:"discord",createTime:"2022-09-22T02:54:04.644+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For the navigation, say the new page takes 3 frame to render and the page shift animation is 10 frame. Then, users will see 60fps smooth page shift, and during frame 0-3 they see new page is purely empty and in frame 4-10 they see new page with content")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022344022771105852",source:"discord",createTime:"2022-09-22T03:10:09.262+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think that a solution that requires developers to implement their own render objects to achieve this may be interesting for a package but probably won't end up in the core framework")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022344204283826186",source:"discord",createTime:"2022-09-22T03:10:52.538+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If we require developers to think more about whether their widget/RO needs this, and how to create a custom one that will do the right thing, it's going to be very difficult for them to use. It might be very useful and a skilled developer might find very clever ways to do it, but it won't be something that will scale very well.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022345695509876796",source:"discord",createTime:"2022-09-22T03:16:48.074+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"requires developers to implement their own render objects to achieve\nWell I guess yes and no. "),(0,s.kt)("ol",{parentName:"blockquote"},(0,s.kt)("li",{parentName:"ol"},"For anything that fit into a subtree, no need for dev to do anything except for inserting PreemptDisplayList widget to the tree"),(0,s.kt)("li",{parentName:"ol"},"For list view scrolling, we do need to change listview's source code a bit, but flutter devs will not even know that change")))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022345949797949450",source:"discord",createTime:"2022-09-22T03:17:48.701+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Let me think about whether I can do something like "just drop in a widget and it works" for end users \ud83e\udd14')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022347027532763136",source:"discord",createTime:"2022-09-22T03:22:05.653+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Do you think the 1. and 2. above are enough to cover most common use cases?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022347123229986929",source:"discord",createTime:"2022-09-22T03:22:28.469+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If so then maybe we are ok - we speed up common cases, and for rare edge cases they need to craft something")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022348023604465694",source:"discord",createTime:"2022-09-22T03:26:03.135+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It's really hard to tell whether something fits into a subtree, particularly in a large project with many people working on it and in situations where large subtrees are getting built (route transitions)")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022348134547980298",source:"discord",createTime:"2022-09-22T03:26:29.586+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Scrolling isn't usually the big offender here - we have mechanisms to lazily build the contents of what's getting scrolled, and changing the offset on the layer of what's already built is cheap")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022348342090539044",source:"discord",createTime:"2022-09-22T03:27:19.068+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'The problem is more like "I need to build an entire new tree of widgets in 8ms or less and I have 300+ widgets to build to get there and on my low end phone it\'s taking a long time"')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022348923249119304",source:"discord",createTime:"2022-09-22T03:29:37.627+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"It's really hard to tell whether something fits into a subtree, particularly in a large project with many people working on it and in situations where large subtrees are getting built (route transitions)\nRoute transitions will always not fit into a leaf subtree indeed, but it is in my example 3.\nScrolling isn't usually the big offender here - we have mechanisms to lazily build the contents of what's getting scrolled, and changing the offset on the layer of what's already built is cheap\n@Nayuta 's Keframe deals with scrolling and is popular, and I also see problems in scrolling (both in my realworld app and my experiments), so I guess it may be a problem sometimes\nThe problem is more like \"I need to build an entire new tree of widgets in 8ms or less and I have 300+ widgets to build to get there and on my low end phone it's taking a long time\"\ni.e. page transition? (the example 3)"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022349287629271111",source:"discord",createTime:"2022-09-22T03:31:04.502+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'So maybe what I should do is answering: "Devs want to write fancy route transition animations, by themselves and without need to think hard, and at the same time, the new page is heavy and cannot be rendered in one frame"')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022349323582832681",source:"discord",createTime:"2022-09-22T03:31:13.074+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I will come back when having a solution \ud83d\ude42")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022349554542190643",source:"discord",createTime:"2022-09-22T03:32:08.139+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think it's a little more like \"devs want to inflate a large widget tree and be confident that if it doesn't fit into frame budget it will get broken up into pieces that make sense\"")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022349664705597482",source:"discord",createTime:"2022-09-22T03:32:34.404+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(And they can't spend hours altering the logic controlling that every time they refactor or add widgets)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022349833580855409",source:"discord",createTime:"2022-09-22T03:33:14.667+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\"devs want to inflate a large widget tree and be confident that if it doesn't fit into frame budget it will get broken up into pieces that make sense\"\nI see. That is exactly what the proposal aims to solve.\n(And they can't spend hours altering the logic controlling that every time they refactor or add widgets)\nTotally agree \ud83d\ude42 I should make the dev-facing API easier"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022350466761379881",source:"discord",createTime:"2022-09-22T03:35:45.629+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Well, maybe I forget to explain: Dev ",(0,s.kt)("em",{parentName:"p"},"never")," need to do anything special for most of their app. The ",(0,s.kt)("em",{parentName:"p"},"only")," extra thing is the part for 60fps smooth animation. Only if they want something to be very smooth, and it is not a leaf subtree (e.g. loading indicator) and not a scrolling listview and not a already-provided-in-framework page transition, they will have to write some extra code (in the current proposal).")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022351031981572127",source:"discord",createTime:"2022-09-22T03:38:00.388+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It might help to have some example application showing the improvements")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022351070007132160",source:"discord",createTime:"2022-09-22T03:38:09.454+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Would you mind giving a realworld example where userrs, using my currently proposed api, have to write a lot of extra code? such that I will have an example in mind to optimize")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022351088550158366",source:"discord",createTime:"2022-09-22T03:38:13.875+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure, I should do that. Probably create an app w/ page transition etc")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022384252085604372",source:"discord",createTime:"2022-09-22T05:50:00.678+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Quick update: I am now experimenting multiple subtrees (i.e. a forest). Flutter seems to allow so (e.g. examples/api/lib/widgets/framework/build_owner.0.dart example). If this works, we may have a natural API, i.e. only insert a few extra Widgets to dev's widget tree and that's all, and @dnfield's worry will be solved.")),(0,s.kt)(c,{author:"xanahopper",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022393700594229259",source:"discord",createTime:"2022-09-22T06:27:33.378+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"for some reason I think maybe build in one frame, layout and paint in next frame is acceptable")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022395490924515369",source:"discord",createTime:"2022-09-22T06:34:40.226+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Agree, if that is implementable looks like also an idea, as long as the build fits in 16ms")),(0,s.kt)(c,{author:"Nayuta403",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAghP1jDo",source:"google_doc_comments",createTime:"2022-09-22T13:01:35.648Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I would like to add:\xa0 this solution has less overhead than keframe. When Keframe replaces placeholder with real widget, it is driven by vsync signal to execute drawFrame process and submit to engine, so it will execute the complete build/layout/paint etc process. But build/layout/paint other than the actual widget is not necessary. In the Preempt Layout scheme, the UI thread just voluntarily submits a frame to the Engine after 16ms of detection, and then returns to the normal rendering flow without much additional overhead.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAghP1jEQ",source:"google_doc_comments",createTime:"2022-09-22T13:18:08.710Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks, I added it")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022518983817166868",source:"discord",createTime:"2022-09-22T14:45:23.226+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Update: minimalist API (one widget for everything) + a prototype about framework layer."),(0,s.kt)("p",null,"Now, developers will only need to insert ",(0,s.kt)("inlineCode",{parentName:"p"},"PreemptBuilder(builder: (context, child) => whatever_you_like, child: also_free_to_choose)"),' widget, and that\'s all. Arbitrary builder, arbitrary child subtree, and smooth 60fps will be there for the builder. The google doc is updated to discuss this - mainly in (1) "usage examples" (2) "From preemptModifyLayerTree to PreemptBuilder" in "detailed design".')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022518994579755108",source:"discord",createTime:"2022-09-22T14:45:25.792+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Update: minimalist API (one widget for everything) + a prototype about framework layer."),(0,s.kt)("p",null,"Now, developers will only need to insert ",(0,s.kt)("inlineCode",{parentName:"p"},"PreemptBuilder(builder: (context, child) => whatever_you_like, child: also_free_to_choose)"),' widget, and that\'s all. Arbitrary builder, arbitrary child subtree, and smooth 60fps will be there for the builder. The google doc is updated to discuss this - mainly in (1) "usage examples" (2) "From preemptModifyLayerTree to PreemptBuilder" in "detailed design".')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022519050875707513",source:"discord",createTime:"2022-09-22T14:45:39.214+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield I guess your worry is now solved? \ud83d\ude04")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-22T14:46:52Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Update: minimalist API (one widget for everything) + a prototype about framework layer."),(0,s.kt)("p",null,"Now, developers will only need to insert ",(0,s.kt)("inlineCode",{parentName:"p"},"PreemptBuilder(builder: (context, child) => whatever_you_like, child: also_free_to_choose)"),' widget, and that\'s all. Arbitrary builder, arbitrary child subtree, and smooth 60fps will be there for the builder. The google doc is updated to discuss this - mainly in (1) "usage examples" (2) "From preemptModifyLayerTree to PreemptBuilder" in "detailed design".'),(0,s.kt)("p",null,"Code prototype:"),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"// ignore_for_file: avoid_print, prefer_const_constructors, invalid_use_of_protected_member\n\nimport 'dart:ui';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter/scheduler.dart';\n\nfinal secondTreePack = SecondTreePack();\n\n// since prototype, only one [RenderAdapterInSecondTree], so do like this\nfinal mainSubTreeLayerHandle = LayerHandle(OffsetLayer());\n\nvoid main() {\n  debugPrintBeginFrameBanner = debugPrintEndFrameBanner = true;\n  secondTreePack; // touch it\n  mainSubTreeLayerHandle; // touch it\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  var buildCount = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    buildCount++;\n    print('$runtimeType.build ($buildCount)');\n\n    if (buildCount < 5) {\n      Future.delayed(Duration(seconds: 1), () {\n        print('$runtimeType.setState after a second');\n        setState(() {});\n      });\n    }\n\n    return MaterialApp(\n      home: Scaffold(\n        body: _buildBody(),\n      ),\n    );\n  }\n\n  Widget _buildBody() {\n    return Column(\n      children: [\n        Text('A$buildCount', style: TextStyle(fontSize: 30)),\n        Container(\n          decoration: BoxDecoration(\n            border: Border.all(\n              color: Colors.orange[(buildCount % 8 + 1) * 100]!,\n              width: 10,\n            ),\n          ),\n          width: 300,\n          height: 300,\n          // hack: [AdapterInMainTreeWidget] does not respect \"offset\" in paint\n          // now, so we add a RepaintBoundary to let offset==0\n          // hack: [AdapterInMainTreeWidget] does not respect \"offset\" in paint\n          // now, so we add a RepaintBoundary to let offset==0\n          child: RepaintBoundary(\n            child: AdapterInMainTreeWidget(\n              parentBuildCount: buildCount,\n              // child: DrawCircleWidget(parentBuildCount: buildCount),\n              child: Center(\n                child: Container(\n                  width: 100,\n                  height: 100,\n                  color: Colors.pink[(buildCount % 8 + 1) * 100],\n                ),\n              ),\n            ),\n          ),\n        ),\n        Text('B$buildCount', style: TextStyle(fontSize: 30)),\n        WindowRenderWhenLayoutWidget(parentBuildCount: buildCount),\n        Text('C$buildCount', style: TextStyle(fontSize: 30)),\n      ],\n    );\n  }\n}\n\nclass WindowRenderWhenLayoutWidget extends SingleChildRenderObjectWidget {\n  final int parentBuildCount;\n\n  const WindowRenderWhenLayoutWidget({\n    super.key,\n    required this.parentBuildCount,\n    super.child,\n  });\n\n  @override\n  WindowRenderWhenLayoutRender createRenderObject(BuildContext context) =>\n      WindowRenderWhenLayoutRender(\n        parentBuildCount: parentBuildCount,\n      );\n\n  @override\n  void updateRenderObject(\n      BuildContext context, WindowRenderWhenLayoutRender renderObject) {\n    renderObject.parentBuildCount = parentBuildCount;\n  }\n}\n\nclass WindowRenderWhenLayoutRender extends RenderProxyBox {\n  WindowRenderWhenLayoutRender({\n    required int parentBuildCount,\n    RenderBox? child,\n  })  : _parentBuildCount = parentBuildCount,\n        super(child);\n\n  int get parentBuildCount => _parentBuildCount;\n  int _parentBuildCount;\n\n  set parentBuildCount(int value) {\n    if (_parentBuildCount == value) return;\n    _parentBuildCount = value;\n    print('$runtimeType markNeedsLayout because parentBuildCount changes');\n    markNeedsLayout();\n  }\n\n  @override\n  void performLayout() {\n    // unconditionally call this, as an experiment\n    pseudoPreemptRender();\n\n    super.performLayout();\n  }\n\n  void pseudoPreemptRender() {\n    print('$runtimeType pseudoPreemptRender start');\n\n    // ref: https://github.com/fzyzcjy/yplusplus/issues/5780#issuecomment-1254562485\n    // ref: RenderView.compositeFrame\n\n    final builder = SceneBuilder();\n\n    // final recorder = PictureRecorder();\n    // final canvas = Canvas(recorder);\n    // final rect = Rect.fromLTWH(0, 0, 500, 500);\n    // canvas.drawRect(Rect.fromLTWH(100, 100, 50, 50.0 * parentBuildCount),\n    //     Paint()..color = Colors.green);\n    // final pictureLayer = PictureLayer(rect);\n    // pictureLayer.picture = recorder.endRecording();\n    // final rootLayer = OffsetLayer();\n    // rootLayer.append(pictureLayer);\n    // final scene = rootLayer.buildScene(builder);\n\n    final binding = WidgetsFlutterBinding.ensureInitialized();\n\n    preemptModifyLayerTree(binding);\n\n    // why this layer? from RenderView.compositeFrame\n    final scene = binding.renderView.layer!.buildScene(builder);\n\n    print('call window.render');\n    window.render(scene);\n\n    scene.dispose();\n\n    print('$runtimeType pseudoPreemptRender end');\n  }\n\n  void preemptModifyLayerTree(WidgetsBinding binding) {\n    // hack, just want to prove we can change something (preemptModifyLayerTree)\n    // inside the preemptRender\n    final rootLayer = binding.renderView.layer! as TransformLayer;\n    rootLayer.transform =\n        rootLayer.transform!.multiplied(Matrix4.translationValues(0, 50, 0));\n    print('preemptModifyLayerTree rootLayer=$rootLayer (after)');\n\n    refreshSecondTree();\n  }\n\n  void refreshSecondTree() {\n    print('$runtimeType refreshSecondTree start');\n    secondTreePack.innerStatefulBuilderSetState(() {});\n\n    // NOTE reference: WidgetsBinding.drawFrame & RendererBinding.drawFrame\n    // https://github.com/fzyzcjy/yplusplus/issues/5778#issuecomment-1254490708\n    secondTreePack.buildOwner.buildScope(secondTreePack.element);\n    secondTreePack.pipelineOwner.flushLayout();\n    secondTreePack.pipelineOwner.flushCompositingBits();\n    secondTreePack.pipelineOwner.flushPaint();\n    // renderView.compositeFrame(); // this sends the bits to the GPU\n    // pipelineOwner.flushSemantics(); // this also sends the semantics to the OS.\n    secondTreePack.buildOwner.finalizeTree();\n\n    print('$runtimeType refreshSecondTree end');\n  }\n}\n\nclass AdapterInMainTreeWidget extends SingleChildRenderObjectWidget {\n  final int parentBuildCount;\n\n  const AdapterInMainTreeWidget({\n    super.key,\n    required this.parentBuildCount,\n    super.child,\n  });\n\n  @override\n  RenderAdapterInMainTree createRenderObject(BuildContext context) =>\n      RenderAdapterInMainTree(parentBuildCount: parentBuildCount);\n\n  @override\n  void updateRenderObject(\n      BuildContext context, RenderAdapterInMainTree renderObject) {\n    renderObject.parentBuildCount = parentBuildCount;\n  }\n}\n\nclass RenderAdapterInMainTree extends RenderBox\n    with RenderObjectWithChildMixin<RenderBox> {\n  RenderAdapterInMainTree({\n    required int parentBuildCount,\n    // RenderBox? child,\n  }) : _parentBuildCount = parentBuildCount;\n\n  // super(child);\n\n  int get parentBuildCount => _parentBuildCount;\n  int _parentBuildCount;\n\n  set parentBuildCount(int value) {\n    if (_parentBuildCount == value) return;\n    _parentBuildCount = value;\n    print('$runtimeType markNeedsLayout because parentBuildCount changes');\n    markNeedsLayout();\n  }\n\n  // should not be singleton, but we are prototyping so only one such guy\n  static RenderAdapterInMainTree? instance;\n\n  @override\n  void attach(covariant PipelineOwner owner) {\n    super.attach(owner);\n    assert(instance == null);\n    instance = this;\n  }\n\n  @override\n  void detach() {\n    assert(instance == this);\n    instance == null;\n    super.detach();\n  }\n\n  @override\n  void layout(Constraints constraints, {bool parentUsesSize = false}) {\n    print('$runtimeType.layout called');\n    super.layout(constraints, parentUsesSize: parentUsesSize);\n  }\n\n  @override\n  void performLayout() {\n    print('$runtimeType.performLayout start');\n\n    // NOTE\n    secondTreePack.rootView.configuration =\n        SecondTreeRootViewConfiguration(size: constraints.biggest);\n\n    print('$runtimeType.performLayout child.layout start');\n    child!.layout(constraints);\n    print('$runtimeType.performLayout child.layout end');\n\n    size = constraints.biggest;\n  }\n\n  // TODO correct?\n  @override\n  bool get alwaysNeedsCompositing => true;\n\n  // static final staticPseudoRootLayerHandle = () {\n  //   final recorder = PictureRecorder();\n  //   final canvas = Canvas(recorder);\n  //   final rect = Rect.fromLTWH(0, 0, 200, 200);\n  //   canvas.drawRect(\n  //       Rect.fromLTWH(0, 0, 50, 100), Paint()..color = Colors.green);\n  //   final pictureLayer = PictureLayer(rect);\n  //   pictureLayer.picture = recorder.endRecording();\n  //   final wrapperLayer = OffsetLayer();\n  //   wrapperLayer.append(pictureLayer);\n  //\n  //   final pseudoRootLayer = TransformLayer(transform: Matrix4.identity());\n  //   pseudoRootLayer.append(wrapperLayer);\n  //\n  //   pseudoRootLayer.attach(secondTreePack.rootView);\n  //\n  //   return LayerHandle(pseudoRootLayer);\n  // }();\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    assert(offset == Offset.zero,\n        '$runtimeType prototype has not deal with offset yet');\n\n    print('$runtimeType.paint called');\n\n    // super.paint(context, offset);\n    // return;\n\n    // context.canvas.drawRect(Rect.fromLTWH(0, 0, 50, 50.0 * parentBuildCount),\n    //     Paint()..color = Colors.green);\n    // return;\n\n    // context.pushLayer(\n    //   OpacityLayer(alpha: 100),\n    //   (context, offset) {\n    //     context.canvas.drawRect(\n    //         Rect.fromLTWH(0, 0, 50, 50.0 * parentBuildCount),\n    //         Paint()..color = Colors.green);\n    //   },\n    //   offset,\n    // );\n    // return;\n\n    // context.addLayer(PerformanceOverlayLayer(\n    //   overlayRect: Rect.fromLTWH(offset.dx, offset.dy, size.width, size.height),\n    //   optionsMask: 1 <<\n    //           PerformanceOverlayOption.displayRasterizerStatistics.index |\n    //       1 << PerformanceOverlayOption.visualizeRasterizerStatistics.index |\n    //       1 << PerformanceOverlayOption.displayEngineStatistics.index |\n    //       1 << PerformanceOverlayOption.visualizeEngineStatistics.index,\n    //   rasterizerThreshold: 0,\n    //   checkerboardRasterCacheImages: true,\n    //   checkerboardOffscreenLayers: true,\n    // ));\n    // return;\n\n    // {\n    //   final recorder = PictureRecorder();\n    //   final canvas = Canvas(recorder);\n    //   final rect = Rect.fromLTWH(0, 0, 200, 200);\n    //   canvas.drawRect(Rect.fromLTWH(0, 0, 50, 50.0 * parentBuildCount),\n    //       Paint()..color = Colors.green);\n    //   final pictureLayer = PictureLayer(rect);\n    //   pictureLayer.picture = recorder.endRecording();\n    //   final wrapperLayer = OffsetLayer();\n    //   wrapperLayer.append(pictureLayer);\n    //\n    //   // NOTE addLayer vs pushLayer\n    //   context.addLayer(wrapperLayer);\n    //\n    //   print('pictureLayer.attached=${pictureLayer.attached} '\n    //       'wrapperLayer.attached=${wrapperLayer.attached}');\n    //\n    //   return;\n    // }\n\n    // {\n    //   if (staticPseudoRootLayerHandle.layer!.attached) {\n    //     print('pseudoRootLayer.detach');\n    //     staticPseudoRootLayerHandle.layer!.detach();\n    //   }\n    //\n    //   print('before addLayer staticPseudoRootLayer=${staticPseudoRootLayerHandle.layer!.toStringDeep()}');\n    //\n    //   context.addLayer(staticPseudoRootLayerHandle.layer!);\n    //\n    //   print('after addLayer staticPseudoRootLayer=${staticPseudoRootLayerHandle.layer!.toStringDeep()}');\n    //\n    //   return;\n    // }\n\n    // ref: RenderOpacity\n\n    // TODO this makes \"second tree root layer\" be *removed* from its original\n    //      parent. shall we move it back later? o/w can be slow!\n    final secondTreeRootLayer = secondTreePack.rootView.layer!;\n\n    // print(\n    //     'just start secondTreeRootLayer=${secondTreeRootLayer.toStringDeep()}');\n\n    // HACK!!!\n    if (secondTreeRootLayer.attached) {\n      print('$runtimeType.paint detach the secondTreeRootLayer');\n      // TODO attach again later?\n      secondTreeRootLayer.detach();\n    }\n\n    // print(\n    //     'before addLayer secondTreeRootLayer=${secondTreeRootLayer.toStringDeep()}');\n\n    print('$runtimeType.paint addLayer');\n    // NOTE addLayer, not pushLayer!!!\n    context.addLayer(secondTreeRootLayer);\n    // context.pushLayer(secondTreeRootLayer, (context, offset) {}, offset);\n\n    print('secondTreeRootLayer.attached=${secondTreeRootLayer.attached}');\n    print(\n        'after addLayer secondTreeRootLayer=${secondTreeRootLayer.toStringDeep()}');\n\n    // ================== paint those child in main tree ===================\n\n    // NOTE do *not* have any relation w/ self's PaintingContext, as we will not paint there\n    {\n      // ref: [PaintingContext.pushLayer]\n      if (mainSubTreeLayerHandle.layer!.hasChildren) {\n        mainSubTreeLayerHandle.layer!.removeAllChildren();\n      }\n      final childContext = PaintingContext(\n          mainSubTreeLayerHandle.layer!, context.estimatedBounds);\n      child!.paint(childContext, Offset.zero);\n      childContext.stopRecordingIfNeeded();\n    }\n\n    // =====================================================================\n  }\n\n// TODO handle layout!\n}\n\nclass AdapterInSecondTreeWidget extends SingleChildRenderObjectWidget {\n  final int parentBuildCount;\n\n  const AdapterInSecondTreeWidget({\n    super.key,\n    required this.parentBuildCount,\n    super.child,\n  });\n\n  @override\n  RenderAdapterInSecondTree createRenderObject(BuildContext context) =>\n      RenderAdapterInSecondTree(parentBuildCount: parentBuildCount);\n\n  @override\n  void updateRenderObject(\n      BuildContext context, RenderAdapterInSecondTree renderObject) {\n    renderObject.parentBuildCount = parentBuildCount;\n  }\n}\n\nclass RenderAdapterInSecondTree extends RenderBox {\n  RenderAdapterInSecondTree({\n    required int parentBuildCount,\n  }) : _parentBuildCount = parentBuildCount;\n\n  int get parentBuildCount => _parentBuildCount;\n  int _parentBuildCount;\n\n  set parentBuildCount(int value) {\n    if (_parentBuildCount == value) return;\n    _parentBuildCount = value;\n    print('$runtimeType markNeedsLayout because parentBuildCount changes');\n    markNeedsLayout();\n  }\n\n  // should not be singleton, but we are prototyping so only one such guy\n  static RenderAdapterInSecondTree? instance;\n\n  @override\n  void attach(covariant PipelineOwner owner) {\n    super.attach(owner);\n    assert(instance == null);\n    instance = this;\n  }\n\n  @override\n  void detach() {\n    assert(instance == this);\n    instance == null;\n    super.detach();\n  }\n\n  @override\n  void layout(Constraints constraints, {bool parentUsesSize = false}) {\n    print('$runtimeType.layout called');\n    super.layout(constraints, parentUsesSize: parentUsesSize);\n  }\n\n  @override\n  void performLayout() {\n    print('$runtimeType.performLayout called');\n    size = constraints.biggest;\n  }\n\n  // TODO correct?\n  @override\n  bool get alwaysNeedsCompositing => true;\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    print('$runtimeType paint');\n    context.addLayer(mainSubTreeLayerHandle.layer!);\n  }\n}\n\nclass SecondTreePack {\n  late final PipelineOwner pipelineOwner;\n  late final SecondTreeRootView rootView;\n  late final BuildOwner buildOwner;\n  late final RenderObjectToWidgetElement<RenderBox> element;\n\n  var innerStatefulBuilderBuildCount = 0;\n  late StateSetter innerStatefulBuilderSetState;\n\n  SecondTreePack() {\n    pipelineOwner = PipelineOwner();\n    rootView = pipelineOwner.rootNode = SecondTreeRootView(\n      configuration: SecondTreeRootViewConfiguration(size: Size.zero),\n    );\n    buildOwner = BuildOwner(\n      focusManager: FocusManager(),\n      onBuildScheduled: () =>\n          print('second tree BuildOwner.onBuildScheduled called'),\n    );\n\n    rootView.prepareInitialFrame();\n\n    final secondTreeWidget = StatefulBuilder(builder: (_, setState) {\n      print(\n          'secondTreeWidget(StatefulBuilder).builder called ($innerStatefulBuilderBuildCount)');\n\n      innerStatefulBuilderSetState = setState;\n      innerStatefulBuilderBuildCount++;\n\n      return Container(\n        width: 50 * innerStatefulBuilderBuildCount.toDouble(),\n        height: 100,\n        color: Colors.blue[(innerStatefulBuilderBuildCount * 100) % 800 + 100],\n        child: AdapterInSecondTreeWidget(\n          parentBuildCount: innerStatefulBuilderBuildCount,\n        ),\n      );\n    });\n\n    element = RenderObjectToWidgetAdapter<RenderBox>(\n      container: rootView,\n      debugShortDescription: '[root]',\n      child: secondTreeWidget,\n    ).attachToRenderTree(buildOwner);\n  }\n}\n\n// ref: [ViewConfiguration]\nclass SecondTreeRootViewConfiguration {\n  const SecondTreeRootViewConfiguration({\n    required this.size,\n  });\n\n  final Size size;\n\n  @override\n  bool operator ==(Object other) {\n    if (other.runtimeType != runtimeType) {\n      return false;\n    }\n    return other is ViewConfiguration && other.size == size;\n  }\n\n  @override\n  int get hashCode => size.hashCode;\n\n  @override\n  String toString() => '$size';\n}\n\nclass SecondTreeRootView extends RenderObject\n    with RenderObjectWithChildMixin<RenderBox> {\n  SecondTreeRootView({\n    RenderBox? child,\n    required SecondTreeRootViewConfiguration configuration,\n  }) : _configuration = configuration {\n    this.child = child;\n  }\n\n  // NOTE ref [RenderView.size]\n  /// The current layout size of the view.\n  Size get size => _size;\n  Size _size = Size.zero;\n\n  // NOTE ref [RenderView.configuration] which has size and some other things\n  /// The constraints used for the root layout.\n  SecondTreeRootViewConfiguration get configuration => _configuration;\n  SecondTreeRootViewConfiguration _configuration;\n\n  set configuration(SecondTreeRootViewConfiguration value) {\n    if (configuration == value) {\n      return;\n    }\n    print(\n        '$runtimeType set configuration(i.e. size) $_configuration -> $value');\n    _configuration = value;\n    markNeedsLayout();\n  }\n\n  @override\n  void performLayout() {\n    print(\n        '$runtimeType performLayout configuration.size=${configuration.size}');\n\n    _size = configuration.size;\n\n    assert(child != null);\n    child!.layout(BoxConstraints.tight(_size));\n  }\n\n  // ref RenderView\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    // NOTE we have to temporarily remove debugActiveLayout\n    // b/c [SecondTreeRootView.paint] is called inside [preemptRender]\n    // which is inside main tree's build/layout.\n    // thus, if not set it to null we will see error\n    // https://github.com/fzyzcjy/yplusplus/issues/5783#issuecomment-1254974511\n    // In short, this is b/c [debugActiveLayout] is global variable instead\n    // of per-tree variable\n    final oldDebugActiveLayout = RenderObject.debugActiveLayout;\n    RenderObject.debugActiveLayout = null;\n    try {\n      print('$runtimeType paint child start');\n      context.paintChild(child!, offset);\n      print('$runtimeType paint child end');\n    } finally {\n      RenderObject.debugActiveLayout = oldDebugActiveLayout;\n    }\n  }\n\n  @override\n  void debugAssertDoesMeetConstraints() => true;\n\n  void prepareInitialFrame() {\n    // ref: RenderView\n    scheduleInitialLayout();\n    scheduleInitialPaint(_updateMatricesAndCreateNewRootLayer());\n  }\n\n  // ref: RenderView\n  TransformLayer _updateMatricesAndCreateNewRootLayer() {\n    final rootLayer = TransformLayer(transform: Matrix4.identity());\n    rootLayer.attach(this);\n    return rootLayer;\n  }\n\n  // ref: RenderView\n  @override\n  bool get isRepaintBoundary => true;\n\n  // ref: RenderView\n  @override\n  Rect get paintBounds => Offset.zero & size;\n\n  // ref: RenderView\n  @override\n  void performResize() {\n    assert(false);\n  }\n\n  // hack: just give non-sense value, this is prototype\n  @override\n  Rect get semanticBounds => paintBounds;\n}\n\nclass DrawCircleWidget extends LeafRenderObjectWidget {\n  final int parentBuildCount;\n\n  const DrawCircleWidget({\n    super.key,\n    required this.parentBuildCount,\n  });\n\n  @override\n  RenderDrawCircle createRenderObject(BuildContext context) => RenderDrawCircle(\n        parentBuildCount: parentBuildCount,\n      );\n\n  @override\n  void updateRenderObject(BuildContext context, RenderDrawCircle renderObject) {\n    renderObject.parentBuildCount = parentBuildCount;\n  }\n}\n\nclass RenderDrawCircle extends RenderProxyBox {\n  RenderDrawCircle({\n    required int parentBuildCount,\n    RenderBox? child,\n  })  : _parentBuildCount = parentBuildCount,\n        super(child);\n\n  int get parentBuildCount => _parentBuildCount;\n  int _parentBuildCount;\n\n  set parentBuildCount(int value) {\n    if (_parentBuildCount == value) return;\n    _parentBuildCount = value;\n    print('$runtimeType markNeedsLayout because parentBuildCount changes');\n    markNeedsLayout();\n  }\n\n  @override\n  void layout(Constraints constraints, {bool parentUsesSize = false}) {\n    print('$runtimeType performLayout');\n    super.layout(constraints, parentUsesSize: parentUsesSize);\n  }\n\n  @override\n  void performLayout() {\n    size = constraints.biggest;\n  }\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    print('$runtimeType paint');\n    context.canvas\n        .drawCircle(Offset(50, 50), 100, Paint()..color = Colors.cyan);\n  }\n}\n"))),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Next time I may only update progress in Discord, since there are already >hundred comments there - seems everyone is there instead of in github :)")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022520470278520882",source:"discord",createTime:"2022-09-22T14:51:17.626+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It'd help to see usage")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022520689351213126",source:"discord",createTime:"2022-09-22T14:52:09.857+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"In the example section of the google doc, updated")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022520976669409390",source:"discord",createTime:"2022-09-22T14:53:18.359+00:00",mdxType:"DiscussionComment"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"YourParentWidgets(\n  child: PreemptBuilder(\n    builder: (_, child) => YourFancyAnimationWhichNeeds60FPS(child: child)),\n    child: YourNewPageAndSoOn(),\n  )\n)\n"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022521002900586577",source:"discord",createTime:"2022-09-22T14:53:24.613+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For page transition")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022521020885782538",source:"discord",createTime:"2022-09-22T14:53:28.901+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022521131653148672",source:"discord",createTime:"2022-09-22T14:53:55.31+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"All those YourSomthing are plain old widget trees, no special")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022521872950243338",source:"discord",createTime:"2022-09-22T14:56:52.049+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Curious is it OK to you? Btw I am going to sleep in a minute and will reply 8hr later for later comments")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022525438846828626",source:"discord",createTime:"2022-09-22T15:11:02.225+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"A demo would help")),(0,s.kt)(c,{author:"Callum",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022533843724537968",source:"discord",createTime:"2022-09-22T15:44:26.104+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I would rather think of an API like this would be useful"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"SlowSubtree(\n    placeholder: Center(child: CupertinoActivityIndicator())\n    child: MyBigScrollingPage()\n)\n")),(0,s.kt)("p",null,"And that child could be built over multiple frames. Main use case would be to not frame-drop during page push animation when the new page is complex. Seems like based on ",(0,s.kt)("inlineCode",{parentName:"p"},"build_owner.0.dart")," example it can be possible to build arbitrary subtrees? But would need to modify the build owner in order to yield back and show the placeholder.")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022546349926924368",source:"discord",createTime:"2022-09-22T16:34:07.815+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If someone has stackoverflow comment abilities can you please comment on this answer: ",(0,s.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/64167746/20063373"},"https://stackoverflow.com/a/64167746/20063373"),"  It assumes that the ",(0,s.kt)("inlineCode",{parentName:"p"},"builder")," for ",(0,s.kt)("inlineCode",{parentName:"p"},"StreamBuilder")," will get called 1-to-1 for the ",(0,s.kt)("inlineCode",{parentName:"p"},"Stream")," events.  So the code will fail depending on the timing of the Stream.  It's kind of a nasty gotcha.")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022550647956062208",source:"discord",createTime:"2022-09-22T16:51:12.545+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Filed an issue to propose the ability to make ",(0,s.kt)("inlineCode",{parentName:"p"},"StreamBuilder")," lossless since the fail case is too dire imo")),(0,s.kt)(c,{author:"BetoMan0",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022560256900993135",source:"discord",createTime:"2022-09-22T17:29:23.496+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"could you link it please?")),(0,s.kt)(c,{author:"Hixie",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgAJWz4g",source:"google_doc_comments",createTime:"2022-09-22T18:10:23.481Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think if we can find a way to do multithreading nobody is against it a priori."),(0,s.kt)("p",null,'If I may, it sounds like your proposal boils down to "provide developers with a way to mark areas of the tree that should be updated first (doing build, layout, paint, and semantics), then, if the time runs out during a frame, send the updated layer tree that only contains those parts and not the others, then continue doing the frame". Is that right?'),(0,s.kt)("p",null,'If so, I think the main problem with this approach is that we\'d have to rerun the rarely-mentioned (because it\'s so cheap) "animation" step that happens before build, so that the parts of the tree that need animating early can be updated with the new time stamp, but in the current model, that requires winding down the stack frame because between the "animation" and "build" phases we run microtasks.'),(0,s.kt)("p",null,"I also worry that it would lead to some strange effects like how to determine which parts of the tree to update and which to not. For example, suppose you have three parts to your page. Part A is marked as needing fast updates, and parts B and C other two are expensive animations."),(0,s.kt)("p",null,"We start frame 1, we update all the AnimationControllers, we build/layout/paint/layer/semantics the first (A), then we start on B, and we do no build and layout of B. Then we interrupt the work to send the tree to the engine with A's update. We do a new animation phase to update all the AnimationControllers again, we build/layout/paint/layer/semantics the first (A), then we resume the work on the original frame. Now we build/layout C. Finally build and layout are done so we paint B and C and do the layer tree and render it. Unfortunately, because B and C were painted after different animation phases, they'll be out of sync. It'll look like the two animations are running at a low frame rate ",(0,s.kt)("em",{parentName:"p"},"and out of sync with each other"),", which IMHO is worse than today (where they're just at a low frame rate)."),(0,s.kt)("p",null,"That's assuming we can figure out how to do the animation phase at all.")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022585702728355851",source:"discord",createTime:"2022-09-22T19:10:30.254+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"oops, sorry ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/112197"},"https://github.com/flutter/flutter/issues/112197"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022641922352881774",source:"discord",createTime:"2022-09-22T22:53:54.057+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It is still a prototype :/")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022642041236246588",source:"discord",createTime:"2022-09-22T22:54:22.401+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I will have a more complete prototype today. Just want to confirm whether the user-facing API looks good to you or not (b/c it is an API, not an implementation detail)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022642455327289405",source:"discord",createTime:"2022-09-22T22:56:01.128+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If the API is still bad I need to think another")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022642563573882981",source:"discord",createTime:"2022-09-22T22:56:26.936+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Callum That would be great, and looks like what the modify-the-build and modify-the-layout will do (see compaison between them and my proposal, in the google doc ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit#"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit#"),")")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022642805467787375",source:"discord",createTime:"2022-09-22T22:57:24.608+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"However, the main problem is that, seems not to exist efficient implementable solutions for those ideas (some by googlers, some by bytedancers, some by me). They have either performance problems, or logical problems IIRC. I am also looking forward to see progress on those methods!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022643311422476379",source:"discord",createTime:"2022-09-22T22:59:25.237+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Done (under @ch271828n account, also me)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgi3nytg",source:"google_doc_comments",createTime:"2022-09-22T23:07:21.894Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"boils down to ... Is that right?")),(0,s.kt)("p",null,"Quite similar to my existing proposal, if it is implementable, sure."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'we\'d have to rerun the rarely-mentioned (because it\'s so cheap) "animation" step ... because between the "animation" and "build" phases we run microtasks.')),(0,s.kt)("p",null,"Indeed I am also quite curious why it was design like that, instead of putting animation into build/layout phase.\nAnyway, if using the PreemptBuilder dev-facing API, dev just use a builder callback (like what we have done a million times) to drive animation, which is flexible."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Unfortunately, because B and C were painted after different animation phases, they'll be out of sync.")),(0,s.kt)("p",null,"Sorry I cannot get it. In my proposal, they always see the same vsync signal. Indeed, using the mental model (a section in this design doc), every code should just see the plain old janky environment, except for a small portion of the code (the one inside PreemptBuilder) which knows extra info."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"That's assuming we can figure out how to do the animation phase at all.")),(0,s.kt)("p",null,"Currently I plan ",(0,s.kt)("em",{parentName:"p"},"not")," to do the animation phase indeed, and just use the builder callback.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgi3nytk",source:"google_doc_comments",createTime:"2022-09-22T23:26:20.434Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"IIRC, Flutter officially supports us to using builder pattern for animations. For example, AnimatedBuilder is indeed implemented as ",(0,s.kt)("inlineCode",{parentName:"p"},"setState")," per Listenable update, very similar to how we treat PreemptBuilder - build (setState?) per 60fps frame.")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022654879577145364",source:"discord",createTime:"2022-09-22T23:45:23.3+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It's still not quite clear to me how it will work or if it's solving the problem that I'm particularly interested in (building big widget trees on slow devices)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022655590494896139",source:"discord",createTime:"2022-09-22T23:48:12.796+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"if it's solving the problem that I'm particularly interested in (building big widget trees on slow devices)\nAt the API level I guess yes?"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022655611919417374",source:"discord",createTime:"2022-09-22T23:48:17.904+00:00",mdxType:"DiscussionComment"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"YourParentWidgets(\n  child: PreemptBuilder(\n    builder: (_, child) => YourFancyAnimationWhichNeeds60FPS(child: child)),\n    child: ABigWidgetTreeThatYouWant(),\n  )\n)\n"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022655894992977980",source:"discord",createTime:"2022-09-22T23:49:25.394+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"how it will work\nThe code is already working (except that I have not modify engine, so it just omits later window.render to screen...), anyway I will prototype more today"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-23T13:28:16Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"prototype-enter-new-heavy-page-smoothly-even-though-it-takes-05s-to-buildlayout"},"Prototype: Enter-new-heavy-page, smoothly even though it takes 0.5s to build/layout"),(0,s.kt)("p",null,"Also posted in discord and google doc"),(0,s.kt)("h4",{id:"defects-in-the-prototype-compared-to-the-future-full-implementation"},"Defects in the prototype compared to the future full implementation"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The page is so heavy that even paint without the time of build and layout causes a visible jank with PreemptBuilder; in real world should not be that slow (since in real world build/layout does not take 30 frames)"),(0,s.kt)("li",{parentName:"ul"},"Extra frame is driven by simple ",(0,s.kt)("inlineCode",{parentName:"li"},"DateTime.now")," (instead of vsync), so it is not at its best performance"),(0,s.kt)("li",{parentName:"ul"},"Prototype code has not been fully clean up yet")),(0,s.kt)("h4",{id:"code"},"Code"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter/tree/experiment-forest"},"https://github.com/fzyzcjy/flutter/tree/experiment-forest")," and ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/engine/tree/experiment-smooth"},"https://github.com/fzyzcjy/engine/tree/experiment-smooth")),(0,s.kt)("h4",{id:"downloadable-app"},"Downloadable app"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/files/9634000/app-profile.apk.zip"},"app-profile.apk.zip")),(0,s.kt)("h4",{id:"video"},"Video"),(0,s.kt)("p",null,"Firstly the slow (plain old) case, then the fast (using PreemptBuilder) case. The grey circle appears when I touch the screen (by android system recorder)."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://user-images.githubusercontent.com/5236035/191970843-a9c82a38-1276-4024-8a1b-c102c9b8e22f.mp4"},"https://user-images.githubusercontent.com/5236035/191970843-a9c82a38-1276-4024-8a1b-c102c9b8e22f.mp4"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022862104325259294",source:"discord",createTime:"2022-09-23T13:28:49.53+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Prototype: Enter-new-heavy-page, smoothly even though it takes 0.5s to build/layout")),(0,s.kt)("p",null,"Defects in the prototype compared to the future full implementation"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The page is so heavy that even paint without the time of build and layout causes a visible jank with PreemptBuilder; in real world should not be that slow (since in real world build/layout does not take 30 frames)"),(0,s.kt)("li",{parentName:"ul"},"Extra frame is driven by simple ",(0,s.kt)("inlineCode",{parentName:"li"},"DateTime.now")," (instead of vsync), so it is not at its best performance"),(0,s.kt)("li",{parentName:"ul"},"Prototype code has not been fully clean up yet")),(0,s.kt)("p",null,"Code"),(0,s.kt)("p",null,"github.com/fzyzcjy/flutter/tree/experiment-forest and github.com/fzyzcjy/engine/tree/experiment-smooth (deliberately removed https o/w discord pop up big cards)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022862260735066182",source:"discord",createTime:"2022-09-23T13:29:26.821+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"apk:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022862373742194740",source:"discord",createTime:"2022-09-23T13:29:53.764+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1256212759"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1256212759")," has an attachment (the apk)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022862385159090176",source:"discord",createTime:"2022-09-23T13:29:56.486+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"video:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022862437994725436",source:"discord",createTime:"2022-09-23T13:30:09.083+00:00",mdxType:"DiscussionComment"}),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022862458798485566",source:"discord",createTime:"2022-09-23T13:30:14.043+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Firstly the slow (plain old) case, then the fast (using PreemptBuilder) case. The grey circle appears when I touch the screen (by android system recorder).")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022862703032795176",source:"discord",createTime:"2022-09-23T13:31:12.273+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608021234516754444/1022862104325259294"},"https://discord.com/channels/608014603317936148/608021234516754444/1022862104325259294"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/1021987751710699632/1022862801095630972",source:"discord",createTime:"2022-09-23T13:31:35.653+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I made the prototype \ud83d\ude04")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022865871166779472",source:"discord",createTime:"2022-09-23T13:43:47.615+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"/cc @Hixie @Jonah Williams @dnfield @gaaclarke @XanaHopper @Nayuta @Jsouliang @SecondFlight who had comments about the design doc (hope I remembered everyone)")),(0,s.kt)(c,{author:"Piero512",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022873820358520954",source:"discord",createTime:"2022-09-23T14:15:22.85+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I noticed that we're calling it pre-emptive rendering")),(0,s.kt)(c,{author:"Piero512",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022873983156228217",source:"discord",createTime:"2022-09-23T14:16:01.664+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but since Flutter is a reactive framework")),(0,s.kt)(c,{author:"Piero512",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874018321272944",source:"discord",createTime:"2022-09-23T14:16:10.048+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://reactjs.org/blog/2022/03/29/react-v18.html#gradually-adopting-concurrent-features"},"https://reactjs.org/blog/2022/03/29/react-v18.html#gradually-adopting-concurrent-features")," this is what react is doing")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874287125835837",source:"discord",createTime:"2022-09-23T14:17:14.136+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Piero512 Not sure which part in the link are you refer to - do you mean Fiber?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874356654809198",source:"discord",createTime:"2022-09-23T14:17:30.713+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Indeed Fiber is the very beginning: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227"},"https://github.com/flutter/flutter/issues/101227"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874414481690634",source:"discord",createTime:"2022-09-23T14:17:44.5+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But my current solution is indeed quite different from fiber (indeed little similarity)")),(0,s.kt)(c,{author:"HrX",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874663849832530",source:"discord",createTime:"2022-09-23T14:18:43.954+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"it seems to break the specified transition duration, is it expected?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874707902595173",source:"discord",createTime:"2022-09-23T14:18:54.457+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Break what?")),(0,s.kt)(c,{author:"HrX",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874727938805881",source:"discord",createTime:"2022-09-23T14:18:59.234+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"like, if a transition was meant to be (say) 400ms then that constraint is not respected anymore")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874762525020322",source:"discord",createTime:"2022-09-23T14:19:07.48+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Should be 400ms")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874774097113139",source:"discord",createTime:"2022-09-23T14:19:10.239+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If not, it is a bug")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874830145585172",source:"discord",createTime:"2022-09-23T14:19:23.602+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This is prototype indeed, so please bear some bugs \ud83d\ude42")),(0,s.kt)(c,{author:"HrX",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874850018205779",source:"discord",createTime:"2022-09-23T14:19:28.34+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"hm hm i see")),(0,s.kt)(c,{author:"HrX",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874903701094401",source:"discord",createTime:"2022-09-23T14:19:41.139+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"was asking out of curiosity indeed, cuz was wondering if it was expected or no")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022874961054019605",source:"discord",createTime:"2022-09-23T14:19:54.813+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022875079421481070",source:"discord",createTime:"2022-09-23T14:20:23.034+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Your app should be exactly like what you expect, except that you have extra smooth frames, when using this PreemptBuilder")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1022907305471246456",source:"discord",createTime:"2022-09-23T16:28:26.323+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"is that dilating the time of the animation?  What is supposed to be the duration of that transition?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1023007290300833872",source:"discord",createTime:"2022-09-23T23:05:44.564+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like a bug in my prototype. I use DateTime.now() everywhere (since this is a prototype), so it is weird that it dilates so much. It should be 0.3s.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1023007451282415687",source:"discord",createTime:"2022-09-23T23:06:22.945+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I will debug it soon")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1023065826078756944",source:"discord",createTime:"2022-09-24T02:58:20.581+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw, I realized that, the video is only <30FPS (even if recording non-flutter apps), so cannot demonstrate the real case... Will change a software."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Update")," (2022.9.24 22:00 @ UTC+8): Given that you guys seem to be on weekend, I will not post details to avoid disturbing. But if you are interested in my today (and tomorrow)'s progress, all my progress can be seen in realtime in the github branches posted above. Have a good weekend! \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1023410732336939129",source:"discord",createTime:"2022-09-25T01:48:52.641+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Brief visual update: It runs at ~60fps, while widget build/layout needs ~500ms")),(0,s.kt)("p",null,"Video description: (1) The slow (plain-old) case is repeated twice (2) Then the fast (using PreemptBuilder) case is done twice (3) Lastly a debug animation is shown (to be explained below)."),(0,s.kt)("p",null,"How to verify it is 60fps: I personally use ",(0,s.kt)("inlineCode",{parentName:"p"},"ffmpeg -i $VIDEO -vsync 0 -frame_pts true -vf drawtext=fontfile=/usr/share/fonts/truetype/freefont/FreeMonoBold.ttf:fontsize=80:text='%{pts}':fontcolor=white@0.8:x=7:y=7 ~/temp/video_frames/output_%04d.jpg")," to extract every frame of the video."),(0,s.kt)("p",null,"P.S. The last section in the video (debug animation) is used to verify the file transfer. If that part is seen janky, then it is probably a problem when transferring the video file etc, since that should definitely be 60FPS."),(0,s.kt)("p",null,"As usual, the code is at the GitHub branch mentioned above.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-25T01:50:08Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"brief-visual-update-it-runs-at-60fps-while-widget-buildlayout-needs-500ms"},"Brief visual update: It runs at ~60fps, while widget build/layout needs ~500ms"),(0,s.kt)("p",null,"X-Posted: ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608021234516754444/1023410732336939129"},"https://discord.com/channels/608014603317936148/608021234516754444/1023410732336939129")),(0,s.kt)("p",null,"Video description: (1) The slow (plain-old) case is repeated twice (2) Then the fast (using PreemptBuilder) case is done twice (3) Lastly a debug animation is shown (to be explained below)."),(0,s.kt)("p",null,"How to verify it is 60fps: I personally use ",(0,s.kt)("inlineCode",{parentName:"p"},"ffmpeg -i $VIDEO -vsync 0 -frame_pts true -vf drawtext=fontfile=/usr/share/fonts/truetype/freefont/FreeMonoBold.ttf:fontsize=80:text='%{pts}':fontcolor=white@0.8:x=7:y=7 ~/temp/video_frames/output_%04d.jpg")," to extract every frame of the video."),(0,s.kt)("p",null,"P.S. The last section in the video (debug animation) is used to verify the file transfer. If that part is seen janky, then it is probably a problem when transferring the video file etc, since that should definitely be 60FPS."),(0,s.kt)("p",null,"As usual, the code is at the GitHub branch mentioned above."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://user-images.githubusercontent.com/5236035/192124851-19bae792-ad31-4ae3-8717-8a0821038d00.mp4"},"https://user-images.githubusercontent.com/5236035/192124851-19bae792-ad31-4ae3-8717-8a0821038d00.mp4"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1023411181567868978",source:"discord",createTime:"2022-09-25T01:50:39.746+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://user-images.githubusercontent.com/5236035/192124851-19bae792-ad31-4ae3-8717-8a0821038d00.mp4"},"https://user-images.githubusercontent.com/5236035/192124851-19bae792-ad31-4ae3-8717-8a0821038d00.mp4"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1023834043906793552",source:"discord",createTime:"2022-09-26T05:50:57.984+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Brief update in recent experiments: Overhead per frame is medium=0.53ms, p95=0.81ms, p99=1.10ms, on my low-end testing device, for the "enter-new-screen" demo. (Indeed it may not be called "overhead", since those time are really needed to update data for screen)')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-26T10:27:09Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Latest video (if you are interested :))"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://user-images.githubusercontent.com/5236035/192254354-e65a8bd2-9f49-4c5b-acdf-eda3932402f9.mp4"},"https://user-images.githubusercontent.com/5236035/192254354-e65a8bd2-9f49-4c5b-acdf-eda3932402f9.mp4")),(0,s.kt)("p",null,"(This comment is also linked from ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit#"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit#"),", i.e.\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/files/9646963/Preemption.for.60.FPS.PUBLICLY.SHARED.4.pdf"},"Preemption for 60 FPS (PUBLICLY SHARED) (4).pdf"),")")),(0,s.kt)(c,{author:"moffatman",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-26T12:15:54Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Is build progress occuring during animation here? Because the effect could be replicated by just delaying the complex content build for ~500 ms (animation duration). ")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-26T12:37:42Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@moffatman"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Is build progress occuring during animation here")),(0,s.kt)("p",null,"Not completely get the question... If the question is, whether animation happens when the complex widget is being built/layouted, the answer is yes."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Because the effect could be replicated by just delaying the complex content build for ~500 ms (animation duration).")),(0,s.kt)("p",null,"You need some extra preempt points, instead of a single ",(0,s.kt)("inlineCode",{parentName:"p"},"sleep(500ms)"),". For example, this should work:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"build() {\n  for(var i=0;i<100;++i) {\n    Actor.instance.maybePreemptRender();\n    sleep(const Duration(milliseconds: 5));\n  }\n  return your widget;\n}\n")),(0,s.kt)("p",null,"Indeed, preempt points are auto injected via PreemptPoint, and (possibly done in the real PR) in every RenderObject.layout. So usually no need to manually write that."),(0,s.kt)("p",null,"By the way, your original modification does not work, because by default I do not expect a single widget.build to exceed 16ms. Anyway if that is the case just insert a few ",(0,s.kt)("inlineCode",{parentName:"p"},"maybePreemptRender"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1023962436723814412",source:"discord",createTime:"2022-09-26T14:21:09.217+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Good morning friends! Should I start making the PR?\n@Hixie @Jonah Williams @dnfield @gaaclarke @Callum @ping (googlers who had discussions about this proposal)"),(0,s.kt)("p",null,"The design doc has been overhauled:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'Add chapter "experiments (prototype)", showing videos, code demos, FPS analysis, and overhead analysis.'),(0,s.kt)("li",{parentName:"ul"},'Add section "needed code change", demonstrating what framework and engine code (few) needs to be modified.'),(0,s.kt)("li",{parentName:"ul"},'Overhaul chapter "comparison", elaborating the differences.')),(0,s.kt)("p",null,"I want to sincerely say thanks to Flutter. Flutter has saved me months, if not a year, by allowing me to write a single codebase and run on dual platforms (saving half of the time), to use the very productive declarative framework and hot reload, to utilize the quickly-progressing Dart language with expressive and safe type system, to easily customize the appearance as accurate as pixel level, to be able to dig down and modify engine code when I need a new feature (impossible with Web), and many more."),(0,s.kt)("p",null,"That is a big reason why I decided to contribute this PR (Preemption for 60 FPS) to Flutter. Flutter has saved me so much time, so now it is my turn to provide my time to Flutter to make it better. I also love open source very much, such as my ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge"},"flutter_rust_bridge")," open-source library (which could have been closed-source and only used by myself), and my previous PRs to Flutter fixing bugs, which is another driving force.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1023962525391396956",source:"discord",createTime:"2022-09-26T14:21:30.357+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(overhauled design doc) ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko"))),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024029635975065771",source:"discord",createTime:"2022-09-26T18:48:10.767+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i still don't understand how you run the animation phase in your proposal. (the discussion in the last comment in the doc)")),(0,s.kt)(c,{author:"gaaclarke",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgw_vfTs",source:"google_doc_comments",createTime:"2022-09-26T20:17:01.105Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It's unclear the mechanism that is used to resume layout.\xa0 Are we really resuming or retrying?\xa0 In order to resume the whole stack would have to be captured (ie a continuation).")),(0,s.kt)(c,{author:"gaaclarke",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgw_vfT8",source:"google_doc_comments",createTime:"2022-09-26T20:35:41.851Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I'm unfamiliar with how keframe works.\xa0 Would this make that library obsolete?\xa0 Does it handle all the cases it does?")),(0,s.kt)(c,{author:"gaaclarke",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgw_vfUw",source:"google_doc_comments",createTime:"2022-09-26T21:21:30.304Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"What happens if we can't update the existing tree in the 1.667ms we have then?\xa0 How do we select this number 15ms?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024088435759251577",source:"discord",createTime:"2022-09-26T22:41:49.728+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@Hixie Hi I add a section "How is animation implemented" just now. Hope I explain it clearly now!')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024088529363554424",source:"discord",createTime:"2022-09-26T22:42:12.045+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'(last section in the "detailed design")')),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024090751816187944",source:"discord",createTime:"2022-09-26T22:51:01.919+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"ah, i see")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024090772720590878",source:"discord",createTime:"2022-09-26T22:51:06.903+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"so it only works for animations driven from tickers")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024090828777459823",source:"discord",createTime:"2022-09-26T22:51:20.268+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"this whole design seems super fragile to me")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgw_vfXA",source:"google_doc_comments",createTime:"2022-09-26T22:51:53.514Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"My proposed method is not sensitive to the threshold indeed. In other words, suppose you happen to pause at 15ms, then you do not necessarily need to finish UI thread work and submit to raster thread in 16.67-15=1.67ms. On the contrary, you can, e.g. finish in 2ms or 3ms or 4ms or whatever, as long as raster thread have enough time to finish his hob."),(0,s.kt)("p",null,'Some details can be found in the "when to call preemptRender" section')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091043601326130",source:"discord",createTime:"2022-09-26T22:52:11.486+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"May I know what other kinds of animations exist in Flutter?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091069543088248",source:"discord",createTime:"2022-09-26T22:52:17.671+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I personally have only seen those from tickers")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091097045139506",source:"discord",createTime:"2022-09-26T22:52:24.228+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"could be anything")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091142188441660",source:"discord",createTime:"2022-09-26T22:52:34.991+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hmm could you please point out where so I can try to improve?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091239605358592",source:"discord",createTime:"2022-09-26T22:52:58.217+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/development/ui/animations"},"https://docs.flutter.dev/development/ui/animations"))),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091329824821330",source:"discord",createTime:"2022-09-26T22:53:19.727+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"what i mean by fragile is that there's lots of ways you could write a flutter app that violates the assumptions made here")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091389375565906",source:"discord",createTime:"2022-09-26T22:53:33.925+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If I understand correctly, AnimatedBuilder, AnimatedWidget, FooTransition, TweenAnimationBuilder etc all use vsync and tickers")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091510934880329",source:"discord",createTime:"2022-09-26T22:54:02.907+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"like, for example, what if two widgets communicate via some other object, and one is in one of these interruptible subtrees and the other isn't. they'll be seeing different phases at different times")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091515456327681",source:"discord",createTime:"2022-09-26T22:54:03.985+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Dev only needs to pay attention to the code inside PreemptBuilder.builder, which should be a little of code (instead of a lot)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091581306908712",source:"discord",createTime:"2022-09-26T22:54:19.685+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That builder is only for smooth animations")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091608687317154",source:"discord",createTime:"2022-09-26T22:54:26.213+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"not for very huge heavy things \ud83d\ude42")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091648398999675",source:"discord",createTime:"2022-09-26T22:54:35.681+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"that's what i mean by fragile :-)")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091708260089897",source:"discord",createTime:"2022-09-26T22:54:49.953+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"something that isn't fragile would work in many different scenarios")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091808927580190",source:"discord",createTime:"2022-09-26T22:55:13.954+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure I agree with that. But it seems to solve the smoothness at 60fps problem")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091832247930900",source:"discord",createTime:"2022-09-26T22:55:19.514+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Everything comes with a cost :/")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091923889266698",source:"discord",createTime:"2022-09-26T22:55:41.363+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Especially with the gain of "60fps, no matter how heavy your subtree is to build and layout"')),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024091974933946450",source:"discord",createTime:"2022-09-26T22:55:53.533+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'well, it doesn\'t really. it solves the "subset of your tree at 60fps" problem :-)')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092067368009830",source:"discord",createTime:"2022-09-26T22:56:15.571+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'The "user seeing the UI at 60fps" \ud83d\ude42')),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092105385185290",source:"discord",createTime:"2022-09-26T22:56:24.635+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"sort of. parts will be 30fps :-)")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092110032470087",source:"discord",createTime:"2022-09-26T22:56:25.743+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"anyway")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092151992291398",source:"discord",createTime:"2022-09-26T22:56:35.747+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"is there a way to build this in a package?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092168383627344",source:"discord",createTime:"2022-09-26T22:56:39.655+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"parts that does not need change indeed so users never know it \ud83d\ude42")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092183223074896",source:"discord",createTime:"2022-09-26T22:56:43.193+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"what does it actually need from the core framework?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092229884715028",source:"discord",createTime:"2022-09-26T22:56:54.318+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(btw why you can type that face while mine will be a yellow face)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092251896422450",source:"discord",createTime:"2022-09-26T22:56:59.566+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yes and no, the details:")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092288764354580",source:"discord",createTime:"2022-09-26T22:57:08.356+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i suppose you need to hook into every build/layout")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092331445600347",source:"discord",createTime:"2022-09-26T22:57:18.532+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024092331273629726/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092350382870678",source:"discord",createTime:"2022-09-26T22:57:23.047+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'The "needed code change" section')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092415763685476",source:"discord",createTime:"2022-09-26T22:57:38.635+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So maybe I should PR those framework changes, and then make a package? Or should I PR the whole thing?")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092761613406219",source:"discord",createTime:"2022-09-26T22:59:01.092+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"some of these changes are sort of fundamentally opposed to flutter's design philosophy\nlike, for example, the widget system shouldn't need to know about tickers\na developer should be able to build an entirely separate animation system and just layer it on top of the framework\nbut if we do what this proposal suggests, we're really saying that tickers are very special in a core sense")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092818895011870",source:"discord",createTime:"2022-09-26T22:59:14.749+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Or a way to preempt an isolate, creating a continuation that can be resumed, but that probably isn't going to happen.")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092903770947635",source:"discord",createTime:"2022-09-26T22:59:34.985+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"yeah that seems even more fragile")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024092916408401920",source:"discord",createTime:"2022-09-26T22:59:37.998+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw, not sure what exact problem will they face? The widget in main tree see one ticker per frame. The widget in second tree see many ticker ticks per frame. And they see the same microtasks and event loop run.")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093082909687870",source:"discord",createTime:"2022-09-26T23:00:17.695+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i dunno, it's hard to predict. that's what i mean by \"fragile\".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093089188565032",source:"discord",createTime:"2022-09-26T23:00:19.192+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"IIRC I have had some thoughts a bit similar to that before (see that github thread) also without success")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093185716264960",source:"discord",createTime:"2022-09-26T23:00:42.206+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see. Just want to have one example in my mind, really cannot imagine.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093242595229708",source:"discord",createTime:"2022-09-26T23:00:55.767+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If there are zero examples then just cannot know what to do/worry with it")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093324241555496",source:"discord",createTime:"2022-09-26T23:01:15.233+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i totally understand that my concerns are unsatisfying")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093413295018065",source:"discord",createTime:"2022-09-26T23:01:36.465+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It's totally OK, I just need some input to know the concerns better")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093459973427231",source:"discord",createTime:"2022-09-26T23:01:47.594+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"such that I can try to figure out a way to solve it if it is a problem")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093518345543880",source:"discord",createTime:"2022-09-26T23:02:01.511+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"let me see if i can think of a good example")),(0,s.kt)(c,{author:"BetoMan0",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093652164808714",source:"discord",createTime:"2022-09-26T23:02:33.416+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I hope I'm not making an oot question: isn't the ",(0,s.kt)("inlineCode",{parentName:"p"},"PreemptBuilder")," proposal trying to solve what Impller also aims to solve? (= remove jank on animations by pre-compiling stuff)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093770687463424",source:"discord",createTime:"2022-09-26T23:03:01.674+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Well seems not. Impeller solves raster thread jank, PreemptBuilder solves build/layout jank in ui thread")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024093830288519188",source:"discord",createTime:"2022-09-26T23:03:15.884+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"One piece of feedback that is actionable is imaging what it would take to make this a plugin.")),(0,s.kt)(c,{author:"BetoMan0",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094034286891028",source:"discord",createTime:"2022-09-26T23:04:04.521+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Clear, thanks!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094077072982107",source:"discord",createTime:"2022-09-26T23:04:14.722+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Yes I also think it is a feasible idea. The "Needed code change" section is about "what needs to change framework/engine"')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094117728354454",source:"discord",createTime:"2022-09-26T23:04:24.415+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Indeed not many changes to framework/engine")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094240365625394",source:"discord",createTime:"2022-09-26T23:04:53.654+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'(That section, plus a few "make file-private function public but do not need to change any real functionality")')),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094300147032204",source:"discord",createTime:"2022-09-26T23:05:07.907+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy so for example, suppose instead of using a Ticker i have an animation that's driven by a Timer. every time it triggers, it changes some global state. then i have many widgets that follow that global state. with your proposal, the sections inside the special widget would not animate fast.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094425309249556",source:"discord",createTime:"2022-09-26T23:05:37.748+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Thanks for the example. However, IIRC "animation by timer" is discouraged?')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094478845358140",source:"discord",createTime:"2022-09-26T23:05:50.512+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So if a user uses a discouraged approach he gets bad results")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094716377174026",source:"discord",createTime:"2022-09-26T23:06:47.144+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"writing a widget tree that takes more than 16ms to build is also discouraged, but we're still trying to help people who do that :-)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094814347726898",source:"discord",createTime:"2022-09-26T23:07:10.502+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Well that is indeed mandatory, because:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094876645728337",source:"discord",createTime:"2022-09-26T23:07:25.355+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024094875139969074/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024094981427839006",source:"discord",createTime:"2022-09-26T23:07:50.337+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"In other words, a dev trying the best to follow Flutter suggestions still may face the build/layout-more-than-16ms problem")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095026596302848",source:"discord",createTime:"2022-09-26T23:08:01.106+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Such as bytedance")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095081659109436",source:"discord",createTime:"2022-09-26T23:08:14.234+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And there are just so many really slow devices in the world indeed")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095218070462504",source:"discord",createTime:"2022-09-26T23:08:46.757+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"it's really important for us that flutter be something thet's predictable and easy to understand")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095238488346654",source:"discord",createTime:"2022-09-26T23:08:51.625+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It is just impossible to be smooth on all slow, slower, slower than slower devices (without the proposal). layout/build really needs some time, and on them it can exceed 16ms")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095261087240192",source:"discord",createTime:"2022-09-26T23:08:57.013+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I totally agree")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095319492927498",source:"discord",createTime:"2022-09-26T23:09:10.938+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"for well-behaved users \ud83d\ude09")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095334672109599",source:"discord",createTime:"2022-09-26T23:09:14.557+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"for everyone")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095389504253952",source:"discord",createTime:"2022-09-26T23:09:27.63+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"because people don't necessarily know what best practices are")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095420172996659",source:"discord",createTime:"2022-09-26T23:09:34.942+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hmm I see")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095464729104465",source:"discord",createTime:"2022-09-26T23:09:45.565+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and they will never be able to learn if they get frustrated with a system that isn't helping them when they're new")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095491954331668",source:"discord",createTime:"2022-09-26T23:09:52.056+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"such that they just give up")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095505627750490",source:"discord",createTime:"2022-09-26T23:09:55.316+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"totally agree")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095555988754572",source:"discord",createTime:"2022-09-26T23:10:07.323+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but I am not very sure will a new learner really use PreemptBuilder?")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095642408198264",source:"discord",createTime:"2022-09-26T23:10:27.927+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"yes, because they'll google around \"how to help slow app\" and they'll find a youtube video that talks about it and they'll try it")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095645210001418",source:"discord",createTime:"2022-09-26T23:10:28.595+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"or should we add some doc to PreemptBuilder saying the care needed")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095696393097246",source:"discord",createTime:"2022-09-26T23:10:40.798+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Ah that is quite reasonable")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095777515118652",source:"discord",createTime:"2022-09-26T23:11:00.139+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"or use the alternative approach you mentioned above - I publish a package about it")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024095870859366500",source:"discord",createTime:"2022-09-26T23:11:22.394+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'then in the package frontpage I can just have a big warning saying "hey don\'t use timers" and so on')),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024096275311894619",source:"discord",createTime:"2022-09-26T23:12:58.823+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'another example would be, suppose there\'s two RenderObjects and they each create a Layer and those Layers know they will always be used together because the RenderObjects are always used together. So they can rely on always existing as a pair and can always read the render object sizes and so on when the layer tree is walked.\nnow suppose one of those RenderObjects is in the "expensive" part of the subtree and the other is in the "fast" part of the subtree.\nor suppose one is in the "expensive" part that got laid out before we interrupted layout, and the other is in the part that got laid out later.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024096669698117732",source:"discord",createTime:"2022-09-26T23:14:32.852+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That looks like a problem as well. But may I know how layers read RO sizes? IIRC layers do not remember ROs")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024096700001955941",source:"discord",createTime:"2022-09-26T23:14:40.077+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"they can do whatevery they want")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024096708373786644",source:"discord",createTime:"2022-09-26T23:14:42.073+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"they're just code")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024096759502344252",source:"discord",createTime:"2022-09-26T23:14:54.263+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That sounds like a problem")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024096931909206077",source:"discord",createTime:"2022-09-26T23:15:35.368+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For expert users who uses custom layers")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097019767304262",source:"discord",createTime:"2022-09-26T23:15:56.315+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'another example would be GlobalKey reparenting. Suppose the section of the subtree on the "fast" branch tries to move a widget from the section of the tree in the "expensive" branch using GlobalKeys.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097112759222282",source:"discord",createTime:"2022-09-26T23:16:18.486+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see, that will definitely not work.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097174142865488",source:"discord",createTime:"2022-09-26T23:16:33.121+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'But IMHO no "animation" requires moving it')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097208724897882",source:"discord",createTime:"2022-09-26T23:16:41.366+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But I agree we should be friendly to all edge cases")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097242690367588",source:"discord",createTime:"2022-09-26T23:16:49.464+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"fundamentally the problem is that your proposal violates some of the core assumptions of the framework")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097318347214929",source:"discord",createTime:"2022-09-26T23:17:07.502+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"such as, that we'll always do a single build/layout/paint/layer/semantics pass per frame")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097323887890462",source:"discord",createTime:"2022-09-26T23:17:08.823+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I agree, it is just the least violation I can find")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097461679173632",source:"discord",createTime:"2022-09-26T23:17:41.675+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'I refine to: per tree per pseudo or real frame. fast tree it is 60fps  pseudo "frame"')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097584370941962",source:"discord",createTime:"2022-09-26T23:18:10.927+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I have also tried other methods and there are previous thoughts about other methods as well, but seem they have drawbacks or cannot work")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097612237906032",source:"discord",createTime:"2022-09-26T23:18:17.571+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'(See "Comparison" chapter)')),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097627605844100",source:"discord",createTime:"2022-09-26T23:18:21.235+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"any time you violate core assumptions, you have to either very carefully think about what the new assumptions should be that we can make sure the entire model follows these new assumptions, or things will become fragile")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097701249425469",source:"discord",createTime:"2022-09-26T23:18:38.793+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"totally agree")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097727258296330",source:"discord",createTime:"2022-09-26T23:18:44.994+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(it's often extremely hard to do this)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097751853695067",source:"discord",createTime:"2022-09-26T23:18:50.858+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"think so :/")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024097948604313632",source:"discord",createTime:"2022-09-26T23:19:37.767+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"the problem with a system like flutter's, which has many years of work already done on it, is that there's a lot of these assumptions and it's easy to just not know about some of them. e.g. i'm sure i don't know them all at this point.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098031194345543",source:"discord",createTime:"2022-09-26T23:19:57.458+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"totally agree about that")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098066111934496",source:"discord",createTime:"2022-09-26T23:20:05.783+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"so should I just make a package and publish to pub.dev?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098110361841734",source:"discord",createTime:"2022-09-26T23:20:16.333+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"with minimal necessary modifications to framework and engine")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098227957547110",source:"discord",createTime:"2022-09-26T23:20:44.37+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"it would be interesting to examine what the minimal changes would need to be")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098292658884628",source:"discord",createTime:"2022-09-26T23:20:59.796+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"mainly this\n",(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024098292314943538/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098298992263278",source:"discord",createTime:"2022-09-26T23:21:01.306+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"the list currently in the doc is probably not minimal enough to justify doing")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098354436767774",source:"discord",createTime:"2022-09-26T23:21:14.525+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Let me think whether it is possible to remove some")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098358949859368",source:"discord",createTime:"2022-09-26T23:21:15.601+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"for example, i definitely don't think we should elevate Tickers in this way")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098456052170792",source:"discord",createTime:"2022-09-26T23:21:38.752+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and adding a hook to every build/layout step is going to be a cost everyone would pay even if they don't use the feature")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098488851636278",source:"discord",createTime:"2022-09-26T23:21:46.572+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"which is probably not something we'd want to do")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098518425681971",source:"discord",createTime:"2022-09-26T23:21:53.623+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"especially when the goal is to make things faster :-)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098613342781450",source:"discord",createTime:"2022-09-26T23:22:16.253+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"May I know why?")),(0,s.kt)(c,{author:"gaaclarke",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098652064595989",source:"discord",createTime:"2022-09-26T23:22:25.485+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"we could potentially allow people to swap out the layout function with zero cost or one layer of indirection at the top of the tree")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098773296758904",source:"discord",createTime:"2022-09-26T23:22:54.389+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I am not expert in compiler, but will it introduce runtime cost if the hook is always null? (Will compiler throw it away)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024098997654278144",source:"discord",createTime:"2022-09-26T23:23:47.88+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Or maybe we can do what @gaaclarke suggests, say create a ",(0,s.kt)("inlineCode",{parentName:"p"},"Renderer.layout(RenderObject ro)")," and I just ",(0,s.kt)("inlineCode",{parentName:"p"},"class MyRenderer extends Renderer"))),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024099008643346502",source:"discord",createTime:"2022-09-26T23:23:50.5+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'flutter\'s tried to follow a "layered" approach, where there are very few "core" components that one ',(0,s.kt)("em",{parentName:"p"},"must")," use. For example, you can use RenderObjects without widgets. You can use widgets without material. You don't have to use WidgetsApp if you don't want to. You don't have to use Tickers if you don't want to. etc.")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024099188079870023",source:"discord",createTime:"2022-09-26T23:24:33.281+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"if there's a way to do that that's zero cost during normal operations, that's worth considering")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024099218941550652",source:"discord",createTime:"2022-09-26T23:24:40.639+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i'm sure lots of packages could benefit from that kind of hook")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024099244610686986",source:"discord",createTime:"2022-09-26T23:24:46.759+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Oh I see maybe I do not explain clearly. We do ",(0,s.kt)("em",{parentName:"p"},"not"),"expose all tickers. We only expose those who are created inside SingleTickerProviderStateMixin")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024099333697716274",source:"discord",createTime:"2022-09-26T23:25:07.999+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"We already let SingleTickerProviderStateMixin to read TickerMode (inherited widget) so looks like we are just doing something mimicking the existing")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024099481597251624",source:"discord",createTime:"2022-09-26T23:25:43.261+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Then maybe I should try that ",(0,s.kt)("inlineCode",{parentName:"p"},"class Renderer")," and report some metrics later")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024099652955553865",source:"discord",createTime:"2022-09-26T23:26:24.116+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"right my point is that TickerMode is just a widget. you don't have to use it. SingleTickerProviderStateMixin is just a tool, you don't have to use it. But if we say that SingleTickerProviderStateMixin now exposes a special API, we're saying it's special in a way that MyCustomSingleTickerProviderStateMixin is not, and can never be.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024099923056132117",source:"discord",createTime:"2022-09-26T23:27:28.513+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sorry I do not quite get it. I am trying to modify SingleTickerProviderStateMixin in a ways that, originally it calls TickerMode (inherited widget), not it calls TickerMode + TickerRegistry (another inherited widget)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100072268501002",source:"discord",createTime:"2022-09-26T23:28:04.088+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024100071861657611/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100104510128158",source:"discord",createTime:"2022-09-26T23:28:11.775+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024100104195551314/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100162844504105",source:"discord",createTime:"2022-09-26T23:28:25.683+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just read an inherited widget, completely mimicking what we do to TickerMode")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100289457958992",source:"discord",createTime:"2022-09-26T23:28:55.87+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(code may not be exactly mimic though if merely looking at the screenshot; but digging down one or two function calls we see it is the same)")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100394659487805",source:"discord",createTime:"2022-09-26T23:29:20.952+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"what would TickerRegistry do?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100497667407953",source:"discord",createTime:"2022-09-26T23:29:45.511+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It knows all tickers in the subtree and created by TickerProviderStateMixin")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100573475242064",source:"discord",createTime:"2022-09-26T23:30:03.585+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"so now if i want to make a new kind of Ticker, how do i register it?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100584325922856",source:"discord",createTime:"2022-09-26T23:30:06.172+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Then in PreemptBuilder (e.g. in 3rd package), we just call all of those tickers's onTick")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100630048022618",source:"discord",createTime:"2022-09-26T23:30:17.073+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"MyCustomTicker, which has no interfaces in common with Ticker")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100633642541117",source:"discord",createTime:"2022-09-26T23:30:17.93+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just like how you register it with TickerMode")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100665053687849",source:"discord",createTime:"2022-09-26T23:30:25.419+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"TickerMode doesn't know about Tickers")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100718237450350",source:"discord",createTime:"2022-09-26T23:30:38.099+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"it just reports a boolean")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100781403668500",source:"discord",createTime:"2022-09-26T23:30:53.159+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and notifies you when it changes")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100875783917618",source:"discord",createTime:"2022-09-26T23:31:15.661+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Then what about making TickerRegistry receive an abstract class (interface) instead of the real Ticker class")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100907262152745",source:"discord",createTime:"2022-09-26T23:31:23.166+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Or , I know it:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100944784392233",source:"discord",createTime:"2022-09-26T23:31:32.112+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just do not let TickerRegistry know the tickers")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024100974077419550",source:"discord",createTime:"2022-09-26T23:31:39.096+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"so then what does it do?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024101064686964776",source:"discord",createTime:"2022-09-26T23:32:00.699+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Instead, let it (maybe w/a rename) provide ",(0,s.kt)("inlineCode",{parentName:"p"},"addListenerWhenOtherPartsOfSystemWantsToCallAnExtraOnTick"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024101626698539008",source:"discord",createTime:"2022-09-26T23:34:14.693+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So now the MyCustomTicker (not extend/implement Ticker) is happy")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102166685810788",source:"discord",createTime:"2022-09-26T23:36:23.436+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'e.g. named "ExtraOnTickProvider"')),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102321807962112",source:"discord",createTime:"2022-09-26T23:37:00.42+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"basically this makes ExtraOnTickProvider a special class")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102410123235438",source:"discord",createTime:"2022-09-26T23:37:21.476+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"May I know why it is special?")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102507795984425",source:"discord",createTime:"2022-09-26T23:37:44.763+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"anyone who wants to participate in this model has to make sure they can express their animation logic as an ExtraOnTickProvider")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102645742448741",source:"discord",createTime:"2022-09-26T23:38:17.652+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Well, again, is there real examples who create CustomTicker unrelated to real ticker logic...")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102696946516028",source:"discord",createTime:"2022-09-26T23:38:29.86+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If so he must be an expert")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102741120925706",source:"discord",createTime:"2022-09-26T23:38:40.392+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And experts should understand how PreemptBuilder works \ud83d\ude09")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102798188621834",source:"discord",createTime:"2022-09-26T23:38:53.998+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"as we talked about before, that's not a safe line of reasoning")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102871257600000",source:"discord",createTime:"2022-09-26T23:39:11.419+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"non-experts will be exposed to all APIs")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102889448292452",source:"discord",createTime:"2022-09-26T23:39:15.756+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I totally agree we should be friendly to new users watching a youtube video")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102918510628965",source:"discord",createTime:"2022-09-26T23:39:22.685+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'"only experts will use it" is never a valid way to design APIs')),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102952761294908",source:"discord",createTime:"2022-09-26T23:39:30.851+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"because everyone is a non-expert the first time they use an API")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102959820329082",source:"discord",createTime:"2022-09-26T23:39:32.534+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Well, ok :/")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024102999833976892",source:"discord",createTime:"2022-09-26T23:39:42.074+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I just mean not sure who will really need this")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103027008876645",source:"discord",createTime:"2022-09-26T23:39:48.553+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Ok then let me think about other ways to expose Tickers")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103048324325467",source:"discord",createTime:"2022-09-26T23:39:53.635+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"fwiw i think this is something we could have done from the beginning, basically instead of the animation phase which relies on scheduleMicrotask as the special magic, we would have a registry of OnTickProviders that provide the special magic")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103140032786492",source:"discord",createTime:"2022-09-26T23:40:15.5+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Totally agree. But seems we can never change it today? \ud83d\ude26")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103199172481195",source:"discord",createTime:"2022-09-26T23:40:29.6+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but having now gone the former route, moving to the latter route either means having extra complexity (because we have both), or means taking on the rather large task of migrating the entire ecosystem to the new mechanism")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103251148296215",source:"discord",createTime:"2022-09-26T23:40:41.992+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"sometimes we have done that kind of thing")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103328281530468",source:"discord",createTime:"2022-09-26T23:41:00.382+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I can contribute")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103371348643850",source:"discord",createTime:"2022-09-26T23:41:10.65+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"e.g. at one point State.widget was called State.config and someone (i forget who?) renamed it and basically migrated the entire ecosystem to the new name")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103413354606634",source:"discord",createTime:"2022-09-26T23:41:20.665+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but that was a long time ago and the ecosystem is much bigger now")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103436008038440",source:"discord",createTime:"2022-09-26T23:41:26.066+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"that's true")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103468199325696",source:"discord",createTime:"2022-09-26T23:41:33.741+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(and congratulations!)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103521924153354",source:"discord",createTime:"2022-09-26T23:41:46.55+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So what about this:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103679156031509",source:"discord",createTime:"2022-09-26T23:42:24.037+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Change ",(0,s.kt)("inlineCode",{parentName:"p"},"SingleTickerProviderStateMixin.createTicker")," . Do not ",(0,s.kt)("inlineCode",{parentName:"p"},"ticker = Ticker()"),". But instead ",(0,s.kt)("inlineCode",{parentName:"p"},"ticker = TickerProviderConfigInheritedWidget.of(context).createTicker()"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103730611765269",source:"discord",createTime:"2022-09-26T23:42:36.305+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"In other words, we have a new TickerProviderConfigInheritedWidget")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103772349268000",source:"discord",createTime:"2022-09-26T23:42:46.256+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"it just configures how TickerProviderStateMixin create tickers")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103883447992392",source:"discord",createTime:"2022-09-26T23:43:12.744+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"SingleTickerProviderStateMixin.createTicker is not the only way animation triggers are created")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103900111966298",source:"discord",createTime:"2022-09-26T23:43:16.717+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"When there is no such inherited widget, just do the old logic: ",(0,s.kt)("inlineCode",{parentName:"p"},"new Ticker()"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103946194792499",source:"discord",createTime:"2022-09-26T23:43:27.704+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"May I know what are the others?")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024103979770187846",source:"discord",createTime:"2022-09-26T23:43:35.709+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Timer.periodic, for example")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024104005011521567",source:"discord",createTime:"2022-09-26T23:43:41.727+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That just will not be supported")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024104032610025522",source:"discord",createTime:"2022-09-26T23:43:48.307+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Streams are another")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024104109877514261",source:"discord",createTime:"2022-09-26T23:44:06.729+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Since these logic are in my 3rd party package I guess it is not a huge problem")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024104151552098364",source:"discord",createTime:"2022-09-26T23:44:16.665+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'just write down "Stream and Timer are not supported" in README')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024104160607600713",source:"discord",createTime:"2022-09-26T23:44:18.824+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"of the 3rd package")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024104183349137479",source:"discord",createTime:"2022-09-26T23:44:24.246+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"yeah it's a lot easier if it's a package than the core framework")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024104264781533254",source:"discord",createTime:"2022-09-26T23:44:43.661+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And also easier to upgrade as well (no need to wait 3mo for next stable flutter if someone sees a bug)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024104609725304965",source:"discord",createTime:"2022-09-26T23:46:05.902+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024104609570111579/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024104671264133150",source:"discord",createTime:"2022-09-26T23:46:20.574+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So looks like my next step is to create these 4 PRs to Flutter?")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024106444519378995",source:"discord",createTime:"2022-09-26T23:53:23.351+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i think for each one we should carefully consider if there are potentially better ways to approach it")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024106489327144971",source:"discord",createTime:"2022-09-26T23:53:34.034+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure \ud83d\ude42")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024106499150188634",source:"discord",createTime:"2022-09-26T23:53:36.376+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but that's definitely more tractable than the earlier list :-)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024106772501381201",source:"discord",createTime:"2022-09-26T23:54:41.548+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Feel free to raise any potential problems and I will try to fix them")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024107442717610034",source:"discord",createTime:"2022-09-26T23:57:21.34+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i haven't studied the engine changes yet")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024107476917960734",source:"discord",createTime:"2022-09-26T23:57:29.494+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i'm still looking at the ticker one :-)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024107550221799464",source:"discord",createTime:"2022-09-26T23:57:46.971+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see, take your time \ud83d\ude42")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024107596245913750",source:"discord",createTime:"2022-09-26T23:57:57.944+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"the problem you're trying to solve is, how to cause CircularProgressIndicator to tick, even though we haven't had an animation phase, right?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024107640378380288",source:"discord",createTime:"2022-09-26T23:58:08.466+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"yes")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024107798801420289",source:"discord",createTime:"2022-09-26T23:58:46.237+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and _CircularProgressIndicatorState uses an AnimationController with a Ticker created from a SingleTickerProviderStateMixin")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024107862387077230",source:"discord",createTime:"2022-09-26T23:59:01.397+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"yes just like that")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024107942397624410",source:"discord",createTime:"2022-09-26T23:59:20.473+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and ticker uses SchedulerBinding.instance.scheduleFrameCallback")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024107969845153903",source:"discord",createTime:"2022-09-26T23:59:27.017+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"interesting")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024107976316948641",source:"discord",createTime:"2022-09-26T23:59:28.56+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"exactly")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024108232165298196",source:"discord",createTime:"2022-09-27T00:00:29.559+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and the problem is that after you render your interrupted frame, you want to rerun all the newly scheduled frame callbacks, so that when you repaint this widget, it ends up advanced a little...")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024108290042511381",source:"discord",createTime:"2022-09-27T00:00:43.358+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"not all indeed")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024108320505745500",source:"discord",createTime:"2022-09-27T00:00:50.621+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"only those in second tree")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024108389812416632",source:"discord",createTime:"2022-09-27T00:01:07.145+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"that's why I make inherited widget - I put one at root of second tree")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024108420338569300",source:"discord",createTime:"2022-09-27T00:01:14.423+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"ah, even trickier")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024108458020192396",source:"discord",createTime:"2022-09-27T00:01:23.407+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"because I do not want to disturb the main tree")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024109403772817458",source:"discord",createTime:"2022-09-27T00:05:08.892+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i certainly see why you gravitate to a way to create and/or register tickers via inherited widget")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024109750171996180",source:"discord",createTime:"2022-09-27T00:06:31.48+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"ironically it would be easier to solve if you wanted to just call the scheduled frame callbacks of every animation")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024109862306717736",source:"discord",createTime:"2022-09-27T00:06:58.215+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I agree. But that will cause trouble since main tree will receive extra ontick")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024110139214659585",source:"discord",createTime:"2022-09-27T00:08:04.235+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"because then you could just create a new binding...")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024110145069920256",source:"discord",createTime:"2022-09-27T00:08:05.631+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"hmm")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024110193379917854",source:"discord",createTime:"2022-09-27T00:08:17.149+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"hmm looks hard to make two bindings and let things in second subtree smartly register to second binding")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024110474373103646",source:"discord",createTime:"2022-09-27T00:09:24.143+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"yeah the binding logic knows nothing about the trees")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024110832168214538",source:"discord",createTime:"2022-09-27T00:10:49.448+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"yeah i dunno how to do this efficiently. i don't think we want to change SingleTickerProviderStateMixin et al to register their tickers, that seems like a lot of cycles spent that most people would never get to benefit from. (That said, if you can find a way to hook into layout cheaply, maybe we can expose a hook for SingleTickerProviderStateMixin too?)")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024110852636430376",source:"discord",createTime:"2022-09-27T00:10:54.328+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"tell me more about the engine changes?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024111451163594833",source:"discord",createTime:"2022-09-27T00:13:17.028+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"a lot of cycles spent that most people would never get to benefit from. (That said, if you can find a way to hook into layout cheaply, maybe we can expose a hook for SingleTickerProviderStateMixin too?)\nI will experiment to see whether performance regresses"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024111575386308628",source:"discord",createTime:"2022-09-27T00:13:46.645+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So, is it enough to see benchmarks built into flutter repository? If they do not regress are we safe")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024111658307682354",source:"discord",createTime:"2022-09-27T00:14:06.415+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i mean to be clear, performance will definitely regress if we do more work, even if we can't measure it")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024111707708198943",source:"discord",createTime:"2022-09-27T00:14:18.193+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"That's definitely true")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024111813605994516",source:"discord",createTime:"2022-09-27T00:14:43.441+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"we can't just add code that doesn't measurably affect benchmarks because if we did that 100 times then we would have moved the benchmarks")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024111972213587979",source:"discord",createTime:"2022-09-27T00:15:21.256+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"totally agree. what about this: we just have a global flag, ",(0,s.kt)("inlineCode",{parentName:"p"},"enableTickerConfig"),". If it is false, do the old thing. If it is true, read Inherited Widget")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024112035597926400",source:"discord",createTime:"2022-09-27T00:15:36.368+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'And in my 3rd party package, one setup step is "set enableTickerConfig=true"')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024112063758479410",source:"discord",createTime:"2022-09-27T00:15:43.082+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"and by default false")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024112283581960232",source:"discord",createTime:"2022-09-27T00:16:35.492+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Or, we just do not call inherited widget at all")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024112371339378708",source:"discord",createTime:"2022-09-27T00:16:56.415+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"we call a function, say: ",(0,s.kt)("inlineCode",{parentName:"p"},"Ticker Function(BuildContext context, VoidCallback onTick) tickerCreator = (_, onTick) => Ticker(onTick)"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024112470375280690",source:"discord",createTime:"2022-09-27T00:17:20.027+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"it by default is nothing but ",(0,s.kt)("inlineCode",{parentName:"p"},"Ticker.new"),", and we can set it to read the inherited widget\nAnd I guess compilers may even inline it, if that createTheTicker is never setted?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024112582707122206",source:"discord",createTime:"2022-09-27T00:17:46.809+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It is in the screenshot. I can explain more if something is unclear")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024113031086616576",source:"discord",createTime:"2022-09-27T00:19:33.711+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Indeed we are unconditionally reading inherited widget (b/c the TickerMode) whenever we create one Ticker.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024113099554422905",source:"discord",createTime:"2022-09-27T00:19:50.035+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"And I guess reading inh widget is much much more expensive that a function call that can possibly be inlined")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024113138653728899",source:"discord",createTime:"2022-09-27T00:19:59.357+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Though I know a little accumulates to a lot")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024113568653787176",source:"discord",createTime:"2022-09-27T00:21:41.877+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Or, for absolutely zero overhead: Maybe enable it by ",(0,s.kt)("inlineCode",{parentName:"p"},"bool.fromEnvironement")," flag. IIRC those are compile time constants, and compilers will just handle them at compile time. for example, ",(0,s.kt)("inlineCode",{parentName:"p"},"kDebugMode ? heavy_work : cheap_work"),", the heavy_work seems even not in the final binary")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024113718134591540",source:"discord",createTime:"2022-09-27T00:22:17.516+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Users of the 3rd party package will need ",(0,s.kt)("inlineCode",{parentName:"p"},"--dart-define=enableTheTickerConfig=true")," or something like that. And other users have exactly zero overhead.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024115109544607785",source:"discord",createTime:"2022-09-27T00:27:49.254+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hope this is a bit clearer:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024115484305666078",source:"discord",createTime:"2022-09-27T00:29:18.604+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024115483961741333/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024130227619778651",source:"discord",createTime:"2022-09-27T01:27:53.684+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i meant tell me more about why those specific changes")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024130371710890085",source:"discord",createTime:"2022-09-27T01:28:28.038+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"it sounds like what you are trying to do is allow frames to be rendered from a different callback than the one that asked for it, right?")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024130609565667420",source:"discord",createTime:"2022-09-27T01:29:24.747+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"hm, this is another one of those cases where there's some pretty fundamental assumptions built into the system that we would be breaking here, and need to think very carefully about")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024130786766631002",source:"discord",createTime:"2022-09-27T01:30:06.995+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"that has the problem of being hard to test (we would need to run all the tests for every combination of these flags, which gets exponentially expensive)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024132284158312509",source:"discord",createTime:"2022-09-27T01:36:04.001+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see the problem. What about this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"bool? debugOverrideTheFlag;\nbool get theFlag {\n  var ans;\n  assert(() => ans = debugOverrideTheFlag);\n  return ans ?? bool.fromEnvironment('the.flag');\n}\n")),(0,s.kt)("p",null,"It has zero overhead in release (given it is just a compile time constant). And it has testability (just debugOverrideTheFlag)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024133369837137931",source:"discord",createTime:"2022-09-27T01:40:22.847+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024133369568690186/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024133377101672468",source:"discord",createTime:"2022-09-27T01:40:24.579+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'"Why" added to the doc now')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024133451269550120",source:"discord",createTime:"2022-09-27T01:40:42.262+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I guess no? i.e. I do not violate it?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024133679653588992",source:"discord",createTime:"2022-09-27T01:41:36.713+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I am still calling window.render inside the BeginFrame callback, because the preemptRender is a function called from build/layout functions which is called from BeginFrame. I just call it multiple times (instead of one time).")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024133765431316491",source:"discord",createTime:"2022-09-27T01:41:57.164+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So I guess I do not break this")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024136073657450516",source:"discord",createTime:"2022-09-27T01:51:07.488+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"but then presumably we would not call it for the next actual BeginFrame, right? since we'd have already done it")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024136184932352010",source:"discord",createTime:"2022-09-27T01:51:34.018+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'May I know what is "it"?')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024136335130361898",source:"discord",createTime:"2022-09-27T01:52:09.828+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'If "it" is "Produce", then that still calls in next BeginFrame')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024136418378924042",source:"discord",createTime:"2022-09-27T01:52:29.676+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"The logic is, at Render, when we see no continuation (this happens when one BeginFrame has two window.render), originally we just halt early")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024136520992575548",source:"discord",createTime:"2022-09-27T01:52:54.141+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But now, when this case, we add one extra continuation via Produce().")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024136664349687808",source:"discord",createTime:"2022-09-27T01:53:28.32+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"We will finish this Produce() just a few lines below. So in next BeginFrame we need to Produce() again (for the next frame's Render)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024136887591514272",source:"discord",createTime:"2022-09-27T01:54:21.545+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024136887214014484/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024136916104392804",source:"discord",createTime:"2022-09-27T01:54:28.343+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'the blue-highlighted lines are "finish the Produce continuation" logic')),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024136960899567618",source:"discord",createTime:"2022-09-27T01:54:39.023+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"it=window.render")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137011302502531",source:"discord",createTime:"2022-09-27T01:54:51.04+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Oh, then we still call it in the next frame")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137100167221269",source:"discord",createTime:"2022-09-27T01:55:12.227+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Because in my proposal, one plain-old frame will have zero to many extra smooth window.render")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137140361240577",source:"discord",createTime:"2022-09-27T01:55:21.81+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"But that plain-old frame is just there. It runs normal full pipeline")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137168685379584",source:"discord",createTime:"2022-09-27T01:55:28.563+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"including window.render inside that pipeline")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137406049435719",source:"discord",createTime:"2022-09-27T01:56:25.155+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'oh I see, we just skip the BeginFrame for "missed" frames that this would partially render')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137593618698300",source:"discord",createTime:"2022-09-27T01:57:09.875+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If a frame is missed, the whole pipeline just do not execute, and the proposed PreemptBuilder etc also do not execute")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137629689716866",source:"discord",createTime:"2022-09-27T01:57:18.475+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'how can we know the right timestamp for the "fast" frames if we don\'t get the BeginFrame call?')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137698476302467",source:"discord",createTime:"2022-09-27T01:57:34.875+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"via the last PR among the four: Get latest vsync data")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137756382859304",source:"discord",createTime:"2022-09-27T01:57:48.681+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Indeed only need to read "what is the latest vsync data" once per 16ms')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137893574357014",source:"discord",createTime:"2022-09-27T01:58:21.39+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw I have confirmed the time is correct in the experiment analysis section")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024137927833440266",source:"discord",createTime:"2022-09-27T01:58:29.558+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024137927216857169/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024138032749744200",source:"discord",createTime:"2022-09-27T01:58:54.572+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"in this (photos from a camera mp4 video), we can see the animation is of equal distance")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024138098642276402",source:"discord",createTime:"2022-09-27T01:59:10.282+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"i.e. the arrow shifts the same distance in each frame")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024138216799997952",source:"discord",createTime:"2022-09-27T01:59:38.453+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If we have the wrong vsync info (or use something like DateTime.now), then we will see the distance not equal at all")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024140695809826857",source:"discord",createTime:"2022-09-27T02:09:29.495+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"how would the system be notified that it had changed?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024140751023648778",source:"discord",createTime:"2022-09-27T02:09:42.659+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just no notification")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024140779943362630",source:"discord",createTime:"2022-09-27T02:09:49.554+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"preemptRender read it and it works well")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024140871387590716",source:"discord",createTime:"2022-09-27T02:10:11.356+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Indeed there cannot be notifications - because UI thread is fully busy and PostTask to UI thread will not work at all")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024141682377236500",source:"discord",createTime:"2022-09-27T02:13:24.711+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If I understand correctly, compiler explorer says this works well with zero overhead:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024141725024923688",source:"discord",createTime:"2022-09-27T02:13:34.879+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024141724576137216/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024141736479567913",source:"discord",createTime:"2022-09-27T02:13:37.61+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://godbolt.org/z/bGoePGqYb"},"https://godbolt.org/z/bGoePGqYb"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024141907414224978",source:"discord",createTime:"2022-09-27T02:14:18.364+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"In the first example (with proposed Dart code), the heavyFunction is even not compiled into the binary. In the second example (just as a comparison), the heavyFunction is compiled and conditionally called.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024142009054789632",source:"discord",createTime:"2022-09-27T02:14:42.597+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"In other words, my proposed Dart writing seems to be (1) zero overhead (2) easily testable.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024147790177247292",source:"discord",createTime:"2022-09-27T02:37:40.924+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For the RenderObject.layout thing")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024147810423148684",source:"discord",createTime:"2022-09-27T02:37:45.751+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1024147810066636810/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024147823047999488",source:"discord",createTime:"2022-09-27T02:37:48.761+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://godbolt.org/z/r433E75Tx"},"https://godbolt.org/z/r433E75Tx"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024148018682937395",source:"discord",createTime:"2022-09-27T02:38:35.404+00:00",mdxType:"DiscussionComment"},(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I do see one extra function call (from RenderObject.layout to Renderer.layout)"),(0,s.kt)("li",{parentName:"ol"},"If that is acceptable we are done; otherwise, we may enable it conditionally via zero-overhead flag just like mentioned above, then we have exactly zero cost"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112436",source:"github",createTime:"2022-09-27T03:32:04Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"exposing-hook-about-tickers-with-zero-overhead"},"Exposing hook about tickers with zero overhead"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This PR is a part for implementing the 60fps smooth rendering (#101227)."),(0,s.kt)("p",null,"Some discussions can be seen in Discord, such as around ",(0,s.kt)("a",{parentName:"p",href:"https://discordapp.com/channels/608014603317936148/608021234516754444/1024141682377236500"},"https://discordapp.com/channels/608014603317936148/608021234516754444/1024141682377236500"),"."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue."),"\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227"},"https://github.com/flutter/flutter/issues/101227")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("p",null,"P.S. Not sure what naming do you like, so just put a very long (temporary) variable name here :)"),(0,s.kt)("h2",{id:"pre-launch-checklist"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112437",source:"github",createTime:"2022-09-27T03:53:22Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"exposing-hook-for-renderobjectlayout-with-zero-overhead"},"Exposing hook for RenderObject.layout with zero overhead"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Remark:")," This PR has less priority compared with the other two (",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36438"},"https://github.com/flutter/engine/pull/36438"),", ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/112436"},"https://github.com/flutter/flutter/pull/112436"),"), because this one can be workaround, while the other two are really mandatory to implement PreemptBuilder."),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This PR is a part for implementing the 60fps smooth rendering (#101227)."),(0,s.kt)("p",null,"Some discussions can be seen in Discord, such as around ",(0,s.kt)("a",{parentName:"p",href:"https://discordapp.com/channels/608014603317936148/608021234516754444/1024141682377236500"},"https://discordapp.com/channels/608014603317936148/608021234516754444/1024141682377236500"),"."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue."),"\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227"},"https://github.com/flutter/flutter/issues/101227")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-1"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024167126942105601",source:"discord",createTime:"2022-09-27T03:54:31.168+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"P.S. Two PRs about the framework change is created: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/112436"},"https://github.com/flutter/flutter/pull/112436"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024167172525789276",source:"discord",createTime:"2022-09-27T03:54:42.036+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/112437"},"https://github.com/flutter/flutter/pull/112437"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-27T05:49:30Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"allow-render-to-be-called-multiple-times-for-one-beginframe"},"Allow render to be called multiple times for one BeginFrame"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This PR is a part for implementing the 60fps smooth rendering (#101227)."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue."),"\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227"},"https://github.com/flutter/flutter/issues/101227")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("p",null,'The only change is an "if" as follows (all else are just tests)'),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/192693744-86842381-384b-4a81-97b6-9988767a871e.png",alt:"image"})),(0,s.kt)("h2",{id:"pre-launch-checklist-2"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),"."),(0,s.kt)("p",null,"By the way, the tests and code does work: If I comment out the code, the tests fail."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/192442910-0fd05944-98b2-4272-9dc1-8c01308ab203.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/192442965-c2fb185e-8fa3-4e67-8eec-a627dcbe3ffe.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024196289883295774",source:"discord",createTime:"2022-09-27T05:50:24.155+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"... and ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36438"},"https://github.com/flutter/engine/pull/36438"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgkxeeuk",source:"google_doc_comments",createTime:"2022-09-27T13:38:33.735Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Ah sorry I did not see all your questions! I only see the last, and when viewing the second-last I see my avatar so wrongly think all things below have been answered...")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgkxeeuo",source:"google_doc_comments",createTime:"2022-09-27T13:39:08.205Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"We do not resume or retry. We just ",(0,s.kt)("em",{parentName:"p"},"call")," preemptRender function as any normal function call, and just ",(0,s.kt)("em",{parentName:"p"},"return")," from it. So zero cost.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAgkxeeus",source:"google_doc_comments",createTime:"2022-09-27T13:41:58.686Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I have not done thorough experiments (e.g. ListView scrolling) so cannot give a conclusion now. But it seems this package will cover all cases with less drawbacks and better performance, by solving the problem in a different approach.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024316520681193533",source:"discord",createTime:"2022-09-27T13:48:09.411+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@gaaclarke I replied to all your questions now in google doc (Sorry I did not see all your questions this morning... I only see the last, and when viewing the second-last I see my reply there so wrongly think all things below have been answered)")),(0,s.kt)(c,{author:"Callum",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024342539043618926",source:"discord",createTime:"2022-09-27T15:31:32.672+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Any sliver expert: Is it expected to provide a custom ",(0,s.kt)("inlineCode",{parentName:"p"},"SliverChildDelegate")," for good performance? Since with the default ",(0,s.kt)("inlineCode",{parentName:"p"},"SliverChildBuilderDelegate"),", all the children will be rebuilt if the parent is rebuilt.")),(0,s.kt)(c,{author:"Hixie",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024350872362307674",source:"discord",createTime:"2022-09-27T16:04:39.49+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Callum only the visible children, iirc, right?")),(0,s.kt)(c,{author:"Callum",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024374605038755942",source:"discord",createTime:"2022-09-27T17:38:57.801+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Yeah that's true. For reasons, I have both pages rebuild during page pop, so the frame drop was quite noticeable. Both lists didn't need to rebuild as no change in the content, it's a good feature that was not immediately obvious.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024377142932414596",source:"discord",createTime:"2022-09-27T17:49:02.882+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I'd be really surprised if there is a significant framedrop from ",(0,s.kt)("em",{parentName:"p"},"just")," rebuilding widgets. Do you have some sample code I could look at? I've been looking at scrolling performance issues the last couple of weeks, usually what goes wrong is folks accidentally making the entire list render (even offscreen) and that can be quite slow")),(0,s.kt)(c,{author:"Callum",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024387703472672889",source:"discord",createTime:"2022-09-27T18:31:00.711+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"The list items are quite complex paragraphs, during scrolling it can be okay to have 1-2ms build times. But if 24 of them build at once (12 on each page) during the page pop, it's going to drop frames.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024388172458754068",source:"discord",createTime:"2022-09-27T18:32:52.526+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"what sort of device are you running on?")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024388955447230515",source:"discord",createTime:"2022-09-27T18:35:59.205+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"also, if its the same paragraph, the layout should be cached in the engine")),(0,s.kt)(c,{author:"Callum",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024402830196477972",source:"discord",createTime:"2022-09-27T19:31:07.203+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just looked into it, my paragraphs aren't getting cached because of my use of WidgetSpan, unless it's the exact same Widget, the paragraph gets re-laid-out.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024405284246007818",source:"discord",createTime:"2022-09-27T19:40:52.294+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"oh, well that seems like a footgun")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024405328688857160",source:"discord",createTime:"2022-09-27T19:41:02.89+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"do you mind filling a bug on that? We should figure out how to make that work...")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024451329030103060",source:"discord",createTime:"2022-09-27T22:43:50.226+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Good morning/evening friends! Three (small) PRs are created yesterday, with tests and green CI: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/112436"},"https://github.com/flutter/flutter/pull/112436"),", ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/112437"},"https://github.com/flutter/flutter/pull/112437"),", ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36438"},"https://github.com/flutter/engine/pull/36438"),". May I get a little bit review \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-28T05:10:55Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Not sure whether I should "@" some people here, maybe @dnfield @jonahwilliams @gaaclarke @flar engine experts?'),(0,s.kt)("p",null,"May I get a code review, thanks :)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-28T05:43:21Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Hi, thanks for the quick reply :)"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The documentation on FlutterView.render specifies when it is safe/allowed to call render.")),(0,s.kt)("p",null,"I will change that doc accordingly (probably after we come to a conclusion what should be done for this PR)"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I'm not quite clear on how this will affect the pipeline - it seems like it will now be trivial for a dart:ui application to flood the pipeline if we remove guardrails around when you can call render. Today the contract is that the application can expect that it's time to call render because it got a call to onBeginFrame. In this world, the application calls render whenever it thinks it has been working too long and might want to give an update. But the application doesn't know about vsync and it will be very hard to reason about why render is getting called if we make this change.\nI don't think we should make this change. It too easily allows wasted work to happen.")),(0,s.kt)("p",null,"Firstly, IMHO, a normal flutter app calls ",(0,s.kt)("inlineCode",{parentName:"p"},"window.render")," once per frame, so no problem at all for all existing app."),(0,s.kt)("p",null,"Secondly, in my proposal (",(0,s.kt)("inlineCode",{parentName:"p"},"Preempt for 60 FPS"),"), I do observe vsync (using VsyncAwaiter class), and only submit one ",(0,s.kt)("inlineCode",{parentName:"p"},"window.render"),' per vsync. Therefore, "But the application doesn\'t know about vsync" seems not to be the situation, and thus "it will be very hard to reason about why render is getting called" is also no problem.'),(0,s.kt)("p",null,"That said, I do agree that, if the rasterizer thread takes too long (e.g. takes 50ms for one rasterize), it is a waste to submit a Scene per 16.6ms (but should submit per 50ms)."),(0,s.kt)("p",null,"If this is still a problem for you, can I change as follows: Add a flag to ",(0,s.kt)("inlineCode",{parentName:"p"},"window.render"),", say, ",(0,s.kt)("inlineCode",{parentName:"p"},"window.render({bool onlyRenderOncePerBeginFrame = true})"),". Then the behavior will be exactly the same, except for someone who really needs this (e.g. the Preempt proposal)."),(0,s.kt)("p",null,"In addition, given it is a so low-level API that most people will never touch, it seems reasonable to provide some flexibility to it.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-28T10:06:35Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Another possibility for Dart code to understand the queue is full so it do not do anything more:"),(0,s.kt)("p",null,"Add this 4-line function:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c++"},"// return: whether it is prepared successfully. If return false, it means pipeline is full, \n// and thus the user should not really compute the Scene to avoid unnecessary work.\nbool Animator::PrepareExtraRender() {\n  if (!producer_continuation_) {\n    producer_continuation_ = layer_tree_pipeline_->Produce();\n  }\n  return static_cast<bool>(producer_continuation_);\n}\n")),(0,s.kt)("p",null,"usage:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"realize_next_vsync_comes; // see the design for details https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit\nvar prepared = window.prepareExtraRender();\nif (prepared) {\n  ui.Scene scene = compute_the_scene();\n  window.render(scene);\n} else {\n  // do not do anything since the rasterizer queue is already so full\n  // this mimic the behavior of Animator::BeginFrame, where we skip the current frame if it is full\n}\n"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-28T10:15:48Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@dnfield ... be trivial for a dart:ui application to flood the pipeline ...")),(0,s.kt)("p",null,"IMHO the pipeline seems not to be flooded - it has depth 2. In other words, even if we call ",(0,s.kt)("inlineCode",{parentName:"p"},"window.render(scene)")," a million times within a frame, only the first two scenes will be in the queue, and the rest 999998 will just be thrown away (suppose rasterizer has not processed any). So we are still safe."),(0,s.kt)("p",null,"For a dart:ui application, if needed, it can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"window.prepareExtraRender")," extra call to see whether the queue is already full, to avoid generating scene etc (just like example above)."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Today the contract is that the application can expect that it's time to call render because it got a call to onBeginFrame. In this world, the application calls render whenever it thinks it has been working too long and might want to give an update.")),(0,s.kt)("p",null,"Just as mentioned above, adding a flag like ",(0,s.kt)("inlineCode",{parentName:"p"},"window.render({bool onlyRenderOncePerBeginFrame = true})"),' seems to solve the "contract" problem.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-28T10:16:30Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Oops sorry @chinmaygarde and @iskakaushik I just clicked the "Icons.refresh" on dnfield and do not know why github remove review requests to you...')),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024736265033224252",source:"discord",createTime:"2022-09-28T17:36:04.263+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Probably we can avoid it if we figure out the widget span has the same dimensions as last time... But If it won't or we can't figure it out the text layout may have changed.")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024736708530540697",source:"discord",createTime:"2022-09-28T17:37:50.001+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Reviews typically happen once per week during triage meetings. I've looked at some of these PRs already though and there seems to be some missing context here. These changes don't seem quite safe on their own, and it's still not clear to me what's the bigger picture app that they fix. I think we've talked about having a sample application or benchmark that shows what you're improving - is that available (even if it requires some special patches to the engine or framework to run, that's ok)")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024736793758806026",source:"discord",createTime:"2022-09-28T17:38:10.321+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I'll say right now though that, in their current form and without extra support, these patches are unlikely to land anytime soon.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024819573729525821",source:"discord",createTime:"2022-09-28T23:07:06.604+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hi, for sample app, with video + full code + brief code + benchmark + analysis, please have a look at ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit#"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit#"),', the new "Experiments" chapter')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112436",source:"github",createTime:"2022-09-28T23:10:08Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks, I did discussed with Hixie on discord and wrongly thought that public discussion was enough. I will fill all those contents in a few hours.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024820680866414622",source:"discord",createTime:"2022-09-28T23:11:30.566+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'I will let it not be "in their current form" by providing extra support doc now \ud83d\ude42 Will tell you when finished (probably in a few hours)')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024822948286185502",source:"discord",createTime:"2022-09-28T23:20:31.161+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"By the way, those two PRs are the most important (i.e. package cannot exist without them), so if you are busy please ignore my other PRs currently")),(0,s.kt)(c,{author:"dnfield",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAhGPCXpU",source:"google_doc_comments",createTime:"2022-09-28T23:21:09.174Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Other things need time on this thread, for example GC.")),(0,s.kt)(c,{author:"dnfield",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAhGPCXpY",source:"google_doc_comments",createTime:"2022-09-28T23:21:57.199Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I'm saying that a ",(0,s.kt)("em",{parentName:"p"},"single")," layout function might take too long and your preempt call will come too late.")),(0,s.kt)(c,{author:"dnfield",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAhGPCXpg",source:"google_doc_comments",createTime:"2022-09-28T23:27:19.384Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth/blob/master/packages/smooth/example/lib/main.dart#L165"},"https://github.com/fzyzcjy/flutter_smooth/blob/master/packages/smooth/example/lib/main.dart#L165")," is a good chunk of the hard part. I'm not really clear from this document how that would automatically get inserted in meaningful places without breaking a lot of things.")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024824746661122080",source:"discord",createTime:"2022-09-28T23:27:39.927+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Added a couple more comments.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112436",source:"github",createTime:"2022-09-28T23:28:24Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield "),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"What is the big picture that it fixes?")),(0,s.kt)("p",null,"The ultimate goal is, let the app run smoothly at 60FPS, even if it has heavy subtree that is very slow to build/layout. In other words, the design doc: ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko")),(0,s.kt)("p",null,'It already has a working demo. See the (new) "experiments" chapter, with a video, screenshots, full code, brief code, benchmark, analysis.'),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"What's the main goal you're trying to achieve with this particular change?")),(0,s.kt)("p",null,"In order to solve that big goal, we must let animation callbacks run at 60FPS even if the whole tree is very slow to build/layout. Otherwise, even if we refresh a subtree by 60FPS, anything like CircularProgressIndicator, FooTransition, or manual AnimationController will all never be smooth, because they do not see new timestamp at 60FPS."),(0,s.kt)("p",null,"Then, to fire (extra) animation callbacks, a natural solution is to work with the ",(0,s.kt)("inlineCode",{parentName:"p"},"Ticker"),"s. Originally, ",(0,s.kt)("inlineCode",{parentName:"p"},"Ticker"),"s are fired once per frame. But now, we also extra fire it (with proper timestamp) in each 60FPS smooth extra frame."),(0,s.kt)("p",null,"Lastly, to fire extra events to ",(0,s.kt)("inlineCode",{parentName:"p"},"Ticker"),"s , we must know the existence of Tickers in the auxiliary widget subtree (no need for Tickers in the main subtree since they should not be fired at 60FPS). That is why I added a callback when Tickers are created - then I can record it such that to fire extra ticks."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Why is it doing it this way?")),(0,s.kt)("p",null,"Why it is a compile time flag ",(0,s.kt)("inlineCode",{parentName:"p"},"FLUTTER_ENABLE_TICKER_PROVIDER_STATE_MIXIN_CREATOR"),": Because Hixie is worried about performance loss (in Discord hackers-framework). Making it a compile time flag, then nobody will have any even tiny bit of performance loss, if they do not need this feature."),(0,s.kt)("p",null,"Why there is ",(0,s.kt)("inlineCode",{parentName:"p"},"debugOverrideEnableTickerProviderStateMixinTickerCreator")," in addition to compile time flag: Because Hixie said compile time flags are hard to test. By using this ",(0,s.kt)("inlineCode",{parentName:"p"},"debugOverride...")," flag we can test it easily (indeed I have written tests there)."),(0,s.kt)("p",null,"Why a context must be passed to the callback: Because as mentioned above, I need to determine whether it is in the second subtree or main subtree."),(0,s.kt)("p",null,"Btw the name is temporary, just suggest any name you like :)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Why can't we used existing mechanisms to achieve the same thing?")),(0,s.kt)("p",null,"Well, Hixie and I have tried, but cannot come up with a solution :/ Feel free to suggest solutions! Microscopic speaking, seems that cannot know a Ticker in a TickerProviderMixin is created so cannot gather them. Macroscopic speaking, did not find other ways to let it be smooth."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Why do we need this mechanism to achieve the larger goal of having incremental/progressive layout?")),(0,s.kt)("p",null,"Hope this question is clear with above ;)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024825022856056862",source:"discord",createTime:"2022-09-28T23:28:45.777+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Reply done to GitHub "hooks" PR: ',(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/112436#issuecomment-1261568241"},"https://github.com/flutter/flutter/pull/112436#issuecomment-1261568241"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAhGPCXpo",source:"google_doc_comments",createTime:"2022-09-28T23:30:46.105Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I agree theoretically. But during my experiments, I see about 39% of the UI thread time is idle, and I guess GC does not need that much time. This screenshot:\xa0",(0,s.kt)("a",{parentName:"p",href:"https://user-images.githubusercontent.com/5236035/190553863-5a373dcb-75ba-468d-8118-66e7a393070b.png"},"https://user-images.githubusercontent.com/5236035/190553863-5a373dcb-75ba-468d-8118-66e7a393070b.png"))),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024825576818749460",source:"discord",createTime:"2022-09-28T23:30:57.852+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I really appreciate your enthusiasm for this topic! But I'm still not sure I understand the big picture purpose of this method. You've explained some of the specifics about why you're guarding certain things the way you are, which isn't really what's unclear to me. What's unclear to me is why we want tickers to have an artificial way to fire an extra tick.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAhGPCXps",source:"google_doc_comments",createTime:"2022-09-28T23:31:54.998Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Just add maybePreemptRender to that ",(0,s.kt)("em",{parentName:"p"},"single")," layout function. For example:"),(0,s.kt)("p",null,"class VeryHeavySingleLayout extends RenderObject {\nvoid performLayout() {\ncompute_heavy_things_part_1;\nmaybePreemptRender();\ncompute_heavy_things_part_2;\nmaybePreemptRender();\n...\ncompute_heavy_things_part_5;\nmaybePreemptRender();\n}\n}")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024825915466854430",source:"discord",createTime:"2022-09-28T23:32:18.592+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This is related to the engine PR concerns - it seems like we're struggling a bit to find the right way to express the concept of vsync/animation frame. The platform gives us a very clear signal, and I would like to avoid adding methods to the engine or framework to override that.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAhGPCXp4",source:"google_doc_comments",createTime:"2022-09-28T23:34:25.287Z",mdxType:"DiscussionComment"},(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Insert a maybePreemptRender to RenderObject.layout function seems enough, without breaking anything if I think correctly."),(0,s.kt)("li",{parentName:"ol"},"I also think about another possibility, just do it the way now it is. In other words, let the user manually specify preempt points via SmoothPreemptPoint. Then one less PR to framework, and user has more flexibility."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024828646084579400",source:"discord",createTime:"2022-09-28T23:43:09.622+00:00",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'I really appreciate your enthusiasm for this topic!\nThanks! \ud83d\ude42\nWhat\'s unclear to me is why we want tickers to have an artificial way to fire an extra tick.\nBecause tickers originally fire once per full pipeline, in the animation phase. But now we want it to run extra ticks in the 60fps smooth extra frame.\nit seems like we\'re struggling a bit to find the right way to express the concept of vsync/animation frame.\nI do respect vsync, just using a way other than "be fired by onBeginFrame" (because when we are busy running dart code, the callback can never be fired again). Shortly speaking, I let VsyncAwaiter set a thread-shared variable about the last vsync data. Then in maybePreemptRender, I read that data. (Briefly speaking) if it is a new vsync, I realize it is time to create Scene and submit via window.render. Thus I submit once per vsync and respect vsync well.\nThe platform gives us a very clear signal, and I would like to avoid adding methods to the engine or framework to override that.\nI would also like to make as few changes as possible, if it is possible \ud83d\ude42\nNot sure what "clear signal" mean, but if it means "the vsync signal", then hope my explanaions above solve the problem - I do respect the clear signal as well in another way'))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024829143470321684",source:"discord",createTime:"2022-09-28T23:45:08.208+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw, I did not add replies to ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36438"},"https://github.com/flutter/engine/pull/36438")," today since yesterday already add some and some questions seem also overlap with today."),(0,s.kt)("p",null,"Feel free to ask if there is anything missing!")),(0,s.kt)(c,{author:"dnfield",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAhGPEyA8",source:"google_doc_comments",createTime:"2022-09-28T23:45:08.783Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"In real applications under real workloads there is more need for GC time - for example, if your application is creating a lot of objects to understand data it fetched from the network or SQLite.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-28T23:57:11Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If we are worried that users may submit multiple window.render inside one vsync, another possibility: We may add some code in the C++ layer (or Dart layer), such that we check current vsync status, and ",(0,s.kt)("em",{parentName:"p"},"only")," ",(0,s.kt)("inlineCode",{parentName:"p"},"Produce()")," if it is a new vsync that has not been produced before.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024832182117728307",source:"discord",createTime:"2022-09-28T23:57:12.678+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If we are worried that users may submit multiple window.render inside one vsync, another possibility: We may add some code in the C++ layer (or Dart layer), such that we check current vsync status, and ",(0,s.kt)("em",{parentName:"p"},"only")," ",(0,s.kt)("inlineCode",{parentName:"p"},"Produce()")," if it is a new vsync that has not been produced before.")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024832459453513820",source:"discord",createTime:"2022-09-28T23:58:18.8+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Which patch is updating a vsync ready signal for dart:ui or the framework?")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024832480634748978",source:"discord",createTime:"2022-09-28T23:58:23.85+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"The patches I've seen so far don't seem to do that.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024832566861234226",source:"discord",createTime:"2022-09-28T23:58:44.408+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"No patch yet, because I was thinking to submit as few as possible")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024832620401528843",source:"discord",createTime:"2022-09-28T23:58:57.173+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"If you like it I can submit one, but that may not be tiny")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024832894507683943",source:"discord",createTime:"2022-09-29T00:00:02.525+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Spoiler: It looks like ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/engine/blob/c78138e3e79abfc771449a3a8341f7fc9211066f/shell/common/vsync_waiter.cc#L187"},"https://github.com/fzyzcjy/engine/blob/c78138e3e79abfc771449a3a8341f7fc9211066f/shell/common/vsync_waiter.cc#L187"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024833062757998613",source:"discord",createTime:"2022-09-29T00:00:42.639+00:00",mdxType:"DiscussionComment"},(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'Set a variable ("lastVsyncInfo") when VsyncAwaiter callback is fired'),(0,s.kt)("li",{parentName:"ul"},"Dart can read that variable"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024833534248091679",source:"discord",createTime:"2022-09-29T00:02:35.051+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"The current possibly hard part for that potential PR: in android sdk>=29 and ios, seems that the  callback of VsyncWaiter is fired on ui thread. But our Dart code is occupying the UI thread (for a long time) so that vsync callback may not be fired. For old android it does work well because it is fired in platform thread (my example is based on that)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024833652263243817",source:"discord",createTime:"2022-09-29T00:03:03.188+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"To create the PR, I may need to move new-android and ios VsyncWaiter to platform thread as well.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAhGPEyBY",source:"google_doc_comments",createTime:"2022-09-29T00:06:53.439Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I agree. But seems that we need to compare two cases:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Without this new proposal: Suppose one frame is 100ms, then we have busy UI thread for 100ms without idle. And then frame ends so we have idle."),(0,s.kt)("li",{parentName:"ol"},"With this proposal: We still be busy for 100ms (+3% overhead so indeed 103ms), and then get idle. In addition, we have 6 extra smooth frames which may generate some object.")),(0,s.kt)("p",null,"Thus, the difference with this proposal is that, the objects we create inside extra smooth frame do give GC extra pressure. But I hope that is small - they are just animations.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit?disco=AAAAhGPEyBc",source:"google_doc_comments",createTime:"2022-09-29T00:09:30.460Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Moreover, IMHO, my approach allows GC to happen, as long as it is less than 16ms stop-the-world and is not very unlucky."),(0,s.kt)("p",null,"For example, suppose GC happens during 17ms to 20ms. Then I can still build the layer tree and submit window.render at around 33.33ms. That stop-the-world GC does not cause any problem like visible jank. As long as we have about 0.5ms per 16.667ms, because 0.5ms is what we need (in experiments below) to produce an extra smooth frame."),(0,s.kt)("p",null,"On the contrary, existing methods may have jank in such cases. Because if GC runs for 3ms, they have 3ms less to compute the next scene.")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024835407113883708",source:"discord",createTime:"2022-09-29T00:10:01.577+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I'm not suggesting you create that PR right now, but having a working patch that shows what would need to be done, with some details about why this approach is being taken would help.")),(0,s.kt)(c,{author:"dnfield",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024835469546106950",source:"discord",createTime:"2022-09-29T00:10:16.462+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"For example, I'd expect your document to have a section on this explaining how it will work and what threading considerations are being made etc.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024840166189309965",source:"discord",createTime:"2022-09-29T00:28:56.229+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see. I will add that (probably within a few hours) and come back when I am done.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1024852804029927537",source:"discord",createTime:"2022-09-29T01:19:09.325+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'That section is now written under "Get last vsync time information" doc section, with psuedo-code, threading concerns etc\nI will make a runnable code if the proposal about this vsync change looks interesting')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-09-29T02:44:43Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"automatedtestwidgetsflutterbindingpump-provides-wrong-pump-time-stamp-probably-because-of-forgetting-the-precision"},(0,s.kt)("inlineCode",{parentName:"h3"},"AutomatedTestWidgetsFlutterBinding.pump")," provides wrong pump time stamp, probably because of forgetting the precision"),(0,s.kt)("p",null,"The fix is just one line:"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/192926480-dc287d01-62bb-4dc8-9c16-f62f6d03b0da.png",alt:"image"})),(0,s.kt)("p",null,"I have ",(0,s.kt)("inlineCode",{parentName:"p"},"git blame")," and find the bug exist since the first version 7yr ago, and no special comments about why this is introduced so I guess it is but not feature."),(0,s.kt)("p",null,"IMHO the bug may be written like, the programmer wants to convert DateTime (the ",(0,s.kt)("inlineCode",{parentName:"p"},"clock.now()"),") into a Duration. But then it is forgotten that both are microseconds precision instead of milliseconds precision, and the milliseconds approach is used."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue."),"\nClose #112610"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-3"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),"."),(0,s.kt)("hr",null),(0,s.kt)("p",null,"p.s. test fails with old code, confirming that the test is effective."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/192926239-e83874e6-6dc0-4265-a4d5-dda0c9018bf8.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/192926266-e202747f-9e1a-49a2-abf2-a9624bd2c03d.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112619",source:"github",createTime:"2022-09-29T06:21:11Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"export-elapseblocking-to-test-binding-so-slow-sync-work-can-be-simulated-such-as-a-slow-widget-build"},"Export ",(0,s.kt)("inlineCode",{parentName:"h3"},"elapseBlocking")," to test binding, so slow sync work can be simulated such as a slow widget build"),(0,s.kt)("p",null,"There are needs to simulate sync heavy work, such as a slow widget build, in flutter widget tests. This method simply expose that."),(0,s.kt)("p",null,"As a remark, this cannot be replaced by ",(0,s.kt)("inlineCode",{parentName:"p"},"runAsync"),". Consider the following example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"    testWidgets('can use to simulate slow build', (WidgetTester tester) async {\n      final DateTime beforeTime = binding.clock.now();\n\n      await tester.pumpWidget(Builder(builder: (_) {\n        bool timerCalled = false;\n        Timer.run(() => timerCalled = true);\n\n        binding.elapseBlocking(const Duration(seconds: 1));\n\n        // if we use `delayed` instead of `elapseBlocking`, such as\n        // binding.delayed(const Duration(seconds: 1));\n        // the timer will be called here. Surely, that violates how\n        // a flutter widget build works\n        expect(timerCalled, false);\n\n        return Container();\n      }));\n\n      expect(binding.clock.now(), beforeTime.add(const Duration(seconds: 1)));\n      binding.idle();\n    });\n")),(0,s.kt)("p",null,"As is discussed in the comments in the example, if we use ",(0,s.kt)("inlineCode",{parentName:"p"},"delayed"),", timers will be fired when executing half of a build function, which is totally wrong."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue."),"\nClose ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/112620"},"https://github.com/flutter/flutter/issues/112620")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-4"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-30T18:11:41Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Fizzling like that would be expensive, and we'd be giving developers a button to push that actually makes things slower. We should avoid that.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-30T22:42:21Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield If speed is a concern, maybe the original PR is ok: For a normal usage, it only adds ",(0,s.kt)("inlineCode",{parentName:"p"},"if (!producer_continuation_)")," (and that if will return false immediately). Given that ",(0,s.kt)("inlineCode",{parentName:"p"},"explicit operator bool() const { return continuation_ != nullptr; }"),", this if will only check whether a pointer is nullptr, so I guess it is only a few CPU cycles (per 16667 microseconds, i.e. maybe 10000000 cycles). In addition, for a normal usage, the branch will always be false, so IMHO the cpu branch predictor will be quite correct about the prediction.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-30T22:51:53Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@dnfield giving developers a button to push that actually makes things slower")),(0,s.kt)("p",null,"There seems to be another way that is not very slower:"),(0,s.kt)("p",null,"Firstly, the ",(0,s.kt)("inlineCode",{parentName:"p"},"onlyRenderOncePerBeginFrame")," should not be ",(0,s.kt)("inlineCode",{parentName:"p"},"window.render(onlyRenderOncePerBeginFrame: true)"),", but be ",(0,s.kt)("inlineCode",{parentName:"p"},"window.onlyRenderOncePerBeginFrame = true; window.render()"),". In other words, it should be a flag that is set once. Then the code is:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c++"},"...\n  if (!onlyRenderOncePerBeginFrame && !producer_continuation_) {\n    producer_continuation_ = layer_tree_pipeline_->Produce();\n  }\n...\n\nvoid SetOnlyRenderOncePerBeginFrame(bool value) { this->onlyRenderOncePerBeginFrame = value; }\nclass Animator { ... bool onlyRenderOncePerBeginFrame; ... }\n")),(0,s.kt)("p",null,"(no need for locks, since all on UI thread.)"),(0,s.kt)("p",null,"Then there comes the concern that ",(0,s.kt)("inlineCode",{parentName:"p"},"if (!onlyRenderOncePerBeginFrame && !producer_continuation_)")," can cost CPU cycles, even when onlyRenderOncePerBeginFrame is always true (for a classical user). Firstly, for a classical user, we only pay extra cost of ",(0,s.kt)("inlineCode",{parentName:"p"},"if(boolean)")," (because && is short-circuited), so only a few cycles."),(0,s.kt)("p",null,"Secondly, seems we can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"[[likely]]")," (c++20), or ",(0,s.kt)("inlineCode",{parentName:"p"},"LIKELY")," (a lot of c++ library write their own version for that, e.g. see ","[how linux]",")(",(0,s.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/109710/how-do-the-likely-unlikely-macros-in-the-linux-kernel-work-and-what-is-their-ben"},"https://stackoverflow.com/questions/109710/how-do-the-likely-unlikely-macros-in-the-linux-kernel-work-and-what-is-their-ben"),") does that), to further hint compiler about this case to speed up.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-09-30T22:55:53Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield And for ",(0,s.kt)("em",{parentName:"p"},"zero")," speed decrease if you like:"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"Animator::PrepareExtraRender")," proposal seems to cause zero speed loss for a classical user. Because a classical user never calls that function, and only call Animator::Render. But Animator::Render is not modified in this proposal. For a smooth user, there does exist overhead, because need to call one extra C++ function - the PrepareExtraRender.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-09-30T23:01:48Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Quick update (still WIP, just provide some progress): I am working on the gesture system. Jonah Williams has thought that, it was bad that my old proposal did not let the pointer data packet go through Flutter's gesture system. Now, the new method just calls the classical ",(0,s.kt)("inlineCode",{parentName:"p"},"gestureBinding.handlePointerEvent")," to dispatch ",(0,s.kt)("inlineCode",{parentName:"p"},"PointerMoveEvent"),"s.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112735",source:"github",createTime:"2022-10-01T01:18:23Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-logic-error-in-markneedspaint"},"Fix logic error in ",(0,s.kt)("inlineCode",{parentName:"h3"},"markNeedsPaint")),(0,s.kt)("p",null,"The original code comment says:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If we're the root of the render tree (probably a RenderView), then we have to paint ourselves, since nobody else can paint us. We don't add ourselves to _nodesNeedingPaint in this case, because the root is always told to paint regardless.")),(0,s.kt)("p",null,"However, IMHO it is wrong in two aspects."),(0,s.kt)("h3",{id:"problem-1-renderview-does-not-come-to-this-branch"},"Problem 1: RenderView does not come to this branch"),(0,s.kt)("p",null,"Firstly, for a ",(0,s.kt)("inlineCode",{parentName:"p"},"RenderView"),", it will not go into this branch, but instead go into the first branch (the ",(0,s.kt)("inlineCode",{parentName:"p"},"if (isRepaintBoundary && _wasRepaintBoundary)"),"). This is because RenderView.isRepaintBoundary is defined to be true, which can be seen in the code."),(0,s.kt)("p",null,"The experiment also confirms this. Click to expand below:"),(0,s.kt)("details",null,(0,s.kt)("p",null,"Add a few logs:"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/193377612-be3ab525-2819-401f-b68e-25c318e40dd8.png",alt:"image"})),(0,s.kt)("p",null,"Code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"import 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter/scheduler.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  testWidgets('hello', (tester) async {\n    debugPrintBeginFrameBanner = debugPrintEndFrameBanner = true;\n\n    final dummy = ValueNotifier(0);\n    await tester.pumpWidget(ValueListenableBuilder(\n      valueListenable: dummy,\n      builder: (_, dummy, __) => _DummyInner(dummy: dummy),\n    ));\n\n    dummy.value++;\n    await tester.pump();\n\n    debugPrintBeginFrameBanner = debugPrintEndFrameBanner = false;\n  });\n}\n\nclass _DummyInner extends SingleChildRenderObjectWidget {\n  final int dummy;\n\n  const _DummyInner({\n    super.key,\n    required this.dummy,\n    super.child,\n  });\n\n  @override\n  _RenderDummy createRenderObject(BuildContext context) =>\n      _RenderDummy(dummy: dummy);\n\n  @override\n  void updateRenderObject(BuildContext context, _RenderDummy renderObject) {\n    renderObject.dummy = dummy;\n  }\n}\n\nclass _RenderDummy extends RenderProxyBox {\n  _RenderDummy({\n    required int dummy,\n    RenderBox? child,\n  })  : _dummy = dummy,\n        super(child);\n\n  // not mark repaint yet\n  int get dummy => _dummy;\n  int _dummy;\n\n  set dummy(int value) {\n    if (_dummy == value) return;\n    _dummy = value;\n    print('hi ${describeIdentity(this)} set dummy thus markNeedsPaint START');\n    markNeedsPaint();\n    print('hi ${describeIdentity(this)} set dummy thus markNeedsPaint END');\n  }\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    print('hi ${describeIdentity(this)}.paint SUPPOSE THIS IS THE REAL PAINT');\n    super.paint(context, offset);\n  }\n}\n")),(0,s.kt)("p",null,"output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"/Volumes/MyExternal/ExternalRefCode/flutter/bin/flutter --no-color test --machine --start-paused --plain-name hello --local-engine-src-path=/Volumes/MyExternal/ExternalRefCode/engine/src --local-engine=host_debug_unopt test/hello.dart\nTesting started at 09:21 ...\n\nhi RenderParagraph#d9227.markNeedsPaint start _needsPaint=true\nhi RenderPositionedBox#d9bb5.markNeedsPaint start _needsPaint=true\nhi RenderView#fab3a.markNeedsPaint start _needsPaint=true\nhi flushPaint PipelineOwner#89028 node=RenderView#fab3a NEEDS-PAINT _needsPaint=true owner=PipelineOwner#89028 node._layerHandle.layer!.attached=true\nhi TransformLayer#64092.buildScene\nhi PictureLayer#149d1._addToSceneWithRetainedRendering _needsAddToScene=true\n\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 Frame 2                        0ms \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\nhi _RenderDummy#a17bc.markNeedsPaint start _needsPaint=true\nhi RenderView#fab3a.markNeedsPaint start _needsPaint=false\nhi RenderView#fab3a.markNeedsPaint case-repaintboundary owner=PipelineOwner#89028\nhi flushPaint PipelineOwner#89028 node=RenderView#fab3a NEEDS-PAINT _needsPaint=true owner=PipelineOwner#89028 node._layerHandle.layer!.attached=true\nhi _RenderDummy#a17bc.paint SUPPOSE THIS IS THE REAL PAINT\nhi TransformLayer#64092.buildScene\n\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\n\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 Frame 3                        0ms \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\nhi _RenderDummy#a17bc set dummy thus markNeedsPaint START\nhi _RenderDummy#a17bc.markNeedsPaint start _needsPaint=false\nhi _RenderDummy#a17bc.markNeedsPaint case-parent parent=RenderView#fab3a\nhi RenderView#fab3a.markNeedsPaint start _needsPaint=false\nhi RenderView#fab3a.markNeedsPaint case-repaintboundary owner=PipelineOwner#89028\nhi _RenderDummy#a17bc set dummy thus markNeedsPaint END\nhi flushPaint PipelineOwner#89028 node=RenderView#fab3a NEEDS-PAINT _needsPaint=true owner=PipelineOwner#89028 node._layerHandle.layer!.attached=true\nhi _RenderDummy#a17bc.paint SUPPOSE THIS IS THE REAL PAINT\nhi TransformLayer#64092.buildScene\n\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\nhi RenderParagraph#c63b7.markNeedsPaint start _needsPaint=true\nhi RenderPositionedBox#2fb99.markNeedsPaint start _needsPaint=true\nhi RenderView#fab3a.markNeedsPaint start _needsPaint=false\nhi RenderView#fab3a.markNeedsPaint case-repaintboundary owner=PipelineOwner#89028\nhi flushPaint PipelineOwner#89028 node=RenderView#fab3a NEEDS-PAINT _needsPaint=true owner=PipelineOwner#89028 node._layerHandle.layer!.attached=true\nhi TransformLayer#64092.buildScene\nhi PictureLayer#18f7f._addToSceneWithRetainedRendering _needsAddToScene=true\n"))),(0,s.kt)("p",null,"By looking at the experiment above, we see that, the ",(0,s.kt)("inlineCode",{parentName:"p"},"RenderView")," goes to the ",(0,s.kt)("inlineCode",{parentName:"p"},"case-repaintboundary")," which is the first branch, instead of the third branch, so the comments seem incorrect."),(0,s.kt)("h3",{id:"problem-2-root-is-not-always-told-to-paint-indeed"},"Problem 2: Root is not always told to paint indeed"),(0,s.kt)("p",null,'Theoretically, I do not find clues why "root is always told to paint" indeed. Experimentically, this is also confirmed as below.'),(0,s.kt)("p",null,"We change the branching condition as follows, so RenderView is forced to go to the 3rd branch (the branch with comments), instead of the 1st branch."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"-     if (isRepaintBoundary && _wasRepaintBoundary) {\n+     if (isRepaintBoundary && _wasRepaintBoundary && /*HACK!!!*/(this is! RenderView)) {\n")),(0,s.kt)("p",null,"Then we run the test code same as above (only with a few more logging), and get:"),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"/Volumes/MyExternal/ExternalRefCode/flutter/bin/flutter --no-color test --machine --start-paused --plain-name hello --local-engine-src-path=/Volumes/MyExternal/ExternalRefCode/engine/src --local-engine=host_debug_unopt test/hello.dart\nTesting started at 09:25 ...\n\nhi RenderParagraph#c9872.markNeedsPaint start _needsPaint=true\nhi RenderPositionedBox#f6896.markNeedsPaint start _needsPaint=true\nhi RenderView#0fb85.markNeedsPaint start _needsPaint=true\nhi flushPaint PipelineOwner#ce901 node=RenderView#0fb85 NEEDS-PAINT _needsPaint=true owner=PipelineOwner#ce901 node._layerHandle.layer!.attached=true\nhi RenderView#0fb85.paint\nhi TransformLayer#d7668.buildScene\nhi PictureLayer#335b7._addToSceneWithRetainedRendering _needsAddToScene=true\n\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 Frame 2                        0ms \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\nhi _RenderDummy#3427b.markNeedsPaint start _needsPaint=true\nhi RenderView#0fb85.markNeedsPaint start _needsPaint=false\nhi RenderView#0fb85.markNeedsPaint case-else owner=PipelineOwner#ce901\nhi TransformLayer#d7668.buildScene\nhi PictureLayer#335b7._addToSceneWithRetainedRendering _needsAddToScene=false\n\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\n\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 Frame 3                        0ms \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\nhi _RenderDummy#3427b set dummy thus markNeedsPaint START\nhi _RenderDummy#3427b.markNeedsPaint start _needsPaint=true\nhi _RenderDummy#3427b set dummy thus markNeedsPaint END\nhi TransformLayer#d7668.buildScene\nhi PictureLayer#335b7._addToSceneWithRetainedRendering _needsAddToScene=false\n\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\nhi RenderParagraph#66d6b.markNeedsPaint start _needsPaint=true\nhi RenderPositionedBox#537a5.markNeedsPaint start _needsPaint=true\nhi RenderView#0fb85.markNeedsPaint start _needsPaint=true\nhi TransformLayer#d7668.buildScene\nhi PictureLayer#335b7._addToSceneWithRetainedRendering _needsAddToScene=false\n"))),(0,s.kt)("p",null,"As we can see, RenderView.paint and RenderDummy.paint is only called once, even though we clearly call ",(0,s.kt)("inlineCode",{parentName:"p"},"RenderDummy.markNeedsPaint"),". That is indeed a bug, and at least shows that the code comment is wrong - root is not always told to paint."),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Replace this paragraph with a description of what this PR is changing or adding, and why. Consider including before/after screenshots.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue."),"\nclose #112736"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-5"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112738",source:"github",createTime:"2022-10-01T02:05:20Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"wip-tentative-experiment-to-see-how-to-fix-logic-error-about-skippedpaintingonlayer"},"[WIP][Do not merge this PR]"," Tentative experiment to see how to fix logic error about skippedPaintingOnLayer"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Replace this paragraph with a description of what this PR is changing or adding, and why. Consider including before/after screenshots.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-6"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112738",source:"github",createTime:"2022-10-01T02:21:09Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"All right, this should not be the fix")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112757",source:"github",createTime:"2022-10-02T01:11:34Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"add-warning-that-renderrepaintboundarytoimage-and-offsetlayertoimage-is-slow"},"Add warning that ",(0,s.kt)("inlineCode",{parentName:"h3"},"RenderRepaintBoundary.toImage")," and ",(0,s.kt)("inlineCode",{parentName:"h3"},"OffsetLayer.toImage")," is slow"),(0,s.kt)("p",null,'Scene.toImage has doc saying: "This is a slow operation that is performed on a background thread". However, people may use ',(0,s.kt)("inlineCode",{parentName:"p"},"RenderRepaintBoundary.toImage")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"OffsetLayer.toImage")," and never read that comment, so they are unaware of the slowness. This PR simply adds the warning to them."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-7"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36556",source:"github",createTime:"2022-10-02T01:33:27Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"update-comments-that-seem-to-contradict-the-code-and-may-confuse-the-reader"},"Update comments that seem to contradict the code and may confuse the reader"),(0,s.kt)("p",null,"Original comment:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"... So we flatten the layer tree into a picture and use that as the thread transport mechanism.")),(0,s.kt)("p",null,"However, looking at the whole code:"),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c++"},'Dart_Handle Picture::RasterizeToImage(sk_sp<DisplayList> display_list,\n                                      std::shared_ptr<LayerTree> layer_tree,\n                                      uint32_t width,\n                                      uint32_t height,\n                                      Dart_Handle raw_image_callback) {\n  if (Dart_IsNull(raw_image_callback) || !Dart_IsClosure(raw_image_callback)) {\n    return tonic::ToDart("Image callback was invalid");\n  }\n\n  if (width == 0 || height == 0) {\n    return tonic::ToDart("Image dimensions for scene were invalid.");\n  }\n\n  auto* dart_state = UIDartState::Current();\n  auto image_callback = std::make_unique<tonic::DartPersistentValue>(\n      dart_state, raw_image_callback);\n  auto unref_queue = dart_state->GetSkiaUnrefQueue();\n  auto ui_task_runner = dart_state->GetTaskRunners().GetUITaskRunner();\n  auto raster_task_runner = dart_state->GetTaskRunners().GetRasterTaskRunner();\n  auto snapshot_delegate = dart_state->GetSnapshotDelegate();\n\n  // We can\'t create an image on this task runner because we don\'t have a\n  // graphics context. Even if we did, it would be slow anyway. Also, this\n  // thread owns the sole reference to the layer tree. So we flatten the layer\n  // tree into a picture and use that as the thread transport mechanism.\n\n  auto picture_bounds = SkISize::Make(width, height);\n\n  auto ui_task =\n      // The static leak checker gets confused by the use of fml::MakeCopyable.\n      // NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)\n      fml::MakeCopyable([image_callback = std::move(image_callback),\n                         unref_queue](sk_sp<DlImage> image) mutable {\n        auto dart_state = image_callback->dart_state().lock();\n        if (!dart_state) {\n          // The root isolate could have died in the meantime.\n          return;\n        }\n        tonic::DartState::Scope scope(dart_state);\n\n        if (!image) {\n          tonic::DartInvoke(image_callback->Get(), {Dart_Null()});\n          return;\n        }\n\n        if (image->skia_image()) {\n          image =\n              DlImageGPU::Make({image->skia_image(), std::move(unref_queue)});\n        }\n\n        auto dart_image = CanvasImage::Create();\n        dart_image->set_image(image);\n        auto* raw_dart_image = tonic::ToDart(std::move(dart_image));\n\n        // All done!\n        tonic::DartInvoke(image_callback->Get(), {raw_dart_image});\n\n        // image_callback is associated with the Dart isolate and must be\n        // deleted on the UI thread.\n        image_callback.reset();\n      });\n\n  // Kick things off on the raster rask runner.\n  fml::TaskRunner::RunNowOrPostTask(\n      raster_task_runner,\n      [ui_task_runner, snapshot_delegate, display_list, picture_bounds, ui_task,\n       layer_tree = std::move(layer_tree)] {\n        sk_sp<DlImage> image;\n        if (layer_tree) {\n          auto display_list = layer_tree->Flatten(\n              SkRect::MakeWH(picture_bounds.width(), picture_bounds.height()),\n              snapshot_delegate->GetTextureRegistry(),\n              snapshot_delegate->GetGrContext());\n\n          image = snapshot_delegate->MakeRasterSnapshot(display_list,\n                                                        picture_bounds);\n        } else {\n          image = snapshot_delegate->MakeRasterSnapshot(display_list,\n                                                        picture_bounds);\n        }\n\n        fml::TaskRunner::RunNowOrPostTask(\n            ui_task_runner, [ui_task, image]() { ui_task(image); });\n      });\n\n  return Dart_Null();\n}\n'))),(0,s.kt)("p",null,"It seems that, the ",(0,s.kt)("inlineCode",{parentName:"p"},"layer_tree")," is directly moved into ",(0,s.kt)("inlineCode",{parentName:"p"},"raster_task_runner")," callbacks. Then, inside the raster thread, ",(0,s.kt)("inlineCode",{parentName:"p"},"layer_tree->Flatten"),' is called and it is converted to a DisplayList. In other words, the "thread transport mechanism" seems to be the ',(0,s.kt)("inlineCode",{parentName:"p"},"layer_tree")," (ui -> raster thread) and ",(0,s.kt)("inlineCode",{parentName:"p"},"DlImage"),' (raster -> ui thread), instead of the "flatten the layer tree into a picture and use that" (the flattened layer tree, i.e. the picture).'),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-8"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/36556",source:"github",createTime:"2022-10-02T01:33:30Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36556",source:"github",createTime:"2022-10-02T01:34:31Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This only updates comments so seems no need for tests")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112757",source:"github",createTime:"2022-10-02T01:46:48Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@jonahwilliams Hi thanks for the reply."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"If it is slow, IMHO the users need to know it, otherwise users may abuse it because they may think it is just a normal function."),(0,s.kt)("li",{parentName:"ul"},"If it is fast, then we need to remove the original comment (because it is outdated)."),(0,s.kt)("li",{parentName:"ul"},"As for impl specific, if it is slow but in the future it becomes fast (hopefully!), seems that we can update comments at that time."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112757",source:"github",createTime:"2022-10-02T01:50:25Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Anyway this is just a small doc change and it does not matter whether it is changed or not for myself (since I already know it is slow and should be careful). I have spent some making this PR simply because I hope other users works correctly with the api :)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112778",source:"github",createTime:"2022-10-03T03:53:35Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"minor-change-type-nullability"},"Minor change type nullability"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Replace this paragraph with a description of what this PR is changing or adding, and why. Consider including before/after screenshots.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-9"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-03T16:24:41Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"You're discounting the time it takes to actually make a native call from Dart."),(0,s.kt)("p",null,"On top of that, we should not expose an API that might or might not do something and developers have no good way to reason about whether they're really supposed to call it or not."),(0,s.kt)("p",null,"This proposal is fundamentally changing the invariants around ",(0,s.kt)("inlineCode",{parentName:"p"},"render"),"/",(0,s.kt)("inlineCode",{parentName:"p"},"onBeginFrame"),", but it's not providing any way for developers to know if they're using the new invariants correctly or not. Even if the new potentially useless API is relatively cheap, it adds up when developers (and packages they use) start doing it multiple times per frame. And those developers/packages will have no way to know whether they're doing it correctly or not, so it will definitely get misused."),(0,s.kt)("p",null,"Why, for example, shouldn't the framework just call render and schedule a new frame when its hit its potential limit?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-03T23:26:28Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Hi thanks for the reply."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"You're discounting the time it takes to actually make a native call from Dart.")),(0,s.kt)("p",null,"Originally I thought that is small just like a normal function call... Ok now I learn it."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"On top of that, we should not expose an API that might or might not do something and developers have no good way to reason about whether they're really supposed to call it or not.")),(0,s.kt)("p",null,"Indeed they have a way to reason: look at time or vsync info. They should not submit twice inside one vsync interval."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"This proposal is fundamentally changing the invariants around render/onBeginFrame, but it's not providing any way for developers to know if they're using the new invariants correctly or not.")),(0,s.kt)("p",null,"I am not sure, if I expose the vsync info and ensure only one call is made per vsync interval (16.67ms), does this satisfy your requirement?"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Even if the new potentially useless API is relatively cheap, it adds up when developers (and packages they use) start doing it multiple times per frame. ")),(0,s.kt)("p",null,"Again, as mentioned above, dev should not call it multiple times per frame. A naive dev may use ",(0,s.kt)("inlineCode",{parentName:"p"},"DateTime.now() - last_vsync_time > 15ms")," etc to check, and a more sophisticated way may be read the vsync info (exposed from engine) to really ensure we never call twice per vsync interval. "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"And those developers/packages will have no way to know whether they're doing it correctly or not, so it will definitely get misused.")),(0,s.kt)("p",null,"Then maybe we should return ",(0,s.kt)("inlineCode",{parentName:"p"},"bool")," to indicate whether it is really scheduled. If they see a lot of ",(0,s.kt)("inlineCode",{parentName:"p"},"false")," they are doing it wrong (call too many times that are useless)."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Why, for example, shouldn't the framework just call render and schedule a new frame when its hit its potential limit?")),(0,s.kt)("p",null,"Because of the fundamental design of the preempt proposal (",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit"),'), mainly "The flow chart" section.'),(0,s.kt)("p",null,"Indeed, window.render is called per vsync interval (16.67ms). The main difference from classical code is that, it may be called multiple times per onBeginFrame (when onBeginFrame is super slow).")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-03T23:52:26Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Devices do not always have 60fps vsync - sometimes it's 90 or 120 or more or less (at one point we had a customer looking at 240hz devices, and it's likely there are customers out there looking at 30hz use cases). There is no way currently in dart:ui to know what the current refresh rate is, and on some platforms it's not even possible to implement because the vendors don't provide an API for it (e.g. some Android vendors), and it can change from frame to frame."),(0,s.kt)("p",null,"In other words, a developer must not assume that 16.67ms is the right interval for a frame in all circumstances. And the query of ",(0,s.kt)("inlineCode",{parentName:"p"},"DateTime.now")," is almost certain to ",(0,s.kt)("em",{parentName:"p"},"not")," match the actual vsync start time, so if you assume you have roughly 16ms from onBeginFrame you might actually overshoot vsync.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-03T23:57:18Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Devices do not always have 60fps vsync - sometimes it's 90 or 120 or more or less (at one point we had a customer looking at 240hz devices, and it's likely there are customers out there looking at 30hz use cases). There is no way currently in dart:ui to know what the current refresh rate is, and on some platforms it's not even possible to implement because the vendors don't provide an API for it (e.g. some Android vendors), and it can change from frame to frame.")),(0,s.kt)("p",null,'Definitely! That\'s why I also propose to expose vsync-related information to the dev. Last week you asked me to describe it and it was at "Get last vsync time information" section of google doc.'),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"And the query of DateTime.now is almost certain to not match the actual vsync start time, so if you assume you have roughly 16ms from onBeginFrame you might actually overshoot vsync.")),(0,s.kt)("p",null,"Totally agree. Indeed in my (previous) implementation, I let the C++ side expose the ",(0,s.kt)("inlineCode",{parentName:"p"},"timeStamp"),' (i.e. vsync target time we provide to dart tonBeginFrame) both a "Duration" and a "DateTime-compatible time". If you like I can add that back (deleted it b/c want to make PR small).')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-03T23:58:56Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"P.S. I am also considering relaxing when to start a onBeginFrame which seems to reduce unnecessary idle time and improve performance. That may be related to the big picture you are concerned - how vsync and code are interacted. I will add it to design doc and reply here maybe in an hour.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-04T00:34:41Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@dnfield Here it goes: "Relax onBeginFrame starting criterion" section in ',(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit"))),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-04T16:23:59Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I think it would be easier to start with a patch that exposes more about vsync timings to the developer, because that will be critical to whether this one makes sense.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-04T23:05:16Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks, I will do that.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36607",source:"github",createTime:"2022-10-05T00:07:09Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"expose-vsync-information-to-developer"},"Expose ",(0,s.kt)("inlineCode",{parentName:"h3"},"vsync")," information to developer"),(0,s.kt)("p",null,"This PR tries to expose vsync information to the developer, so they can know when it is proper to call the more un-restricted ",(0,s.kt)("inlineCode",{parentName:"p"},"window.render")," proposed in #36438."),(0,s.kt)("p",null,"Currently only the API is shown, because IMHO the implementation details is unrelated to thoughts about #36438, and the API (and therefore implementations) are subject to changes. I will continue working on it, once the API is approved."),(0,s.kt)("p",null,'For detailed design about this API and its implementation, please have a look at "Get last vsync time information" section of ',(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit"),"."),(0,s.kt)("p",null,"Sample usage:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"final info = SchedulerBinding.instance.lastVsyncInfo();\n")),(0,s.kt)("p",null,"List of work:"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","code the (draft) Dart API"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","discuss whether the API is acceptable"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","implement the C++ part on SDK<=29 Android"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","implement the C++ part on new android, ios, and other platforms"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","create a wrapper function in ",(0,s.kt)("inlineCode",{parentName:"li"},"flutter/flutter")," repo, probably in ",(0,s.kt)("inlineCode",{parentName:"li"},"SchedulerBinding"))),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-10"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-05T00:16:04Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Hi, PR is here: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36607"},"https://github.com/flutter/engine/pull/36607")),(0,s.kt)("p",null,"Only the API is there currently, because IMHO the implementation details is unrelated to thoughts about this issue, and the API (and therefore implementations) are subject to changes.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-06T00:16:57Z",mdxType:"DiscussionComment"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"| 00:15 +36: /b/s/w/ir/x/t/flutter_customer_testing.flutter_packages.RNUBSQ/tests/packages/animations/test/open_container_test.dart: Container closes - Fade (by default)\n| \u2550\u2550\u2561 EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n| The following TestFailure was thrown running a test:\n| Expected: 1.0 (\xb11e-10)\n|   Actual: <0.9999833333333332>\n|    Which: 0.9999833333333332 is not in the range of 1.0 (\xb11e-10).\n|\n| When the exception was thrown, this was the stack:\n| #4      main.<anonymous closure> (file:///b/s/w/ir/x/t/flutter_customer_testing.flutter_packages.RNUBSQ/tests/packages/animations/test/open_container_test.dart:273:7)\n| <asynchronous suspension>\n| <asynchronous suspension>\n| (elided one frame from package:stack_trace)\n|\n| This was caught by the test expectation on the following line:\n|   file:///b/s/w/ir/x/t/flutter_customer_testing.flutter_packages.RNUBSQ/tests/packages/animations/test/open_container_test.dart line 273\n| The test description was:\n|   Container closes - Fade (by default)\n| \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n|\n| 00:15 +37 -1: /b/s/w/ir/x/t/flutter_customer_testing.flutter_packages.RNUBSQ/tests/packages/animations/test/fade_scale_transition_test.dart: FadeScaleTransitionConfiguration builds a new route\n| 00:15 +37 -1: /b/s/w/ir/x/t/flutter_customer_testing.flutter_packages.RNUBSQ/tests/packages/animations/test/open_container_test.dart: Container closes - Fade (by default) [E]\n|   Test failed. See exception logs above.\n|   The test description was: Container closes - Fade (by default)\n"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-06T00:17:28Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@pdblasi-google I guess maybe need to update the custom testing configurations to point to the latest tests?")),(0,s.kt)(c,{author:"pdblasi-google",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-06T18:20:51Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy Yup, you called it. Apologies, I forgot to point the flutter/tests repo to the latest tests. PR is up for that now, I'll ping here when it goes through.")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-06T20:44:21Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Golden file changes have been found for this pull request. Click ",(0,s.kt)("a",{parentName:"p",href:"https://flutter-gold.skia.org/cl/github/112609"},"here to view and triage")," (e.g. because this is an intentional change)."),(0,s.kt)("p",null,"If you are still iterating on this change and are not ready to resolve the images on the Flutter Gold dashboard, consider marking this PR as a draft pull request above. You will still be able to view image results on the dashboard, commenting will be silenced, and the check will not try to resolve itself until marked ready for review."),(0,s.kt)("p",null,"For more guidance, visit ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Writing-a-golden-file-test-for-package:flutter"},"Writing a golden file test for ",(0,s.kt)("inlineCode",{parentName:"a"},"package:flutter")),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Changes reported for pull request #112609 at sha 02ebd54c3343d0c3aaabcba423b5db13b2bfaadb"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-06T23:22:52Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks and \ud83c\udf89 !")),(0,s.kt)(c,{author:"goderbauer",link:"https://github.com/flutter/flutter/issues/112778",source:"github",createTime:"2022-10-10T18:29:29Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Any reason this is still marked as Draft?"),(0,s.kt)("p",null,"This will need a testing exception.")),(0,s.kt)(c,{author:"goderbauer",link:"https://github.com/flutter/flutter/issues/112757",source:"github",createTime:"2022-10-10T18:31:24Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I agree that this comment alone is not particularly useful. To be useful it would need more context so developers can actually make an informed decision of whether they want to use this or not. Let's close this for now.")),(0,s.kt)(c,{author:"goderbauer",link:"https://github.com/flutter/flutter/issues/112437",source:"github",createTime:"2022-10-10T18:35:45Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This patch is missing a lot of context information. To quote Dan from the other patch:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"This patch needs a lot more context.\nWhat's the main goal you're trying to achieve with this particular change?\nWhy is it doing it this way?\nWhy can't we used existing mechanisms to achieve the same thing?\nWhy do we need this mechanism to achieve the larger goal of having incremental/progressive layout?")),(0,s.kt)("p",null,"Regardless, this doesn't seem like a great API to provide a single static callback that gets called on every layout. What if multiple implementations are trying to set this?\nAlso, this gets called for the layout of every single RenderObject. This doesn't sound great for performance. I know, the title claims it has no overhead, but I find that hard to believe. What's the basis for that claim?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112778",source:"github",createTime:"2022-10-10T23:08:38Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Any reason this is still marked as Draft?")),(0,s.kt)("p",null,"No, I just forgot it :)"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"This will need a testing exception.")),(0,s.kt)("p",null,"I think so, thanks")),(0,s.kt)(c,{author:"Hixie",link:"https://github.com/flutter/flutter/issues/112778",source:"github",createTime:"2022-10-10T23:11:41Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"test-exempt: API refactor")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112437",source:"github",createTime:"2022-10-10T23:18:30Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Please ignore this PR for now, since in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth"},"https://github.com/fzyzcjy/flutter_smooth")," (i.e. impl of ",(0,s.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit#"},"https://docs.google.com/document/d/1FuNcBvAPghUyjeqQCOYxSt6lGDAQ1YxsNlOvrUx0Gko/edit#"),"), I am trying to use manual widgets as a workaround. So skip it is you are busy :)"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"This doesn't sound great for performance. I know, the title claims it has no overhead, but I find that hard to believe. What's the basis for that claim?")),(0,s.kt)("p",null,"I mean zero overhead ",(0,s.kt)("em",{parentName:"p"},"when it is disabled")," (which IIRC is what hixie(?) cares about a lot). "),(0,s.kt)("p",null,"Compiler explorer says it is zero overhead b/c the compiler just correctly understands it and eliminate the dead code: ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608021234516754444/1024141725024923688"},"https://discord.com/channels/608014603317936148/608021234516754444/1024141725024923688"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1029371064066785340",source:"discord",createTime:"2022-10-11T12:33:06.463+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'I am still working on the "Preemption for 60FPS", i.e. flutter_smooth, currently. Just having this (very rough) idea and want to share it here  ',(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/113281"},"https://github.com/flutter/flutter/issues/113281"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1029372886147944539",source:"discord",createTime:"2022-10-11T12:40:20.881+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(Spoiler: It tries to solve the ",(0,s.kt)("inlineCode",{parentName:"p"},"hot update")," problem)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-10-12T14:04:46Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"quick-update-listview-scrolling-at-60fps-with-heavy-buildlayout"},"Quick update: ListView scrolling at 60FPS with heavy build/layout"),(0,s.kt)("p",null,"Highlights:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It is 60FPS ",(0,s.kt)("small",null,"(check via splitting video into frames, and by my script to examine timeline tracing data; not checked this demo video though; you can find the script in my repo)")),(0,s.kt)("li",{parentName:"ul"},"The list shifting is (roughly) uniform speed (up to error from OS pointer events) ",(0,s.kt)("small",null,"(check via script to examine timeline tracing data; again script is in my repo)")),(0,s.kt)("li",{parentName:"ul"},"The system uses ",(0,s.kt)("inlineCode",{parentName:"li"},"gestureBinding.handlePointerEvent")," to dispatch ",(0,s.kt)("inlineCode",{parentName:"li"},"PointerMoveEvent"),"s")),(0,s.kt)("p",null,"Experiment setup: Slow build/layout when new item comes in. Full code can be seen in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth"},"https://github.com/fzyzcjy/flutter_smooth"),"."),(0,s.kt)("p",null,"May still contain (a lot of) bugs, since it is still WIP :)"),(0,s.kt)("p",null,"Video (firstly raw case, then use-flutter_smooth case):"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://user-images.githubusercontent.com/5236035/195363841-240fa44c-c471-412e-9c3d-3314cf6ed8ea.mp4"},"https://user-images.githubusercontent.com/5236035/195363841-240fa44c-c471-412e-9c3d-3314cf6ed8ea.mp4")),(0,s.kt)("p",null,"Sample screenshots from tracing and my script:"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/195364264-b84063a8-9a62-416c-8684-424dbc14ed4c.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/195364393-6ee2fa8c-697e-4298-92e6-c4a7a6cc7dd3.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1029756897949138994",source:"discord",createTime:"2022-10-12T14:06:16.429+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hi guys, quick update:")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1029756943549607967",source:"discord",createTime:"2022-10-12T14:06:27.301+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"ListView scrolling at 60FPS with heavy build/layout")),(0,s.kt)("p",null,"Highlights:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It is 60FPS ",(0,s.kt)("small",null,"(check via splitting video into frames, and by my script to examine timeline tracing data; not checked this demo video though; you can find the script in my repo)")),(0,s.kt)("li",{parentName:"ul"},"The list shifting is (roughly) uniform speed (up to error from OS pointer events) ",(0,s.kt)("small",null,"(check via script to examine timeline tracing data; again script is in my repo)")),(0,s.kt)("li",{parentName:"ul"},"The system uses ",(0,s.kt)("inlineCode",{parentName:"li"},"gestureBinding.handlePointerEvent")," to dispatch ",(0,s.kt)("inlineCode",{parentName:"li"},"PointerMoveEvent"),"s")),(0,s.kt)("p",null,"Experiment setup: Slow build/layout when new item comes in. Full code can be seen in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth"},"https://github.com/fzyzcjy/flutter_smooth"),"."),(0,s.kt)("p",null,"May still contain (a lot of) bugs, since it is still WIP \ud83d\ude42")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1029757309557157919",source:"discord",createTime:"2022-10-12T14:07:54.564+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Video (click to see):"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/101227#issuecomment-1276239303"},"https://github.com/flutter/flutter/issues/101227#issuecomment-1276239303"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://discord.com/channels/608014603317936148/608021234516754444/1029757386598121502",source:"discord",createTime:"2022-10-12T14:08:12.932+00:00",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://cdn.discordapp.com/attachments/608021234516754444/1029757386182901831/unknown.png",alt:"image"}))),(0,s.kt)(c,{author:"CaseyHillers",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-14T01:40:05Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy @goderbauer this is a breaking change. Can a migration guide be written on how developers can migrate their code with this change? I'm not sure what's needed on my end as a developer, and my animation tests are now very flaky.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-14T01:44:06Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@CaseyHillers Hi,"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Can a migration guide be written on how developers can migrate their code with this change? ...and my animation tests are now very flaky.")),(0,s.kt)("p",null,"Could you please share some flaky test minimal reproducible samples? IMHO this should not make any problem so want to see reproductions in order to know what happens")),(0,s.kt)(c,{author:"CaseyHillers",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-14T01:57:31Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Here's an example now that is flaky:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"      await tester.pumpWidget(myAnimatedWidget);\n      await tester.pumpAndSettle();\n\n      await tester.sendSelectEvent();\n\n      await tester.pumpFrames(scene, Duration(milliseconds: 100));\n      await expectLater(\n          find.byType(MyAnimatedWidget),\n          matchesGoldenFile(\n              'animated_widget'));\n")),(0,s.kt)("p",null,"The resulting goldens are changing. When I change ",(0,s.kt)("inlineCode",{parentName:"p"},"pumpFrames")," to microseconds, I am still seeing the same flakiness. I'm unsure if it's because the earlier clocks are still in millisecond mode.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-14T02:00:52Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@CaseyHillers Weird. Some possible ideas:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Do you have anything that depends on e.g. a real clock? If so, it will be flaky. (I guess no)"),(0,s.kt)("li",{parentName:"ol"},"Could you please change ",(0,s.kt)("inlineCode",{parentName:"li"},"MyAnimatedWidget")," to something like ",(0,s.kt)("inlineCode",{parentName:"li"},"AnimatedBuilder(builder: (_, value) => Text('the value is: $value')"),". Then, when the golden is changing, we can know what value indeed it is having.")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I'm unsure if it's because the earlier clocks are still in millisecond mode.")),(0,s.kt)("p",null,"Do you mean the new golden (i.e. after the PR) are different from old golden, and the new golden is itself stable? If so, looks like it is possible. Indeed the animation controller is fed with a changed animation time.")),(0,s.kt)(c,{author:"CaseyHillers",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-14T02:22:06Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"My animated widgets are just an animated builder that has a custom animation controller. @goderbauer or @pdblasi-google can help with reproducing the issue here."),(0,s.kt)("p",null,"My understanding is I need to change every possible clock to be in microseconds instead of milliseconds. This seems to be a breaking change for any other customers, and I'm having a difficult time tracking all the various clocks in my codebase."),(0,s.kt)("p",null,"I haven't found the discord threads, but I wonder if this is something that should be in the framework. There could be a tester field added for high precision or this can be added directly to your package. I assume most Flutter tests aren't needing high precision, and this is going to cause a lot of pain once it's in beta/stable.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-14T02:24:29Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@CaseyHillers "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I need to change every possible clock to be in microseconds instead of milliseconds")),(0,s.kt)("p",null,"Btw I am curious why a clock can in milliseconds in codebase - ",(0,s.kt)("inlineCode",{parentName:"p"},"clock")," package, ",(0,s.kt)("inlineCode",{parentName:"p"},"Duration"),", DateTime, etc are all in microseconds."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I haven't found the discord threads, but I wonder if this is something that should be in the framework. There could be a tester field added for high precision or this can be added directly to your package. I assume most Flutter tests aren't needing high precision, and this is going to cause a lot of pain once it's in beta/stable.")),(0,s.kt)("p",null,"I agree that an alternative solution is to use a bool flag to enable high-accuracy (I have done that indeed - ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/112609/commits/e0b5882b87bc8fe025d55d626ec663c8587522b7"},"https://github.com/flutter/flutter/pull/112609/commits/e0b5882b87bc8fe025d55d626ec663c8587522b7"),").")),(0,s.kt)(c,{author:"CaseyHillers",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-14T11:38:10Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I agree that an alternative solution is to use a bool flag to enable high-accuracy (I have done that indeed - ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/commit/e0b5882b87bc8fe025d55d626ec663c8587522b7"},"https://github.com/flutter/flutter/commit/e0b5882b87bc8fe025d55d626ec663c8587522b7"),").")),(0,s.kt)("p",null,"Thanks, that sounds like it would work for me! Are there plans to upstream that change?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-14T11:39:13Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@CaseyHillers I am ok with that, just not sure what other reviewers think? (Since that was my original design and later a reviewer suggests me to change to what is current merged.) If you guys are OK I will PR it.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113433",source:"github",createTime:"2022-10-14T11:46:19Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"reland-automatedtestwidgetsflutterbindingpump-provides-wrong-pump-time-stamp-probably-because-of-forgetting-the-precision-via-optional-flag"},"Reland ",(0,s.kt)("inlineCode",{parentName:"h3"},"AutomatedTestWidgetsFlutterBinding.pump")," provides wrong pump time stamp, probably because of forgetting the precision, via optional flag"),(0,s.kt)("p",null,"This relands ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/112609"},"https://github.com/flutter/flutter/pull/112609"),", but with a flag that is off by default. The reason why it is designed like this can be found in discussions around ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/112609#issuecomment-1278889389"},"https://github.com/flutter/flutter/pull/112609#issuecomment-1278889389"),"."),(0,s.kt)("p",null,"Close #112610"),(0,s.kt)("h2",{id:"pre-launch-checklist-11"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112609",source:"github",createTime:"2022-10-14T11:48:14Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@CaseyHillers Here is the PR: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/113433"},"https://github.com/flutter/flutter/pull/113433"))),(0,s.kt)(c,{author:"pdblasi-google",link:"https://github.com/flutter/flutter/issues/113433",source:"github",createTime:"2022-10-14T17:25:00Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy @CaseyHillers @goderbauer"),(0,s.kt)("p",null,"I still think that this change should be made without the boolean flag. The underlying issue with the goldens is that ",(0,s.kt)("inlineCode",{parentName:"p"},"pumpFrames")," defines ",(0,s.kt)("inlineCode",{parentName:"p"},"interval")," with microsecond precision, but the ",(0,s.kt)("inlineCode",{parentName:"p"},"AutomatedTestWidgetsFlutterBinding")," didn't support microsecond precision. @Piinks and I went over a couple of golden changes in the flutter repos test as well and accepted the changes to those goldens as they were a change to a correct state (which is why the goldens are current hanging for this PR)."),(0,s.kt)("p",null,"The secondary issue that makes this difficult to break cleanly is that ",(0,s.kt)("inlineCode",{parentName:"p"},"LiveWidgetsFlutterBinding")," ",(0,s.kt)("em",{parentName:"p"},"does")," support microsecond precision, so we can't just update ",(0,s.kt)("inlineCode",{parentName:"p"},"pumpFrames"),"' ",(0,s.kt)("inlineCode",{parentName:"p"},"interval")," parameter to be a clean 16 milliseconds by default, as that would break ",(0,s.kt)("em",{parentName:"p"},"other tests"),"."),(0,s.kt)("p",null,"To start with, the first paragraph in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking changes process")," says:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Sometimes, however, doing this is necessary for the greater good. We want our APIs to be intuitive; if being backwards-compatible requires making an API into something that we would never have designed that way unless forced to by circumstances, then we should instead break the API and make it good.")),(0,s.kt)("p",null,"Adding a boolean to make the ",(0,s.kt)("em",{parentName:"p"},"correct"),' behavior happen is not an API that we would have designed on purpose. It\'s also not a change that we can easily guide people to using, as there\'s no "new API" we can drive them towards with deprecations or data driven fixes. It\'d be something we introduce for a period of time, hope people read the blog, then end up running into the same "breaking change" issues when we eventually remove the boolean or default it to true.'),(0,s.kt)("p",null,"From there, digging into the process, the preferred process is the three step process:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Add new API and opt in to the new API"),(0,s.kt)("li",{parentName:"ol"},"Remove the old API"),(0,s.kt)("li",{parentName:"ol"},"Remove the opt in")),(0,s.kt)("p",null,"I think the only way we can get that to happen is to introduce a new version of ",(0,s.kt)("inlineCode",{parentName:"p"},"pumpFrames")," that would support the correct behavior, deprecate the current ",(0,s.kt)("inlineCode",{parentName:"p"},"pumpFrames"),", then eventually remove ",(0,s.kt)("inlineCode",{parentName:"p"},"pumpFrames"),". Here's what I'd propose:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Fix ",(0,s.kt)("inlineCode",{parentName:"li"},"AutomatedTestWidgetsFlutterBinding")," ",(0,s.kt)("em",{parentName:"li"},"without")," the flag"),(0,s.kt)("li",{parentName:"ul"},"Introduce a new method with the exact contents that ",(0,s.kt)("inlineCode",{parentName:"li"},"pumpFrames")," currently has:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"pumpFramesFor(\n  Widget target,\n  Duration duration, [\n    Duration interval = const Duration(milliseconds: 16, microseconds: 683),\n  ])\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Update ",(0,s.kt)("inlineCode",{parentName:"li"},"pumpFrames")," to pass through to the new ",(0,s.kt)("inlineCode",{parentName:"li"},"pumpFramesFor")," method:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Check ",(0,s.kt)("inlineCode",{parentName:"li"},"if (binding is AutomatedTestWidgetsFlutterBinding)")),(0,s.kt)("li",{parentName:"ul"},"If it is, then truncate the microseconds off of ",(0,s.kt)("inlineCode",{parentName:"li"},"interval")," before passing through to maintain the current incorrect behavior")))),(0,s.kt)("p",null,"My biggest concern with this approach is that ",(0,s.kt)("inlineCode",{parentName:"p"},"pumpFramesFor")," isn't as clean a name as just ",(0,s.kt)("inlineCode",{parentName:"p"},"pumpFrames"),", but it's the best I can come up with. Names aside, introducing a new method and deprecating the old is the only way I can think of to keep the existing behavior and actually be able to drive users to the new api before landing the correct behavior.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36556",source:"github",createTime:"2022-10-14T23:08:45Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"This is an artifact of what the code used to do, but it has since been refactored to not do that :)")),(0,s.kt)("p",null,"I guess so :) That is why I update it - otherwise it will mislead future readers")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113433",source:"github",createTime:"2022-10-14T23:13:36Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@pdblasi-google @CaseyHillers @goderbauer I agree with both sides of the opinion, both looks very reasonable to me. So just ping me when googlers reach a conclusion that what I should do!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36775",source:"github",createTime:"2022-10-15T02:11:34Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-wrong-vsync-event"},"Fix wrong ",(0,s.kt)("inlineCode",{parentName:"h3"},"VSYNC")," event"),(0,s.kt)("p",null,"Firstly, we know ",(0,s.kt)("inlineCode",{parentName:"p"},"VSYNC")," event in timeline is special - ",(0,s.kt)("inlineCode",{parentName:"p"},"chrome://tracing"),' tool will show "zebra" colors (gray and white) at every VSYNC. Therefore, it is critical to let this event have correct timing, otherwise every user is doing reasoning with the wrong vsync time.'),(0,s.kt)("p",null,'In the image below, the "a" shows the new VSYNC with this PR, while the "b" shows the old VSYNC interval before this PR. As we can see, the left side of "a" and "b" does not coincide. In other words, before this PR (where we have "b" as the VSYNC and there is no "a"), we consider the wrong time as the vsync time.'),(0,s.kt)("p",null,'The cause is quite simple: Before this PR, the left edge of "VSYNC" event is (for example) the call time of ',(0,s.kt)("inlineCode",{parentName:"p"},"VsyncWaiterAndroid::OnVsyncFromJava"),'. However, there exist "frame delay" (e.g. ',(0,s.kt)("inlineCode",{parentName:"p"},"frameDelayNanos")," argument in ",(0,s.kt)("inlineCode",{parentName:"p"},"OnVsyncFromJava"),"), so the real vsync time should minus that delay."),(0,s.kt)("p",null,"As a side remark, in the image below the difference is not very much, but in real scenarios, I have seen once in a while it has large differences. Then you know, the visualization goes wild, and it took me some time before I realized, it is not a bug in code anywhere, but a bug of the VSYNC event time."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/195964378-c509e647-7740-4e87-a19e-30fa4fee9221.png",alt:"image"})),(0,s.kt)("p",null,"Close #113475"),(0,s.kt)("h2",{id:"pre-launch-checklist-12"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/36775",source:"github",createTime:"2022-10-15T02:26:29Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113526",source:"github",createTime:"2022-10-17T11:55:09Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"allow-disable-report-timing-in-profile-build-since-it-takes-not-negligible-amount-of-time"},"Allow disable report timing in profile build since it takes not-negligible amount of time"),(0,s.kt)("p",null,"Flutter ",(0,s.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/dart-ui/PlatformDispatcher/onReportTimings.html"},"does say"),' the time cost is "less than 0.1ms every 1 second to report the timings measured on iPhone6S". However, not every mobile phone is as high-end as iPhone6S. For example, on my testing device (TRT-AL00, indeed not the lowest-end device!), I measured that it takes about 20-30ms per second. Then we have a problem. When having ',(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth"},"https://github.com/fzyzcjy/flutter_smooth"),", we know a big janky frame (say, takes 200ms) will never let user really feel janky, but instead user will see the app being 60FPS smooth. However, this is based on the assumption that misc work such as report timings should not block the UI thread for a continuous period of time - which is not true if report timings happens. After the 200ms janky frame, we see about 6ms of report timing. Among with other things such as dispatch touch events, they easily take up more than ~16ms and we get one jank. Then flutter_smooth is no longer smooth due to the jank."),(0,s.kt)("p",null,"Except for the case of flutter_smooth, IMHO this PR is also useful for normal Flutter users. It takes 2-3% of CPU time, which is not negligible and may be measured. In addition, this is not a critical feature. Surely, when this is disabled, the DevTool will not show the frame ui/rasterizer time at all. However, not everyone needs to read that timing data, since they may either do not open DevTool, or use the tracing timeline instead (which contains more than enough information to know the frame timing data). Therefore, it looks reasonable to at least give users a ",(0,s.kt)("em",{parentName:"p"},"chance")," (i.e. a flag) to disable it."),(0,s.kt)("p",null,"The code is deliberately written by reading a const bool environment variable. Therefore, it has completely zero overhead. I have confirmed that by using compiler explorer before - ",(0,s.kt)("a",{parentName:"p",href:"https://discordapp.com/channels/608014603317936148/608021234516754444/1024141682377236500"},"https://discordapp.com/channels/608014603317936148/608021234516754444/1024141682377236500"),"."),(0,s.kt)("h2",{id:"pre-launch-checklist-13"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36797",source:"github",createTime:"2022-10-17T12:33:38Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"expose-notifyidle-from-runtimecontroller-to-dart-allowing-flutter_smooth-to-get-60fps-even-if-gc-needs-to-run-for-14ms-per-1667ms"},"Expose ",(0,s.kt)("inlineCode",{parentName:"h3"},"NotifyIdle")," from RuntimeController to Dart, allowing ",(0,s.kt)("inlineCode",{parentName:"h3"},"flutter_smooth")," to get 60FPS, even if GC needs to run for 14ms per 16.67ms"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"The PR simply exposes ",(0,s.kt)("inlineCode",{parentName:"p"},"RuntimeController::NotifyIdle")," to the dart layer."),(0,s.kt)("p",null,"It is necessary for ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth"},"https://github.com/fzyzcjy/flutter_smooth")," because of the following commonly seen scenario: Suppose we are in a janky frame (say it takes 200ms). Then, NotifyIdle is ",(0,s.kt)("em",{parentName:"p"},"never")," called at all, because it is usually called at the end of DrawFrame (indeed, more exactly, in the Animator::AwaitVSync). Then, during the 200ms, garbage accumulates, and at one time the young generation is full, then Dart VM must stop the world and make a GC. From my experiments, such GC can even take 20ms on my testing device. Stop the world for 20ms - then we must miss one frames, causing non-60FPS. Even if the stop-the-world GC is fast, say, 5ms, it can still cause a jank. For example, when it happens at 97.5ms-102.5ms, then the preemptRender which should originally be done near 98-100ms can only be done at 105ms, so it calls window.render too late, thus the rasterizer may fail to rasterize the frame before the 116.67ms vsync, so there is a jank. (If needed, I can draw a figure)."),(0,s.kt)("p",null,"However, with this PR, there is no such problem at all. The flutter_smooth will call NotifyIdle immediately ",(0,s.kt)("em",{parentName:"p"},"after")," each and every preemptRender, with a deadline of roughly 14ms (16.67ms minus a few ms). By doing this, there are two benefits. Firstly, since the heap is not that full, GC can finish its work sooner instead of the 20ms bad case when the heap is really full. This avoids the 20ms-long-GC problem above. Secondly, since we actively tell Dart VM that it can start a GC at ",(0,s.kt)("em",{parentName:"p"},"this")," time, GC can run for a time duration as long as ~14ms without causing any jank. This is contrary to the discussion above, where even a 5ms GC can cause a frame jank. As for why it can run 14ms without causing trouble, it is because, suppose we start it at 100ms and it runs 14ms, then we are now at 114ms, and we start preemptRender. Since preemptRender is really fast (e.g. 2ms), we will submit window.render at 116ms. In other words, we submit window.render with sufficient time left for rasterizer to finish its job - as long as rasterizer finishes its job before 133.33ms, no jank will happen."),(0,s.kt)("p",null,"Therefore, the title is explained well: It allows ",(0,s.kt)("inlineCode",{parentName:"p"},"flutter_smooth")," to get 60FPS, even if GC needs to run for 14ms per 16.67ms. (That extreme GC will not happen in real world, I just want to say this proposal works even for that.)"),(0,s.kt)("p",null,"I have already done that for my engine branch and ran experiments on flutter_smooth. It works pretty well - originally I observe GC-caused janks and then they disappear after this fix. If you are interested I can present some data."),(0,s.kt)("p",null,"As for tests: Have not found a way to add tests for this very simple calling, may need a test exempt."),(0,s.kt)("h2",{id:"pre-launch-checklist-14"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/36797",source:"github",createTime:"2022-10-17T12:33:41Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113433",source:"github",createTime:"2022-10-17T23:04:19Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So... what should I do?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36820",source:"github",createTime:"2022-10-17T23:19:06Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-1-char-typo"},"Fix 1-char typo"),(0,s.kt)("p",null,"Well, just 1-char typo that I come across..."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Replace this paragraph with a description of what this PR is changing or adding, and why. Consider including before/after screenshots.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-15"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/36820",source:"github",createTime:"2022-10-17T23:19:09Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This pull request was opened against a branch other than ",(0,s.kt)("em",{parentName:"p"},"main"),". Since Flutter pull requests should not normally be opened against branches other than main, I have changed the base to main. If this was intended, you may modify the base back to master. See the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Release-process"},"Release Process")," for information about how other branches get updated."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Use caution before merging pull requests to branches other than main, unless this is an intentional hotfix/cherrypick.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36822",source:"github",createTime:"2022-10-17T23:41:12Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"eliminate-duplicated-code-when-dealing-with-pointer-data"},"Eliminate duplicated code when dealing with pointer data"),(0,s.kt)("p",null,"Hope the PR is self-explanatory :) If needed I can explain it."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-16"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"pdblasi-google",link:"https://github.com/flutter/flutter/issues/113433",source:"github",createTime:"2022-10-17T23:41:19Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@fzyzcjy"),(0,s.kt)("p",null,"If you're alright with it, I'd like to grab the issue from you to wrap it up. We'll need to make some changes internally and do some extra documentation to release this due to the internal test failures. If you'd like, I'll guide you through the extra docs and just handle the internal stuff myself, but I think it'll be easier with just one person working to get this landed.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113433",source:"github",createTime:"2022-10-17T23:42:16Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@pdblasi-google Sure :) so shall I close this issue now?")),(0,s.kt)(c,{author:"pdblasi-google",link:"https://github.com/flutter/flutter/issues/113433",source:"github",createTime:"2022-10-17T23:43:11Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This PR yes. I'll still work off of the original issue so we can keep the wonderful history of this surprisingly complex issue! \ud83d\ude1b ")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113433",source:"github",createTime:"2022-10-17T23:44:15Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@pdblasi-google Looking forward to see it landed!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36826",source:"github",createTime:"2022-10-18T02:52:56Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"speed-up-pointer-data-packet-dispatching-by-roughly-2x-when-multiple-packets-come"},"Speed up pointer data packet dispatching by roughly 2x when multiple packets come"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("h4",{id:"benefits-for-flutter-without-considering-flutter_smooth"},"Benefits for Flutter (without considering flutter_smooth)"),(0,s.kt)("p",null,"Multiple pointer data packets often arrive in one vsync interval. Currently, each of them requires a PostTask, C++-to-Dart-call, etc. However, when there is already one ",(0,s.kt)("em",{parentName:"p"},"pending")," PostTask and a second data packet arrives, we can optimize it - no need to schedule a second PostTask and C++-to-Dart call, but instead utilize the pending PostTask and submit more data inside one call."),(0,s.kt)("p",null,"How much speed up does it give: Consider the following screenshot (It happens after a long janky frame, but serves pretty well for us to compute numbers because it contains a lot of items - the average measure error will be much smaller). As we can see,"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"total wall time: ~8.2ms"),(0,s.kt)("li",{parentName:"ul"},"total Dart time (measured by the ",(0,s.kt)("inlineCode",{parentName:"li"},"_handlePointerDataPacket")," time, which is the 4th purple row. I made an extra Timeline event to measure that): ~3.2ms")),(0,s.kt)("p",null,"Therefore, if we merge multiple into one, we can get roughly 2x speed up, because it removes those idle periods between them, as well as some of the big overhead between Engine::DispatchPointerDataPacket and the real Dart code execution."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/196432743-3e1c59b0-29d8-4139-9134-25e361785515.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/196433392-c76ed644-4df1-4d5d-82ab-4eea9ed3a0ed.png",alt:"image"})),(0,s.kt)("p",null,"Concrete cases when this happens:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"When it janks, this PR helps speed up. For example, many Android devices provide two data packets per vsync interval. So suppose somehow the UI thread took 30ms to compute a frame, then this approach will merge 3-4 packet deliver into one."),(0,s.kt)("li",{parentName:"ol"},"In some devices, speedup due to this PR happens in each and every time. For example, below is a tracing on a test phone. As you can see, it delivers 4 pointer data packets per frame. Consider what will happen when UI thread needs (e.g.) 15ms to compute (unlike what is in the screenshot which is very lightweight workload indeed). Then, the first 3 out of 4 packets will be able to be merged by this PR.")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/196432383-79921b20-791e-4b51-b3a7-14e671bfea41.png",alt:"image"})),(0,s.kt)("h4",{id:"benefits-for-flutter_smooth"},"Benefits for flutter_smooth"),(0,s.kt)("p",null,"The analysis is similar to above. However, since there are a lot of big janky frames in flutter_smooth, it is common to see a dozen of pointer event dispatching after that long janky frame. Therefore, this PR makes that part much much faster."),(0,s.kt)("h2",{id:"pre-launch-checklist-17"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing. --- ",(0,s.kt)("em",{parentName:"li"},"Note: I will fix CI later after hearing some review feedbacks, because after review feedback the code itself may change a lot, so I do not want to waste time to fix to-be-thrown code :)"))),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36834",source:"github",createTime:"2022-10-18T12:27:06Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"make-deadline-of-notifyidle-configurable-allowing-flutter_smooth-to-get-60fps-even-if-gc-needs-to-run-for-14ms-per-1667ms"},"Make deadline of ",(0,s.kt)("inlineCode",{parentName:"h3"},"NotifyIdle")," configurable, allowing ",(0,s.kt)("inlineCode",{parentName:"h3"},"flutter_smooth")," to get 60FPS, even if GC needs to run for 14ms per 16.67ms"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This PR is similar to ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36797"},"https://github.com/flutter/engine/pull/36797"),". However, it addresses another portion of the GC-caused-jank problem."),(0,s.kt)("p",null,"Consider the following case: For each frame, UI thread needs to run for 16.00ms. Then:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Without this PR and without flutter_smooth"),': We know NotifyIdle will be called after the frame ends (more specifically, at AwaitVSync), and the "deadline" argument of NotifyIdle is set to "next_vsync_time - current_time". In other words, it is 16.67-16=0.67ms in our scenario. When DartVM receives this NotifyIdle call, it estimates how long a young GC needs, and realize it needs more than 0.67ms, so it do not call any young GC here. Therefore, garbage starts to accumulate. Finally, at one time, (young) GC must happen because the heap is full. At that time, Dart VM will stop the world for (e.g.) 10ms. Given that the UI thread needs 16.00ms to compute the content of one frame, the 10ms stop-the-world means it must miss at least one deadline. Thus, it janks whenever GC comes.'),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"With this PR and flutter_smooth"),': No such problem at all. Let\'s consider one specific frame. Suppose the UI thread runs from 0.00-16.00ms and finished computing the content. Then, when calling NotifyIdle, I will deliberately set the "deadline" to be "next_vsync_time - current_time + 14ms". In other words, DartVM is now notified that, it has 14.67ms (instead of 0.67ms as before). Given this loose deadline, Dart VM happily executes a young GC (when it feels needed) using (e.g.) 10ms. Now we are at 26.00ms and the next frame begins. Given that we are using flutter_smooth, we can easily deliver an extra smooth frame when needed near 33.33ms, even though the plain-old frame needs 16.00ms to compute. Therefore, GC is triggered at proper time that does not cause any jank. And since NotifyIdle is triggered per 16.67ms with sufficient deadline (>14ms deadline duration), Dart VM will do GC at these period, so there will be no GC mentioned in the previous case which happens at random location causing UI to jank.'),(0,s.kt)("p",null,"In conslusion, this PR allows ",(0,s.kt)("inlineCode",{parentName:"p"},"flutter_smooth")," to get 60FPS, even if GC needs to run for (e.g.) 14ms per 16.67ms."),(0,s.kt)("h2",{id:"pre-launch-checklist-18"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on ------ I deliberately do not add any tests yet, because the test are trivial and I want to listen to some feedbacks first (e.g. changing the PR). After feedbacks I will definitely add tests, no worries :)\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36837",source:"github",createTime:"2022-10-18T13:42:58Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-jank-and-large-jumping-frame-by-controlling-rasterizer-ending-time"},"Fix jank and large-jumping frame by controlling rasterizer ending time"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Consider the problem - what will happen, when the computation latency becomes lower temporarily? Looks like it is a good thing, since faster means better; many FPS monitors also do not think this is a problem. Spoiler: It is a bad thing - pay a jank."),(0,s.kt)("p",null,'Detailed analysis is as follows. To begin with, let us define "latency" as the number of frames it takes from starting drawing frame to ending rasterization. Now, what happens when latency temporarily drops to 1 for one or some frames, while it is 2 in other frames? This is separted to two parts: latency decrease (2->1) and increase (1->2).'),(0,s.kt)("p",null,'The decrease itself does not introduce jank, but causes a uncomfortable "jumping" feeling from the user (will be discussed in the "linearlity" section later). For example, say frame a (0.00-16.67ms) has latency 2, frame b (16.67-33.33ms) has latency 2, and frame c (33.33-50.00ms) has latency 1. Then, at 33.33ms, content of frame a is displayed. However, at 50.00ms, both the content from frame b and frame c wants to be displayed to screen, so frame b will never be shown and only frame c is shown. If it is a linear moving animation with 1px per millisecond, we will see offset being 0 (frame a) at 33.33ms and offset being 33.33px (frame c) at 50.00ms, while we know all other frames will introduce an offset of 16.67px per frame. Thus a big jump happens.'),(0,s.kt)("p",null,"As for the increase (1->2), it will introduce one jank. Suppose frame 0.00-16.67ms has latency 1, and 16.67-33.33ms has latency 2. Then, the rasterizer will provide new content to screen only at 16.67ms and 50.00ms, not at 33.33ms, and there is a jank."),(0,s.kt)("p",null,'Similar analysis holds for any latency change. For example, "1->2->1" latency change will cause a jank and then a uncomfortable big-jump.'),(0,s.kt)("p",null,"Does this happen in real world? Yes, and quite frequently! I do observe it a lot of times in my tracing timeline. For example, the UI+rasterizer time may be ",(0,s.kt)("em",{parentName:"p"},"near")," 16.67ms with fluctuation, then we do see a lot of 1->2 / 2->1 latency change. As another example, sometimes a frame may be much faster or slower to compute."),(0,s.kt)("p",null,"That is what this PR solves. Let's discuss by concrete numbers. Suppose latency is always 2 for a lot of frames, and suddenly in this frame latency drop to 1. Then, this PR will delay the rasterizer ending by sleeping (or can be changed to signaling or whatever you like). It will sleep (shortly speaking) to the next vsync, such that after the sleep, this frame has latency 2. No worries if the sleep happens to be a bit longer - it is still latency 2 if that happens."),(0,s.kt)("p",null,"Related: ",(0,s.kt)("a",{parentName:"p",href:"https://cjycode.com/flutter_smooth/benchmark/pitfall/latency-change"},"https://cjycode.com/flutter_smooth/benchmark/pitfall/latency-change")),(0,s.kt)("h2",{id:"pre-launch-checklist-19"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on writing and running engine tests.  --- ",(0,s.kt)("em",{parentName:"li"},"I will add tests and refine code and enhance strategy etc after some code review - since review may request changing the code :)")),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/36837",source:"github",createTime:"2022-10-18T13:43:03Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/101227",source:"github",createTime:"2022-10-18T14:19:18Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"flutter_smooth-package-is-out-now-"},(0,s.kt)("inlineCode",{parentName:"h3"},"flutter_smooth")," package is out now :)"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth"},"https://github.com/fzyzcjy/flutter_smooth")),(0,s.kt)("p",null,"(forgot to mention it here yesterday...)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36856",source:"github",createTime:"2022-10-19T00:56:17Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"maybe-another-typo-2-char-only"},"Maybe another typo (2 char only)"),(0,s.kt)("p",null,"Hope there exist a more lightweight way to fix typos..."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Replace this paragraph with a description of what this PR is changing or adding, and why. Consider including before/after screenshots.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"List which issues are fixed by this PR. You must list at least one issue.")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If you had to change anything in the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/tests"},"flutter/tests")," repo, include a link to the migration guide as per the ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes"},"breaking change policy"),".")),(0,s.kt)("h2",{id:"pre-launch-checklist-20"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36856",source:"github",createTime:"2022-10-19T00:57:58Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"My bad, it is correct :)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36911",source:"github",createTime:"2022-10-21T03:39:49Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-janks-caused-by-await-vsync-in-classical-flutter"},"Fix janks caused by await vsync in classical Flutter"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"This fixes the jank happened in ",(0,s.kt)("strong",{parentName:"em"},"classical")," Flutter, even without the existence of flutter_smooth")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"I will add tests and refine code etc after some code review - since review may request changing the code :)")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"This works pretty well in flutter_smooth, see ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/fzyzcjy/engine/blob/flutter-smooth/shell/common/animator.cc"},"https://github.com/fzyzcjy/engine/blob/flutter-smooth/shell/common/animator.cc")," for full code.")),(0,s.kt)("p",null,"During experiments, I observe a phenomenon: Even when the UI thread finishes everything ",(0,s.kt)("em",{parentName:"p"},"before")," the deadline (vsync) a few milliseconds, the next frame is scheduled ",(0,s.kt)("em",{parentName:"p"},"one")," vsync later, causing one jank. For example, UI thread may run from 0-15ms, but the next frame starts from 33.33ms instead of the correct 16.67ms."),(0,s.kt)("p",null,"An example screenshot can be seen at the end of this proposal. I added a timeline event, ",(0,s.kt)("inlineCode",{parentName:"p"},"Animator::AwaitVSync"),", so we can clearly see when vsync await is called. (This screenshot has roughly 3ms space; but more frequently, I see this bug when there is about 0.5-2ms space.)"),(0,s.kt)("p",null,"Therefore, this PR tries to fix this problem. The main idea is that, when detecting we are very near the next vsync, we do not wait at all, but instead directly start the next frame."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/197105732-7c0bfbad-8816-46c0-85b1-5007d0f82d5d.png",alt:"image"})),(0,s.kt)("p",null,"zoom in:"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/197105742-c511137c-3089-4ff9-b102-52bdfcfc72f9.png",alt:"image"})),(0,s.kt)("p",null,"further zoom in:"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/197105754-fd471b8f-1ae7-45cb-b4d8-3163beb0d87a.png",alt:"image"})),(0,s.kt)("h2",{id:"pre-launch-checklist-21"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests. -- see above"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/36911",source:"github",createTime:"2022-10-21T03:39:52Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36912",source:"github",createTime:"2022-10-21T03:47:57Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"remove-3n-1-jank-and-big-jump-when-n-rasterization-misses-deadline"},"Remove (3N-1) jank and big-jump when N rasterization misses deadline"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"This fixes the jank happened in ",(0,s.kt)("strong",{parentName:"em"},"classical")," Flutter, even without the existence of flutter_smooth")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"This PR works with ",(0,s.kt)("a",{parentName:"em",href:"https://github.com/flutter/engine/pull/36438"},"https://github.com/flutter/engine/pull/36438"))),(0,s.kt)("p",null,"This optimization holds for both classical Flutter and flutter_smooth - indeed the figure below is for classical Flutter."),(0,s.kt)("p",null,"In experiments, I do see rasterization takes longer time once in a while, instead of having the exact same duration. Experiments show that, a portion of rasterization ends a little bit later than the deadline (the vsync), while all others meet the deadline."),(0,s.kt)("p",null,"The following figure demonstrates the case. Given that this code change is unrelated to flutter_smooth, the scenario assumes UI is fast and no flutter_smooth exist at all. If using flutter_smooth, things are similar indeed. The first row is the case without code change to ",(0,s.kt)("inlineCode",{parentName:"p"},"animator.cc"),", and the second row is the case with (1) this change (2) plus the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36837"},"https://github.com/flutter/engine/pull/36837")," change."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/197106713-0d90c6e6-918f-4c0f-b005-4a35e460b64c.png",alt:"image"})),(0,s.kt)("p",null,"Consider the frame starting at time 1. In the first row, when the rasterization misses the deadline a little bit (seen in time 2-3), there is nothing new to be shown to the screen, so time 2-3 yields a jank. This is inevitable and also holds for the second row - indeed the only jank in the second row."),(0,s.kt)("p",null,'Now consider the frame starting at time 2. It yields a big jump in classical Flutter, because the scene "1" (rasterized at about time 3.1) never has a chance to be shown to the screen. The second row does not have the problem because of the deliberate sleep.'),(0,s.kt)("p",null,"Then comes the frame starting at time 3. In classical Flutter, the ",(0,s.kt)("inlineCode",{parentName:"p"},"Animator::BeginFrame")," early returns, and thus no Dart pipeline is run, because it detects the pipeline is full. The pipeline is full because it is occupied with both the frame around 1-3.1 and the frame around 2-3.9. However, we are too pessimisitic about this - even though the pipeline is full at the ",(0,s.kt)("em",{parentName:"p"},"beginning")," of BeginFrame, it may not be full at the ",(0,s.kt)("em",{parentName:"p"},"end")," when we really need to call ",(0,s.kt)("inlineCode",{parentName:"p"},"Animator::Render")," and enqueue a real scene to rasterizer. Thus, the classical Flutter (row 1) voluntarily give up a whole frame causing a jank, while the proposed solution runs the normal pipeline and produce a new scene."),(0,s.kt)("p",null,"Next is the frame starting at time 4, which we again assume its rasterization misses the deadline a little bit. All frames starting at this one indeed mimics the analysis above, so we do not repeate here. The interesting thing is that, the proposed solution ",(0,s.kt)("em",{parentName:"p"},"no longer")," yields a jank anymore."),(0,s.kt)("p",null,"So, if we count the numbers, there are 3N janks in the first row (where N is the number of slightly missing deadline), and only 1 jank in the second row."),(0,s.kt)("p",null,"The drawback is that, the latency is increased by one frame, until the end of current frame chain (such as when animation finally finishes). However, when scrolling or touching, this seems better than having a large annoying jump in the UI - which is directly perceptible by human eyes easily. My test mobile phone has intrinsic (i.e. OS/hardware constraints) touch event latency of about 100ms, so adding 16ms to it looks almost non-distinguishable. Of course, if someone is developing a game, having low latency may be more important."),(0,s.kt)("p",null,'The same analysis also holds for any "latency changes from 2 to 3 to 2" scenario. For example, the "latency being 3" may last for more than one frame (contrary to the figure), with flutter_smooth.'),(0,s.kt)("p",null,"As a remark, flutter_smooth is indeed implicitly doing something similar when ",(0,s.kt)("em",{parentName:"p"},"in the middle of"),' a plain jank frame. As we know, when a preempt render is about to start (analogy to "when ',(0,s.kt)("inlineCode",{parentName:"p"},"Animator::BeginFrame"),' is called"), we never skip it if pipeline is full (analyogy to the code change to BeginFrame). This works well in experiments.'),(0,s.kt)("p",null,"P.S. Indeed, this is not something caused by flutter_smooth (since it is ",(0,s.kt)("em",{parentName:"p"},"rasterizer")," slowness instead of build/layout slowness), but I have found a way trying to improve it."),(0,s.kt)("h2",{id:"pre-launch-checklist-22"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests. -- see above"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/36912",source:"github",createTime:"2022-10-21T03:47:59Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36916",source:"github",createTime:"2022-10-21T06:21:51Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"add-peekpointerdatapacket-to-get-pointer-data-packets-earlier"},"Add ",(0,s.kt)("inlineCode",{parentName:"h3"},"peekPointerDataPacket")," to get pointer data packets earlier"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This is needed by flutter_smooth in order to handle events. More specifically, when we are in the middle of a long jank frame, flutter_smooth will do preempt render. When doing preempt render, it needs to read and dispatch the pointer events, otherwise the UI will not respond to user fingers at all. "),(0,s.kt)("p",null,"Related: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth/blob/feat%2Fdoc-insight/website/docs/design/infra/gesture/impl.md"},"https://github.com/fzyzcjy/flutter_smooth/blob/feat%2Fdoc-insight/website/docs/design/infra/gesture/impl.md")),(0,s.kt)("h2",{id:"pre-launch-checklist-23"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests. -- see above"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36917",source:"github",createTime:"2022-10-21T06:40:25Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"provide-fallback-vsync-target-time-for-windowrender"},"Provide fallback vsync target time for ",(0,s.kt)("inlineCode",{parentName:"h3"},"window.render")),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This works together with a few other PRs: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36438"},"https://github.com/flutter/engine/pull/36438")," (to support multi render), ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36837"},"https://github.com/flutter/engine/pull/36837")," (which consumes vsync tagret time)."),(0,s.kt)("p",null,"In order to make ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36837"},"https://github.com/flutter/engine/pull/36837")," and other Flutter logic work, we need to provide the correct vsync target time. However, currently the fallback target time is filled as the current time, which is surely incorrect and caused bugs for things like ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36837"},"https://github.com/flutter/engine/pull/36837"),"."),(0,s.kt)("h2",{id:"pre-launch-checklist-24"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests. -- see above"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/36917",source:"github",createTime:"2022-10-21T06:40:28Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36918",source:"github",createTime:"2022-10-21T06:43:30Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-incorrect-newline-in-pull-request-template"},"Fix incorrect newline in pull request template"),(0,s.kt)("p",null,"Just one char fix :)"),(0,s.kt)("p",null,"Before this fix, it looks like the following on github, with a bug newline:"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/197130193-c881ee49-11a9-4e39-995d-86fc60872810.png",alt:"image"})),(0,s.kt)("h2",{id:"pre-launch-checklist-25"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113817",source:"github",createTime:"2022-10-21T07:14:04Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-errors-when-using-multiple-buildpipeline-owners"},"Fix errors when using multiple build/pipeline owners"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Close ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/114002"},"https://github.com/flutter/flutter/issues/114002")),(0,s.kt)("p",null,"We all know that, Flutter allows us to create our own ",(0,s.kt)("inlineCode",{parentName:"p"},"BuildOwner")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"PipelineOwner"),", and here is even an official example: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/blob/master/examples/api/lib/widgets/framework/build_owner.0.dart"},"https://github.com/flutter/flutter/blob/master/examples/api/lib/widgets/framework/build_owner.0.dart"),". The doc also agrees with that. For example:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"You can create other pipeline owners to manage off-screen objects, which can flush their pipelines independently of the on-screen render objects. (",(0,s.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/rendering/PipelineOwner-class.html"},"https://api.flutter.dev/flutter/rendering/PipelineOwner-class.html"),")")),(0,s.kt)("p",null,"And"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Additional build owners can be built to manage off-screen widget trees. (",(0,s.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/BuildOwner-class.html"},"https://api.flutter.dev/flutter/widgets/BuildOwner-class.html"),")")),(0,s.kt)("p",null,"Therefore, theoretically, we should be able to happily use our own ",(0,s.kt)("inlineCode",{parentName:"p"},"BuildOwner")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"PipelineOwner")," anywhere freely. However, it has a bug as follows: If I call ",(0,s.kt)("inlineCode",{parentName:"p"},"pipelineOwner.flushPaint();")," (and sibling methods) ",(0,s.kt)("em",{parentName:"p"},"inside")," the layout phase of the main PipelineOwner, then I get an assertion error in debug mode."),(0,s.kt)("p",null,"The root cause is that, even though the self-managed PipelineOwner is isolated from the flutter-managed PipelineOwner, the debug variable ",(0,s.kt)("inlineCode",{parentName:"p"},"RenderObject.debugActiveLayout")," is shared. Therefore, when calling flushPaint on self-manged PipelineOwner within a call of flushLayout of flutter-managed PipelineOwner, the assertions get confused and wrongly throws."),(0,s.kt)("p",null,"My hack can be seen in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth/blob/0c5db0ff270aa0c8cff28ea19055999627a8df6d/packages/smooth/lib/src/infra/auxiliary_tree_pack.dart#L214"},"https://github.com/fzyzcjy/flutter_smooth/blob/0c5db0ff270aa0c8cff28ea19055999627a8df6d/packages/smooth/lib/src/infra/auxiliary_tree_pack.dart#L214"),". Copy it here for completeness:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"...\n        _temporarilyRemoveDebugActiveLayout(() {\n          pipelineOwner.flushPaint();\n        });\n...\n\nvoid _temporarilyRemoveDebugActiveLayout(VoidCallback f) {\n  // NOTE we have to temporarily remove debugActiveLayout\n  // b/c [SecondTreeRootView.paint] is called inside [preemptRender]\n  // which is inside main tree's build/layout.\n  // thus, if not set it to null we will see error\n  // https://github.com/fzyzcjy/yplusplus/issues/5783#issuecomment-1254974511\n  // In short, this is b/c [debugActiveLayout] is global variable instead\n  // of per-tree variable\n  // and also\n  // https://github.com/fzyzcjy/yplusplus/issues/5793#issuecomment-1256095858\n  final oldDebugActiveLayout = RenderObject.debugActiveLayout;\n  RenderObject.debugActiveLayout = null;\n  try {\n    f();\n  } finally {\n    RenderObject.debugActiveLayout = oldDebugActiveLayout;\n  }\n}\n")),(0,s.kt)("p",null,"However, for this to work, the ",(0,s.kt)("inlineCode",{parentName:"p"},"debugActiveLayout")," setter must be public."),(0,s.kt)("p",null,"The most naive solution is to make it public, but that may violate encapsulation. Thus, in the proposed PR, I create a method to wrap that."),(0,s.kt)("h3",{id:"reproduction-code-and-output"},"Reproduction code and output"),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  testWidgets('When call PipelineOwner.flushPaint inside another PipelineOwner.flushLayout', (tester) async {\n    int onPerformLayoutCount = 0;\n    await tester.pumpWidget(_SpyLayoutBuilder(onPerformLayout: () {\n      onPerformLayoutCount++;\n\n      const Widget widget = ColoredBox(color: Colors.green, child: SizedBox(width: 100, height: 100));\n\n      // mimic https://github.com/flutter/flutter/blob/master/examples/api/lib/widgets/framework/build_owner.0.dart\n      final PipelineOwner pipelineOwner = PipelineOwner();\n      final MeasurementView rootView = pipelineOwner.rootNode = MeasurementView();\n      final BuildOwner buildOwner = BuildOwner(focusManager: FocusManager());\n      final RenderObjectToWidgetElement<RenderBox> element = RenderObjectToWidgetAdapter<RenderBox>(\n        container: rootView,\n        debugShortDescription: '[root]',\n        child: widget,\n      ).attachToRenderTree(buildOwner);\n\n      rootView.scheduleInitialLayout();\n      rootView.scheduleInitialPaint(TransformLayer(transform: Matrix4.identity())..attach(rootView));\n      buildOwner.buildScope(element);\n      pipelineOwner.flushLayout();\n      pipelineOwner.flushPaint();\n    }));\n\n    expect(onPerformLayoutCount, 1);\n  });\n}\n\nclass MeasurementView extends RenderBox with RenderObjectWithChildMixin<RenderBox> {\n  @override\n  void performLayout() {\n    assert(child != null);\n    child!.layout(const BoxConstraints(), parentUsesSize: true);\n    size = child!.size;\n  }\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    print('hi ${describeIdentity(this)}.paint');\n    context.paintChild(child!, offset);\n  }\n\n  @override\n  bool get isRepaintBoundary => true;\n\n  @override\n  Rect get paintBounds => Offset.zero & size;\n\n  @override\n  void debugAssertDoesMeetConstraints() => true;\n}\n\nclass _SpyLayoutBuilder extends SingleChildRenderObjectWidget {\n  final VoidCallback onPerformLayout;\n\n  const _SpyLayoutBuilder({required this.onPerformLayout});\n\n  @override\n  _RenderSpyLayoutBuilder createRenderObject(BuildContext context) => _RenderSpyLayoutBuilder(\n        onPerformLayout: onPerformLayout,\n      );\n\n  @override\n  void updateRenderObject(BuildContext context, _RenderSpyLayoutBuilder renderObject) {\n    renderObject.onPerformLayout = onPerformLayout;\n  }\n}\n\nclass _RenderSpyLayoutBuilder extends RenderProxyBox {\n  _RenderSpyLayoutBuilder({\n    required this.onPerformLayout,\n    RenderBox? child,\n  }) : super(child);\n\n  VoidCallback onPerformLayout;\n\n  @override\n  void performLayout() {\n    super.performLayout();\n    onPerformLayout();\n  }\n}\n"))),(0,s.kt)("p",null,"yields"),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"00:08 +0: When call PipelineOwner.flushPaint inside another PipelineOwner.flushLayout                                                  \n\u2550\u2550\u2561 EXCEPTION CAUGHT BY RENDERING LIBRARY \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nThe following assertion was thrown during performLayout():\nRenderBox.size accessed beyond the scope of resize, layout, or permitted parent access. RenderBox\ncan always access its own size, otherwise, the only object that is allowed to read RenderBox.size is\nits parent, if they have said they will. It you hit this assert trying to access a child's size,\npass \"parentUsesSize: true\" to that child's layout().\n'package:flutter/src/rendering/box.dart':\nFailed assertion: line 2009 pos 13: 'debugDoingThisResize || debugDoingThisLayout ||\n_computingThisDryLayout ||\n              (RenderObject.debugActiveLayout == parent && size._canBeUsedByParent)'\n\nEither the assertion indicates an error in the framework itself, or we should provide substantially\nmore information in this error message to help you determine and fix the underlying cause.\nIn either case, please report this assertion by filing a bug on GitHub:\n  https://github.com/flutter/flutter/issues/new?template=2_bug.md\n\nThe relevant error-causing widget was:\n  _SpyLayoutBuilder\n  _SpyLayoutBuilder:file:///Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart:9:29\n\nWhen the exception was thrown, this was the stack:\n#2      RenderBox.size.<anonymous closure> (package:flutter/src/rendering/box.dart:2009:13)\n#3      RenderBox.size (package:flutter/src/rendering/box.dart:2022:6)\n#4      MeasurementView.paintBounds (file:///Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart:53:41)\n#5      PaintingContext._repaintCompositedChild (package:flutter/src/rendering/object.dart:154:56)\n#6      PaintingContext.repaintCompositedChild (package:flutter/src/rendering/object.dart:98:5)\n#7      PipelineOwner.flushPaint (package:flutter/src/rendering/object.dart:1116:31)\n#8      main.<anonymous closure>.<anonymous closure> (file:///Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart:28:21)\n#9      _RenderSpyLayoutBuilder.performLayout (file:///Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart:86:20)\n#10     RenderObject.layout (package:flutter/src/rendering/object.dart:2135:7)\n#11     RenderBox.layout (package:flutter/src/rendering/box.dart:2418:11)\n#12     RenderView.performLayout (package:flutter/src/rendering/view.dart:170:14)\n#13     RenderObject._layoutWithoutResize (package:flutter/src/rendering/object.dart:1973:7)\n#14     PipelineOwner.flushLayout (package:flutter/src/rendering/object.dart:999:18)\n#15     AutomatedTestWidgetsFlutterBinding.drawFrame (package:flutter_test/src/binding.dart:1194:23)\n#16     RendererBinding._handlePersistentFrameCallback (package:flutter/src/rendering/binding.dart:378:5)\n#17     SchedulerBinding._invokeFrameCallback (package:flutter/src/scheduler/binding.dart:1175:15)\n#18     SchedulerBinding.handleDrawFrame (package:flutter/src/scheduler/binding.dart:1104:9)\n#19     AutomatedTestWidgetsFlutterBinding.pump.<anonymous closure> (package:flutter_test/src/binding.dart:1057:9)\n#22     TestAsyncUtils.guard (package:flutter_test/src/test_async_utils.dart:71:41)\n#23     AutomatedTestWidgetsFlutterBinding.pump (package:flutter_test/src/binding.dart:1043:27)\n#24     WidgetTester.pumpWidget.<anonymous closure> (package:flutter_test/src/widget_tester.dart:554:22)\n#27     TestAsyncUtils.guard (package:flutter_test/src/test_async_utils.dart:71:41)\n#28     WidgetTester.pumpWidget (package:flutter_test/src/widget_tester.dart:551:27)\n#29     main.<anonymous closure> (file:///Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart:9:18)\n#30     testWidgets.<anonymous closure>.<anonymous closure> (package:flutter_test/src/widget_tester.dart:171:29)\n<asynchronous suspension>\n<asynchronous suspension>\n(elided 7 frames from class _AssertionError, dart:async, and package:stack_trace)\n\nThe following RenderObject was being processed when the exception was fired: _RenderSpyLayoutBuilder#f19a8:\n  creator: _SpyLayoutBuilder \u2190 [root]\n  parentData: <none>\n  constraints: BoxConstraints(w=800.0, h=600.0)\n  size: Size(800.0, 600.0)\nThis RenderObject has no descendants.\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n00:08 +0 -1: When call PipelineOwner.flushPaint inside another PipelineOwner.flushLayout [E]                                           \n  Test failed. See exception logs above.\n  The test description was: When call PipelineOwner.flushPaint inside another PipelineOwner.flushLayout\n  \n\nTo run this test again: /Users/tom/fvm/versions/3.3.5/bin/cache/dart-sdk/bin/dart test /Users/tom/Main/yplusplus/frontend/yplusplus/test/a.dart -p vm --plain-name 'When call PipelineOwner.flushPaint inside another PipelineOwner.flushLayout'\n00:08 +0 -1: Some tests failed.                                  \n"))),(0,s.kt)("h3",{id:"performance-overhead"},"Performance overhead"),(0,s.kt)("p",null,"Using compiler explorer, we can see that it does not generate worse assembly (as long as we use the prefer-inline pragma)"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://godbolt.org/z/EoznoWex7"},"https://godbolt.org/z/EoznoWex7")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/197767410-b9b110cd-584e-4362-b2bf-c9c766ef44e2.png",alt:"image"})),(0,s.kt)("h2",{id:"pre-launch-checklist-26"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),". -- see above"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/flutter/issues/113817",source:"github",createTime:"2022-10-21T07:14:08Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113828",source:"github",createTime:"2022-10-21T10:40:45Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"expose-tickerstarttime-so-users-know-the-start-time-and-the-absolute-time"},"Expose ",(0,s.kt)("inlineCode",{parentName:"h3"},"Ticker.startTime")," so users know the start time and the absolute time"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Currently, the user of ",(0,s.kt)("inlineCode",{parentName:"p"},"Ticker")," only knows the ",(0,s.kt)("inlineCode",{parentName:"p"},"elapsed")," time. However, it looks reasonable to allow the user to know when the ticker thinks it ",(0,s.kt)("em",{parentName:"p"},"starts")," ticking."),(0,s.kt)("p",null,"If this does not wanted to be widely used, maybe we can mark it as ",(0,s.kt)("inlineCode",{parentName:"p"},"@protected")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"@visibleForTesting")," or ",(0,s.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/meta/latest/meta/experimental-constant.html"},(0,s.kt)("inlineCode",{parentName:"a"},"@experimental")),"."),(0,s.kt)("p",null,'As for where it is needed inside flutter_smooth, it is utilized to know the relative time between a few Tickers as well as the system. In other words, when Ticker A says it elapsed 1 second, flutter_smooth needs to know the startTime such that it knows what "1second" means in absolute time. Detailed code can be seen in ',(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth/blob/0c5db0ff270aa0c8cff28ea19055999627a8df6d/packages/smooth/lib/src/drop_in/list_view/shift.dart#L352-L356"},"https://github.com/fzyzcjy/flutter_smooth/blob/0c5db0ff270aa0c8cff28ea19055999627a8df6d/packages/smooth/lib/src/drop_in/list_view/shift.dart#L352-L356")),(0,s.kt)("h2",{id:"pre-launch-checklist-27"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113830",source:"github",createTime:"2022-10-21T11:53:27Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-bug-thattimedilation-is-not-reset-causing-subsequent-test-errors-and-add-verifications-to-ensure-such-problem-does-not-exist-in-the-future"},"Fix bug that",(0,s.kt)("inlineCode",{parentName:"h3"},"timeDilation")," is not reset, causing subsequent test errors, and add verifications to ensure such problem does not exist in the future"),(0,s.kt)("p",null,"Some tests set the time dilation to be non-one, but is not reset after the test ends. Thus, every test after it will see very weird time. I find this bug because got trapped in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/113828"},"https://github.com/flutter/flutter/pull/113828"),"."),(0,s.kt)("p",null,"The added line, ",(0,s.kt)("inlineCode",{parentName:"p"},"timeDilation = 1.0; // restore time dilation, or it will affect other tests"),", is copied from ",(0,s.kt)("inlineCode",{parentName:"p"},"image_stream_test.dart"),"'s ",(0,s.kt)("inlineCode",{parentName:"p"},"'timeDilation affects animation frame timers'")," test."),(0,s.kt)("h2",{id:"pre-launch-checklist-28"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113831",source:"github",createTime:"2022-10-21T12:24:03Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"allow-gesturebinding-subclasses-to-know-hittest-information"},"Allow ",(0,s.kt)("inlineCode",{parentName:"h3"},"GestureBinding")," subclasses to know ",(0,s.kt)("inlineCode",{parentName:"h3"},"hitTest")," information"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This PR allows the subclasses of ",(0,s.kt)("inlineCode",{parentName:"p"},"GestureBinding")," to read the ",(0,s.kt)("inlineCode",{parentName:"p"},"hitTest")," information. It is directly needed in flutter_smooth, because flutter_smooth has extra call to ",(0,s.kt)("inlineCode",{parentName:"p"},"dispatchEvent")," and only execute those who are in auxiliary tree (and omit those in the main tree) during preempt render. I can copy-and-paste the content of ",(0,s.kt)("inlineCode",{parentName:"p"},"dispatchEvent")," to mimic the behavior, but there is one missing piece: the hitTest information. By adding this PR, it can work."),(0,s.kt)("p",null,"An alternative solution, which the ",(0,s.kt)("inlineCode",{parentName:"p"},"flutter-smooth")," branch is currently using (but more hacky), may be to add a ",(0,s.kt)("inlineCode",{parentName:"p"},"filter")," to ",(0,s.kt)("inlineCode",{parentName:"p"},"dispatchEvent"),". Then, we can utilize the filter to skip those RenderObjects in the main tree."),(0,s.kt)("h2",{id:"pre-launch-checklist-29"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),". -- see above"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/flutter/issues/113831",source:"github",createTime:"2022-10-21T12:24:06Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36921",source:"github",createTime:"2022-10-21T12:48:32Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"enable-a-frame-to-be-scheduled-immediately"},"Enable a frame to be scheduled immediately"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"I will finish code details, refine code, add tests, make tests pass, etc, after a code review that thinks the ",(0,s.kt)("em",{parentName:"li"},"rough idea")," is acceptable. It is because, from my past experience, reviews may request changing a lot. If the general idea is to be changed, all detailed implementation efforts are wasted :)"),(0,s.kt)("li",{parentName:"ol"},"The PR has an already-working counterpart, and it produces ~60FPS smooth experimental results. The benchmark results and detailed analysis is in chapter ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/benchmark/"},"https://cjycode.com/flutter_smooth/benchmark/"),". All the source code is in  ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/engine/tree/flutter-smooth"},"https://github.com/fzyzcjy/engine/tree/flutter-smooth")," and ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"},"https://github.com/fzyzcjy/flutter/tree/flutter-smooth"),"."),(0,s.kt)("li",{parentName:"ol"},"Possibly useful as a context to this PR, there is a whole chapter discussing the internals - how flutter_smooth is implemented. (Link: ",(0,s.kt)("a",{parentName:"li",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),")")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"This PR depends on the merging of ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36911"},"https://github.com/flutter/engine/pull/36911"),"."),(0,s.kt)("p",null,'This PR is needed by flutter_smooth, because of the "Brake" mechanism discussed in ',(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth/blob/feat%2Fdoc-insight/website/docs/design/infra/brake/intro.md"},"https://github.com/fzyzcjy/flutter_smooth/blob/feat%2Fdoc-insight/website/docs/design/infra/brake/intro.md")," (TODO@fzyzcjy: post website link when it is published). In short, for that mechanism to work without jank, a frame must be able to be started immediately instead of waiting for the next vsync (otherwise we must have a jank)."),(0,s.kt)("p",null,"More specifically, let's analyze the figure in the Brake mechanism. The red arrow points where we need this PR. If this PR is not there, the frame cannot start at time=2.6, but have to start at time=3. Then, even though we have preempt render mechanism, we are not able to produce scene and rasterizer quick enough before time=4, so we will have a jank."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/197199138-74d1c21a-0839-4c21-94bb-2e0774b8b22e.png",alt:"image"})),(0,s.kt)("h2",{id:"pre-launch-checklist-30"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests. -- see above"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/36921",source:"github",createTime:"2022-10-21T12:48:35Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113927",source:"github",createTime:"2022-10-24T06:49:03Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-wasted-memory-caused-by-debug-fields---16-bytes-per-object-when-adding-that-should-be-removed-field-crosses-double-word-alignment"},"Fix wasted memory caused by debug fields - 16 bytes per object (when adding that should-be-removed field crosses double-word alignment)"),(0,s.kt)("p",null,"Close #113940"),(0,s.kt)("h2",{id:"theoretical-analysis"},"Theoretical analysis"),(0,s.kt)("p",null,'Consider the following example code. Code with "case A" occupies 2.5GB memory, while "case B" is 4.0GB memory.'),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"class C {\n  int? a;\n  int? b;\n\n  // int get computed => a.hashCode; // case A\n  int get computed => a.hashCode ^ b.hashCode; // case B\n}\n\nFuture<void> main() async {\n  final arr = <C>[];\n  for (var i = 0; i < 100000000; ++i) {\n    arr.add(C()\n      ..a = 42\n      ..b = 100);\n  }\n  print('hash=${Object.hashAll(arr.map((e) => e.computed))}');\n\n  print('sleep...');\n  await Future<void>.delayed(const Duration(seconds: 10000));\n}\n"))),(0,s.kt)("p",null,"Therefore, we know that, a field does not occupy memory if there is no read/write to it. For example, the field ",(0,s.kt)("inlineCode",{parentName:"p"},"b")," in case A is never read, so Dart compiler seems so smart that it knows it can be eliminated and no memory is allocated for that. By the way, ",(0,s.kt)("inlineCode",{parentName:"p"},"b")," is ",(0,s.kt)("em",{parentName:"p"},"written")," even in case A, but seems memory is not allocated as long as it is not read. This agrees with common sense (but since I am not compiler expert, feel free to correct me if I am wrong!)."),(0,s.kt)("p",null,"For fields inside Flutter that is merely used for debug, they are usually accessed inside an ",(0,s.kt)("inlineCode",{parentName:"p"},"assert(() { ... }());")," block. That is great, because if ",(0,s.kt)("em",{parentName:"p"},"each and every")," field access are inside ",(0,s.kt)("inlineCode",{parentName:"p"},"assert"),", those code will be eliminated in release build, and by discussions above, we will not pay memory for those ",(0,s.kt)("em",{parentName:"p"},"debug")," fields."),(0,s.kt)("p",null,"However, ",(0,s.kt)("inlineCode",{parentName:"p"},"AnimationController.debugLabel")," does not seem to follow this. Inside ",(0,s.kt)("inlineCode",{parentName:"p"},"AnimationController.toStringDetails"),", it uses ",(0,s.kt)("inlineCode",{parentName:"p"},"debugLabel")," field ",(0,s.kt)("em",{parentName:"p"},"without")," being inside a ",(0,s.kt)("inlineCode",{parentName:"p"},"assert")," block. Therefore, IMHO, we will be paying the memory of debugLabel even if we never use that in runtime."),(0,s.kt)("p",null,"As for why ",(0,s.kt)("inlineCode",{parentName:"p"},"toStringDetails")," is guaranteed to be called, it is simple: ",(0,s.kt)("inlineCode",{parentName:"p"},"Animation.toString")," calls that ",(0,s.kt)("inlineCode",{parentName:"p"},"toStringDetails"),", and we know ",(0,s.kt)("inlineCode",{parentName:"p"},"toString")," will not be tree shaken out."),(0,s.kt)("h2",{id:"experimental-analysis"},"Experimental analysis"),(0,s.kt)("h3",{id:"setup"},"Setup"),(0,s.kt)("p",null,"Use these code:"),(0,s.kt)("details",null,(0,s.kt)("p",null,"Need to add two dummy fields to AnimationController, such that it crosses the double-word alignment. (Yes, this PR does not affect memory for ",(0,s.kt)("em",{parentName:"p"},"today"),"'s AnimationController, but who can guarantee it never have two more fields or two less fields, which this PR will reduce 16 bytes)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"class AnimationController {\n  int? dummy1;\n  int? dummy2;\n... old code ...\n}\n")),(0,s.kt)("p",null,"Use this code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/material.dart';\nimport 'package:flutter/scheduler.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  final arr = <AnimationController>[];\n\n  @override\n  void initState() {\n    super.initState();\n    for (var i = 0; i < 2000000; ++i) arr.add(AnimationController(vsync: const TestVSync()));\n    print('${arr.first.dummy1} ${arr.first.dummy2}'); // ensure the dummy fields are not removed\n    arr.first\n      ..duration = const Duration(seconds: 1)\n      ..forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => Container();\n}\n\nclass TestVSync implements TickerProvider {\n  const TestVSync();\n\n  @override\n  Ticker createTicker(TickerCallback onTick) => Ticker(onTick);\n}\n"))),(0,s.kt)("h3",{id:"operations"},"Operations"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"flutter build apk --extra-gen-snapshot-options='--print-object-layout-to=object_layout.json'")," and look at json to know memory layout"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("inlineCode",{parentName:"li"},"flutter run --profile")," to know memory consumption at runtime")),(0,s.kt)("h3",{id:"results"},"Results"),(0,s.kt)("h4",{id:"without-pr"},"Without PR"),(0,s.kt)("p",null,"96 bytes per object"),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'  {\n    "class": "AnimationController",\n    "size": 96,\n    "fields": [\n      {\n        "field": "dummy1",\n        "offset": 20\n      },\n      {\n        "field": "dummy2",\n        "offset": 24\n      },\n      {\n        "field": "lowerBound",\n        "offset": 28\n      },\n      {\n        "field": "upperBound",\n        "offset": 36\n      },\n      {\n        "field": "debugLabel",\n        "offset": 44\n      },\n      {\n        "field": "animationBehavior",\n        "offset": 48\n      },\n      {\n        "field": "duration",\n        "offset": 52\n      },\n      {\n        "field": "reverseDuration",\n        "offset": 56\n      },\n      {\n        "field": "_ticker",\n        "offset": 60\n      },\n      {\n        "field": "_simulation",\n        "offset": 64\n      },\n      {\n        "field": "_value",\n        "offset": 68\n      },\n      {\n        "field": "_direction",\n        "offset": 72\n      },\n      {\n        "field": "_status",\n        "offset": 76\n      },\n      {\n        "field": "_lastReportedStatus",\n        "offset": 80\n      }\n    ]\n  },\n'))),(0,s.kt)("p",null,"and"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/197549017-4166f28a-812c-42b4-b90d-e3b5258ca998.png",alt:"image"})),(0,s.kt)("h4",{id:"with-this-pr"},"With this PR"),(0,s.kt)("p",null,"80 bytes per object"),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'  {\n    "class": "AnimationController",\n    "size": 80,\n    "fields": [\n      {\n        "field": "dummy1",\n        "offset": 20\n      },\n      {\n        "field": "dummy2",\n        "offset": 24\n      },\n      {\n        "field": "lowerBound",\n        "offset": 28\n      },\n      {\n        "field": "upperBound",\n        "offset": 36\n      },\n      {\n        "field": "animationBehavior",\n        "offset": 44\n      },\n      {\n        "field": "duration",\n        "offset": 48\n      },\n      {\n        "field": "reverseDuration",\n        "offset": 52\n      },\n      {\n        "field": "_ticker",\n        "offset": 56\n      },\n      {\n        "field": "_simulation",\n        "offset": 60\n      },\n      {\n        "field": "_value",\n        "offset": 64\n      },\n      {\n        "field": "_direction",\n        "offset": 68\n      },\n      {\n        "field": "_status",\n        "offset": 72\n      },\n      {\n        "field": "_lastReportedStatus",\n        "offset": 76\n      }\n    ]\n  },\n'))),(0,s.kt)("p",null,"and"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/197549096-2c9847c9-b17a-41df-9906-2b5ae1c9e798.png",alt:"image"})),(0,s.kt)("h3",{id:"conclusion"},"Conclusion"),(0,s.kt)("p",null,"16B reduce per object."),(0,s.kt)("h4",{id:"without-pr-1"},"Without PR"),(0,s.kt)("h2",{id:"pre-launch-checklist-31"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/flutter/issues/113927",source:"github",createTime:"2022-10-24T06:49:06Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/flutter/issues/113927",source:"github",createTime:"2022-10-24T07:31:03Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This pull request has been changed to a draft. The currently pending flutter-gold status will not be able to resolve until a new commit is pushed or the change is marked ready for review again."),(0,s.kt)("p",null,"For more guidance, visit ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Writing-a-golden-file-test-for-package:flutter"},"Writing a golden file test for ",(0,s.kt)("inlineCode",{parentName:"a"},"package:flutter")),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://github.com/flutter/flutter/issues/113927",source:"github",createTime:"2022-10-24T18:31:27Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"You'll need either a test or a test exception.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113927",source:"github",createTime:"2022-10-24T23:12:09Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@jonahwilliams Thanks, sent ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608018585025118217/1034242780857376799"},"https://discord.com/channels/608014603317936148/608018585025118217/1034242780857376799"))),(0,s.kt)(c,{author:"Hixie",link:"https://github.com/flutter/flutter/issues/113927",source:"github",createTime:"2022-10-24T23:15:36Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"test-exemption: optimization")),(0,s.kt)(c,{author:"auto-submit",link:"https://github.com/flutter/flutter/issues/113927",source:"github",createTime:"2022-10-24T23:39:30Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"auto label is removed for flutter/flutter, pr: 113927, due to - Please get at least one approved review if you are already a member or two member reviews if you are not a member before re-applying this label. ",(0,s.kt)("strong",{parentName:"p"},"Reviewers"),': If you left a comment approving, please use the "approve" review action instead.')),(0,s.kt)(c,{author:"auto-submit",link:"https://github.com/flutter/flutter/issues/113927",source:"github",createTime:"2022-10-24T23:39:31Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"auto label is removed for flutter/flutter, pr: 113927, due to Validations Fail.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36985",source:"github",createTime:"2022-10-25T01:05:22Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"let-_debugchecknotusedasoldlayer-provide-hashcode-in-addition-to-runtime-type"},"Let ",(0,s.kt)("inlineCode",{parentName:"h3"},"_debugCheckNotUsedAsOldLayer")," provide hashcode in addition to runtime type"),(0,s.kt)("p",null,"I see this assert fail when working on my own app today (unrelated to flutter_smooth; work on stable channel). With identity hashcode, we can surely know more about which layer violates."),(0,s.kt)("h2",{id:"pre-launch-checklist-32"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide")," and the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/engine/blob/main/CONTRIBUTING.md#style"},"C++, Objective-C, Java style guides"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making or feature I am adding, or Hixie said the PR is test-exempt. See ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Testing-the-engine"},"testing the engine")," for instructions on\nwriting and running engine tests."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul"},"["),(0,s.kt)("li",{parentName:"ul"},"x] I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/36985",source:"github",createTime:"2022-10-25T01:05:24Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113987",source:"github",createTime:"2022-10-25T03:56:49Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-addtoscene-documentation"},"Fix ",(0,s.kt)("inlineCode",{parentName:"h3"},"addToScene")," documentation"),(0,s.kt)("p",null,"Its return type is ",(0,s.kt)("inlineCode",{parentName:"p"},"void"),', but doc says "return the engine layer", so I guess the doc is outdated.'),(0,s.kt)("h2",{id:"pre-launch-checklist-33"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113988",source:"github",createTime:"2022-10-25T04:04:31Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"wip-fix-layer--was-previously-used-as-oldlayer-caused-by-leaderlayer-addtoscene-bug"},"[WIP]"," Fix ",(0,s.kt)("inlineCode",{parentName:"h3"},"Layer ... was previously used as oldLayer"),", caused by LeaderLayer addToScene bug"),(0,s.kt)("p",null,"Close ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/113995"},"https://github.com/flutter/flutter/issues/113995"),"\nPlease see the issue for a bug reproduction. Here I will discuss how it is solved and what caused it."),(0,s.kt)("h2",{id:"pre-launch-checklist-34"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113998",source:"github",createTime:"2022-10-25T07:08:30Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"layer--was-previously-used-as-oldlayer-assertion-error-in-debug-mode-and-page-being-blank-in-release-mode-caused-by-leaderlayer-addtoscene-bug"},(0,s.kt)("inlineCode",{parentName:"h3"},"Layer ... was previously used as oldLayer")," assertion error in debug mode, and page being blank in release mode, caused by LeaderLayer addToScene bug"),(0,s.kt)("p",null,"Close ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/113995"},"https://github.com/flutter/flutter/issues/113995"),"\nPlease see the issue for a bug reproduction. Here I will discuss how it is solved and what caused it."),(0,s.kt)("h3",{id:"the-real-world-bug"},"The real world bug"),(0,s.kt)("p",null,"My app has a part of it not rendered (i.e. page blank) sometimes, which is very weird. After I manage to reproduce it in debug environment, the error is:"),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"======== Exception caught by scheduler library =====================================================\nThe following assertion was thrown during a scheduler callback:\nLayer ClipRectEngineLayer was previously used as oldLayer.\nOnce a layer is used as oldLayer, it may not be used again. Instead, after calling one of the SceneBuilder.push* methods and passing an oldLayer to it, use the layer returned by the method as oldLayer in subsequent frames.\n'dart:ui/compositing.dart':\nFailed assertion: line 88 pos 9: '<optimized out>'\n\n\nEither the assertion indicates an error in the framework itself, or we should provide substantially more information in this error message to help you determine and fix the underlying cause.\nIn either case, please report this assertion by filing a bug on GitHub:\n  https://github.com/flutter/flutter/issues/new?template=2_bug.md\n\nWhen the exception was thrown, this was the stack: \n#2      _EngineLayerWrapper._debugCheckNotUsedAsOldLayer (dart:ui/compositing.dart:88:9)\n#3      SceneBuilder.addRetained.<anonymous closure>.recursivelyCheckChildrenUsedOnce (dart:ui/compositing.dart:656:21)\n#4      List.forEach (dart:core-patch/growable_array.dart:416:8)\n#5      SceneBuilder.addRetained.<anonymous closure>.recursivelyCheckChildrenUsedOnce (dart:ui/compositing.dart:662:18)\n#6      SceneBuilder.addRetained.<anonymous closure> (dart:ui/compositing.dart:665:7)\n#7      SceneBuilder.addRetained (dart:ui/compositing.dart:668:6)\n#8      Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:643:15)\n#9      ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1241:13)\n#10     OffsetLayer.addToScene (package:flutter/src/rendering/layer.dart:1378:5)\n#11     Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:646:5)\n#12     ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1241:13)\n#13     OffsetLayer.addToScene (package:flutter/src/rendering/layer.dart:1378:5)\n#14     Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:646:5)\n#15     ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1241:13)\n#16     EnhancedLeaderLayer.addToScene (package:flutter_portal/src/enhanced_composited_transform/flutter_src/rendering_layer.dart:159:5)\n#17     Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:646:5)\n#18     ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1241:13)\n#19     EnhancedLeaderLayer.addToScene (package:flutter_portal/src/enhanced_composited_transform/flutter_src/rendering_layer.dart:159:5)\n#20     Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:646:5)\n#21     ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1241:13)\n#22     EnhancedLeaderLayer.addToScene (package:flutter_portal/src/enhanced_composited_transform/flutter_src/rendering_layer.dart:159:5)\n#23     Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:646:5)\n#24     ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1241:13)\n#25     EnhancedLeaderLayer.addToScene (package:flutter_portal/src/enhanced_composited_transform/flutter_src/rendering_layer.dart:159:5)\n#26     Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:646:5)\n#27     ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1241:13)\n#28     OffsetLayer.addToScene (package:flutter/src/rendering/layer.dart:1378:5)\n#29     Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:646:5)\n#30     ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1241:13)\n#31     TransformLayer.addToScene (package:flutter/src/rendering/layer.dart:1834:5)\n#32     ContainerLayer.buildScene (package:flutter/src/rendering/layer.dart:1054:5)\n#33     RenderView.compositeFrame (package:flutter/src/rendering/view.dart:231:37)\n#34     RendererBinding.drawFrame (package:flutter/src/rendering/binding.dart:517:18)\n#35     WidgetsBinding.drawFrame (package:flutter/src/widgets/binding.dart:884:13)\n#36     RendererBinding._handlePersistentFrameCallback (package:flutter/src/rendering/binding.dart:378:5)\n#37     SchedulerBinding._invokeFrameCallback (package:flutter/src/scheduler/binding.dart:1175:15)\n#38     SchedulerBinding.handleDrawFrame (package:flutter/src/scheduler/binding.dart:1104:9)\n#39     SchedulerBinding._handleDrawFrame (package:flutter/src/scheduler/binding.dart:1015:5)\n#40     _invoke (dart:ui/hooks.dart:148:13)\n#41     PlatformDispatcher._drawFrame (dart:ui/platform_dispatcher.dart:318:5)\n#42     _drawFrame (dart:ui/hooks.dart:115:31)\n(elided 2 frames from class _AssertionError)\n====================================================================================================\n"))),(0,s.kt)("h3",{id:"the-minimal-reproduction"},"The minimal reproduction"),(0,s.kt)("p",null,"(I will omit how I find out the root cause. If you are interested I can write down.)"),(0,s.kt)("p",null,"Please see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/113995"},"https://github.com/flutter/flutter/issues/113995")," with minimal reproduction code"),(0,s.kt)("h3",{id:"why-that-causes-bug"},"Why that causes bug"),(0,s.kt)("p",null,"The first pumpWidget creates initial tree, and I deliberately set padding to non-zero, such that LeaderLayer.paint will see non-zero Offset, and thus will pushTransform."),(0,s.kt)("p",null,"In the second pumpWidget, I deliberately set padding to zero. Then, LeaderLayer.paint will ",(0,s.kt)("em",{parentName:"p"},"not")," call pushTransform. Correct implementation should set engineLayer to null, but the old code just leave that variable unchanged."),(0,s.kt)("p",null,"Then comes the third pumpWidget. I change the color inside a RepaintBoundary which is the sibling of LeaderLayer (CompositedTransformTarget). This is carefully constructed (notice the sibling and the RepaintBoundary) to reproduce the following behavior in real-world complicated app: We should (1) ensure ",(0,s.kt)("inlineCode",{parentName:"p"},"LeaderLayer. _addToSceneWithRetainedRendering")," is called, and (2) ensure ",(0,s.kt)("inlineCode",{parentName:"p"},"LeaderLayer. _needsAddToScene = false"),". For example, if we do not add that RepaintBoundary, it will not construct the case, because CompositedTransformTarget's RO will repaint and thus _needsAddToScene becomes true."),(0,s.kt)("p",null,"Then, interesting thing happens. Look at the code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"  void _addToSceneWithRetainedRendering(ui.SceneBuilder builder) {\n    if (!_needsAddToScene && _engineLayer != null) {\n      builder.addRetained(_engineLayer!);\n      return;\n    }\n    ...\n")),(0,s.kt)("p",null,"We have constructed a case, such that the ",(0,s.kt)("inlineCode",{parentName:"p"},"if")," is true. Notice that, if we fix the bug (just as what we do in the PR), the ",(0,s.kt)("inlineCode",{parentName:"p"},"engineLayer")," will be null so if condition will not be true. Thus, buggy code will call ",(0,s.kt)("inlineCode",{parentName:"p"},"LeaderLayer.addRetained"),", while correct code will not."),(0,s.kt)("p",null,"Then the error happens. Notice that, this ",(0,s.kt)("inlineCode",{parentName:"p"},"LeaderLayer._engineLayer")," indeed is the layer constructed in the second pumpWidget instead of the third (i.e. it is stale from last frame). Therefore, this EngineLayer's children are all from the stale previous frame. For example, the ClipRectLayer from previous frame (second pumpWidget). Since it has already been used as oldLayer in RenderClipRect, that old stale ClipRectLayer should never be used. However we are now using it in addRetained. Therefore, no wonder when ",(0,s.kt)("inlineCode",{parentName:"p"},"addRetained")," is checking all subtree ensuring ",(0,s.kt)("inlineCode",{parentName:"p"},"_debugCheckNotUsedAsOldLayer"),", it fails the assertions."),(0,s.kt)("h3",{id:"why-is-the-solution-valid"},"Why is the solution valid"),(0,s.kt)("p",null,'With analysis above, we can clearly see this solves the bug. In addition, looking at ClipRectLayer etc, they also have such "engineLayer = null" logic, so even if only mimicking those we should do this.'),(0,s.kt)("h2",{id:"pre-launch-checklist-35"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/flutter/issues/113998",source:"github",createTime:"2022-10-25T07:08:33Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113988",source:"github",createTime:"2022-10-25T07:08:46Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hmm it gets auto closed after I rename branch. Anyway please see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/113998"},"https://github.com/flutter/flutter/pull/113998"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114003",source:"github",createTime:"2022-10-25T09:41:15Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"introduce-debugwithactivelayoutcleared-to-avoid-duplicated-code"},"Introduce debugWithActiveLayoutCleared to avoid duplicated code"),(0,s.kt)("p",null,"This is indeed a part of ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/113817"},"https://github.com/flutter/flutter/pull/113817"),". However, that one actually does two things in one PR: refactor internal code, and exposes an API. Thus, in order to follow the spirit mentioned in Flutter - one PR for only one thing - I make this refactor a separate PR, which should be easier to review."),(0,s.kt)("h3",{id:"performance-difference"},"Performance difference"),(0,s.kt)("p",null,"As is discussed in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/113817#issue-1417868505"},"https://github.com/flutter/flutter/pull/113817#issue-1417868505")," via compiler explorer, the generate assembly is not worse as long as we use that prefer-inline annotation."),(0,s.kt)("h2",{id:"pre-launch-checklist-36"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/flutter/issues/114003",source:"github",createTime:"2022-10-25T12:00:24Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"goderbauer",link:"https://github.com/flutter/flutter/issues/113830",source:"github",createTime:"2022-10-25T22:16:37Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"TestWidgetsFlutterBinding._verifyInvariants")," could be the right place to check for this.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113830",source:"github",createTime:"2022-10-26T00:03:08Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@Piinks Yes I think so, @goderbauer mentions the _verifyInvariants - the one I have seen a ton of times reporting I changed somthing (e.g. fake screen resolution) but do not change it back"),(0,s.kt)("p",null,"I will update soon.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113830",source:"github",createTime:"2022-10-26T00:21:02Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"done"),(0,s.kt)("p",null,"/cc @Piinks @goderbauer ")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36985",source:"github",createTime:"2022-10-26T00:28:15Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'The CI failure, "infra failed", does not look like a problem of my code indeed'),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/197906455-c997a800-12a0-4839-a038-d046e521006d.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113830",source:"github",createTime:"2022-10-26T12:00:00Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"CI passes")),(0,s.kt)(c,{author:"goderbauer",link:"https://github.com/flutter/flutter/issues/113987",source:"github",createTime:"2022-10-26T20:39:34Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Looks like this was changed in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/36402"},"https://github.com/flutter/flutter/pull/36402"),", but we never updated the doc (cc @yjbanov).")),(0,s.kt)(c,{author:"goderbauer",link:"https://github.com/flutter/flutter/issues/112437",source:"github",createTime:"2022-10-26T21:05:48Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Please ignore this PR for now")),(0,s.kt)("p",null,"I am going to close this then for now to get it off the queue. Feel free to reopen when you can provide more context. ")),(0,s.kt)(c,{author:"goderbauer",link:"https://github.com/flutter/flutter/issues/112436",source:"github",createTime:"2022-10-26T21:26:11Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"In isolation, the API this exposes doesn't make a lot of sense to me and it feels hacky."),(0,s.kt)("p",null,"If you chose to continue working on this PR, please also take another look at the flutter style guide, especially the sections around API documentation: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#documentation-dartdocs-javadocs-etc"},"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#documentation-dartdocs-javadocs-etc"),".")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/112436",source:"github",createTime:"2022-10-26T21:38:03Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I'm still not quite clear on why this is a solution that should live in the framework."),(0,s.kt)("p",null,"Tickers have no means of interrupting work more often. Tickers have no special knowledge of when vsync happens. This seems to introduce a number of problems that will be difficult for developers to reason about. I think this could be solved in a package instead. I'm going to close this for now but let's discuss more on discord if you like.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/113526",source:"github",createTime:"2022-10-26T22:12:20Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Without this, how do you measure frame timings in profile mode?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113987",source:"github",createTime:"2022-10-26T23:10:44Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Looks like this was changed in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/36402"},"https://github.com/flutter/flutter/pull/36402"),", but we never updated the doc (cc @yjbanov).")),(0,s.kt)("p",null,"I agree. That's why the PR happens :)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112437",source:"github",createTime:"2022-10-26T23:20:03Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Sure, thanks!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113526",source:"github",createTime:"2022-10-26T23:28:54Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@dnfield Without this, how do you measure frame timings in profile mode?")),(0,s.kt)("p",null,"I personally by the timeline data. You know, look at the GPURasterizer::Draw rectangle inside timeline, etc."),(0,s.kt)("p",null,"p.s. partially related ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/devtools/issues/4522"},"https://github.com/flutter/devtools/issues/4522"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113526",source:"github",createTime:"2022-10-26T23:31:40Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@goderbauer I find adding this a bit dubios. The environment flag will be really hard to discover.")),(0,s.kt)("p",null,"Hmm why are other env flags in flutter easy to discover, by adding doc or something else? I can do the same, then this is no problem."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Also, profile mode exists so you can get these kind of performance metrics out of your app.")),(0,s.kt)("p",null,"As mentioned above, these perf metrics are ",(0,s.kt)("em",{parentName:"p"},"already exposed")," via the timeline data, such as by looking at GPURasterizer::Draw. "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If you don't want that, there's always release mode...")),(0,s.kt)("p",null,"But we need to do profiling to get profile data, don't we :)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113526",source:"github",createTime:"2022-10-26T23:32:50Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Rephrase the problem: We are providing redundant data (i.e. report timing, even if timeline tracing already has the data), and that redundancy is causing measurable speed drop compared with release mode. Then we are biasing the profiling result."),(0,s.kt)("p",null,'So, if this is not to be merged, maybe we should create another PR to the doc site, with something like: "Please do not believe the speed in profile mode. It will be measureably slower than release mode." But IMHO users will not like that sentence.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112436",source:"github",createTime:"2022-10-26T23:38:37Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thank you, I will reconsider the API and discuss on discord.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113526",source:"github",createTime:"2022-10-27T00:15:59Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Look like I can remove the environment variable."),(0,s.kt)("p",null,"In Dart, if we have a normal variable that only has one constant value, then the field will be removed. ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/dart-lang/sdk/issues/50287#issuecomment-1289027245"},"https://github.com/dart-lang/sdk/issues/50287#issuecomment-1289027245"),' "Also AOT compiler is capable of removing unused fields of various kinds (the field is also effectively unused if it always contains the same constant value or is only written into, but never read)."'),(0,s.kt)("p",null,"The experiment confirms this:"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://godbolt.org/z/Thd91YcPj"},"https://godbolt.org/z/Thd91YcPj")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/198161917-503d91f2-47a2-4c71-8a89-9164f96f4c7c.png",alt:"image"})),(0,s.kt)("p",null,"I will update the code shortly.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114117",source:"github",createTime:"2022-10-27T00:20:49Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-incorrectly-named-debug-prefix"},'Fix incorrectly named "debug" prefix'),(0,s.kt)("p",null,"Close #111874"),(0,s.kt)("p",null,"Please read discussions there for why this PR is made :)"),(0,s.kt)("h2",{id:"pre-launch-checklist-37"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/flutter/issues/114117",source:"github",createTime:"2022-10-27T00:20:51Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114124",source:"github",createTime:"2022-10-27T03:06:12Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"avoid-future-bugs-about-wrong-manipulation-of-enginelayer-inside-addtoscene"},"Avoid future bugs about wrong manipulation of engineLayer inside addToScene"),(0,s.kt)("p",null,"In ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/113998"},"https://github.com/flutter/flutter/pull/113998"),", I have fixed the bug caused by wrongly using engineLayer. But that bug is so time consuming to locate, so I write this PR to add assertions so we will not add such bugs in the future anymore."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Question"),": In order to insert assertions, I have to wrap the ",(0,s.kt)("inlineCode",{parentName:"p"},"addToScene")," function. IMHO the best thing is ",(0,s.kt)("inlineCode",{parentName:"p"},"addToScene")," vs ",(0,s.kt)("inlineCode",{parentName:"p"},"performAddToScene")," (like ",(0,s.kt)("inlineCode",{parentName:"p"},"layout")," vs ",(0,s.kt)("inlineCode",{parentName:"p"},"performLayout")," so everyone is familiar). However, that is a breaking change. I am not a googler so not sure whether you like it or not?\nIMHO the breaking change may be acceptable, because (1) it is merely a rename so simple to migrate (2) very few people write their own Layer class so this will affect few people.\n(Currently, I temporarily create a ",(0,s.kt)("inlineCode",{parentName:"p"},"addToSceneWrapped")," method in order to see whether the code works - but I guess this should not be the final name)"),(0,s.kt)("p",null,"This assertion does work, because ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/114124/checks?check_run_id=9132589021"},"https://github.com/flutter/flutter/pull/114124/checks?check_run_id=9132589021")," reports the following error, which is exactly the error that #113998 finds and fixes."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"\u2550\u2550\u2561 EXCEPTION CAUGHT BY SCHEDULER LIBRARY \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nThe following assertion was thrown during a scheduler callback:\nWhen addToScene previously configures the engineLayer, it should either update it in current\naddToScene, or set it to null explicitly. Otherwise, Flutter framework may utilize that already\nout-of-date engineLayer and thus cause problems. However, it is observed that\npreviousEngineLayer=TransformEngineLayer#38532153 while engineLayer=TransformEngineLayer#38532153.\nThis originates in LeaderLayer#204442042.\n'package:flutter/src/rendering/layer.dart':\nFailed assertion: line 673 pos 9: 'previousEngineLayer == null || previousEngineLayer !=\nengineLayer'\n\nEither the assertion indicates an error in the framework itself, or we should provide substantially\nmore information in this error message to help you determine and fix the underlying cause.\nIn either case, please report this assertion by filing a bug on GitHub:\n  https://github.com/flutter/flutter/issues/new?template=2_bug.md\n\nWhen the exception was thrown, this was the stack:\n#2      Layer.addToSceneWrapped.<anonymous closure> (package:flutter/src/rendering/layer.dart:673:9)\n#3      Layer.addToSceneWrapped (package:flutter/src/rendering/layer.dart:683:6)\n#4      Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:701:5)\n#5      ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1311:13)\n#6      OffsetLayer.addToScene (package:flutter/src/rendering/layer.dart:1448:5)\n#7      Layer.addToSceneWrapped (package:flutter/src/rendering/layer.dart:669:5)\n#8      Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:701:5)\n#9      ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1311:13)\n#10     OffsetLayer.addToScene (package:flutter/src/rendering/layer.dart:1448:5)\n#11     Layer.addToSceneWrapped (package:flutter/src/rendering/layer.dart:669:5)\n#12     Layer._addToSceneWithRetainedRendering (package:flutter/src/rendering/layer.dart:701:5)\n#13     ContainerLayer.addChildrenToScene (package:flutter/src/rendering/layer.dart:1311:13)\n#14     TransformLayer.addToScene (package:flutter/src/rendering/layer.dart:1941:5)\n#15     Layer.addToSceneWrapped (package:flutter/src/rendering/layer.dart:669:5)\n#16     ContainerLayer.buildScene (package:flutter/src/rendering/layer.dart:1124:5)\n#17     RenderView.compositeFrame (package:flutter/src/rendering/view.dart:231:37)\n#18     AutomatedTestWidgetsFlutterBinding.drawFrame (package:flutter_test/src/binding.dart:1257:26)\n#19     RendererBinding._handlePersistentFrameCallback (package:flutter/src/rendering/binding.dart:375:5)\n#20     SchedulerBinding._invokeFrameCallback (package:flutter/src/scheduler/binding.dart:1275:15)\n#21     SchedulerBinding.handleDrawFrame (package:flutter/src/scheduler/binding.dart:1204:9)\n#22     AutomatedTestWidgetsFlutterBinding.pump.<anonymous closure> (package:flutter_test/src/binding.dart:1096:9)\n#25     TestAsyncUtils.guard (package:flutter_test/src/test_async_utils.dart:71:41)\n#26     AutomatedTestWidgetsFlutterBinding.pump (package:flutter_test/src/binding.dart:1082:27)\n#27     WidgetTester.pump.<anonymous closure> (package:flutter_test/src/widget_tester.dart:618:53)\n#30     TestAsyncUtils.guard (package:flutter_test/src/test_async_utils.dart:71:41)\n#31     WidgetTester.pump (package:flutter_test/src/widget_tester.dart:618:27)\n#32     main.<anonymous closure> (file:///b/s/w/ir/x/w/flutter/packages/flutter/test/widgets/autocomplete_test.dart:491:18)\n<asynchronous suspension>\n<asynchronous suspension>\n(elided 7 frames from class _AssertionError, dart:async, and package:stack_trace)\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n")),(0,s.kt)("h2",{id:"pre-launch-checklist-38"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/113526",source:"github",createTime:"2022-10-27T16:22:20Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("blockquote",{parentName:"blockquote"},(0,s.kt)("p",{parentName:"blockquote"},"@dnfield Without this, how do you measure frame timings in profile mode?")),(0,s.kt)("p",{parentName:"blockquote"},"I personally by the timeline data. You know, look at the GPURasterizer::Draw rectangle inside timeline, etc."),(0,s.kt)("p",{parentName:"blockquote"},"p.s. partially related ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/devtools/issues/4522"},"flutter/devtools#4522"))),(0,s.kt)("p",null,"This method is significantly cheaper than the timeline.")),(0,s.kt)(c,{author:"auto-submit",link:"https://github.com/flutter/flutter/issues/113998",source:"github",createTime:"2022-10-27T16:35:08Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"auto label is removed for flutter/flutter, pr: 113998, due to - Please get at least one approved review if you are already a member or two member reviews if you are not a member before re-applying this label. ",(0,s.kt)("strong",{parentName:"p"},"Reviewers"),': If you left a comment approving, please use the "approve" review action instead.')),(0,s.kt)(c,{author:"auto-submit",link:"https://github.com/flutter/flutter/issues/113998",source:"github",createTime:"2022-10-27T16:35:09Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"auto label is removed for flutter/flutter, pr: 113998, due to Validations Fail.")),(0,s.kt)(c,{author:"chinmaygarde",link:"https://github.com/flutter/engine/issues/36775",source:"github",createTime:"2022-10-27T20:17:43Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"cc @dnfield ")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-27T20:18:50Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Let's close this one out to get it off review queues until we have more consensus around the approach.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36607",source:"github",createTime:"2022-10-27T20:20:30Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I'm going to close this to remove it from review queues. As I'm mentioning in some other PRs, let's discuss further on discord.")),(0,s.kt)(c,{author:"auto-submit",link:"https://github.com/flutter/engine/issues/36822",source:"github",createTime:"2022-10-27T21:07:46Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"auto label is removed for flutter/engine, pr: 36822, due to - Please get at least one approved review if you are already a member or two member reviews if you are not a member before re-applying this label. ",(0,s.kt)("strong",{parentName:"p"},"Reviewers"),': If you left a comment approving, please use the "approve" review action instead.')),(0,s.kt)(c,{author:"auto-submit",link:"https://github.com/flutter/engine/issues/36822",source:"github",createTime:"2022-10-27T21:07:47Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"auto label is removed for flutter/engine, pr: 36822, due to Validations Fail.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36826",source:"github",createTime:"2022-10-27T21:29:25Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I started to review this, but then realized this seems to be at odds with some similar work that was done for iOS - see ",(0,s.kt)("inlineCode",{parentName:"p"},"pointer_data_dispatcher.h")," and in particular the ",(0,s.kt)("inlineCode",{parentName:"p"},"SmoothPointerDataDispatcher"),"."),(0,s.kt)("p",null,"I think you're on to something here, but I wonder if we should be looking at making the SmoothPointerDataDispatcher work on more than just iOS at this point (as in, perhaps some Android phones are now doing what iOS was doing w.r.t. pointer events and screen vsync being different). This approach does not currently seem to be compatible with that, and I have some concerns about thread safety around it (you're capturing ",(0,s.kt)("inlineCode",{parentName:"p"},"this")," and posting it to a different task runner in an unsafe manner)."),(0,s.kt)("p",null,"I would suggest filing a specific bug for this issue with more details about which platform(s) you're observing this behavior on and how what you need is different from the SmoothPointerDataDispatcher (if it's different at all). If you're on Android, it would probably be worth doing an experiment where the smooth dispatcher is enabled there.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36837",source:"github",createTime:"2022-10-27T21:32:39Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This approach is not passing tests and doesn't seem to be ready for review. It would need substantial reworking to be ready for review. I'm going to close this to get it off of review queues. ")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36911",source:"github",createTime:"2022-10-27T21:35:52Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This seems very similar to ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/29276"},"https://github.com/flutter/engine/pull/29276")),(0,s.kt)("p",null,"Similar concerns as to that one: we need some motivating benchmarks that clearly show what benefits would be gained here, and we need to see that changes to this won't negatively impact existing benchmarks/users.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36912",source:"github",createTime:"2022-10-27T21:40:04Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This removes backpressure from the rasterizer and will make the application run hotter than necessary in a lot of cases. It'd be nice to improve things here, but we can't completely remove that backpressure safely.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36916",source:"github",createTime:"2022-10-27T21:41:34Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This is not the only thing that would need peeking,a nd creating this kind of \"pull\" based model is a major architectural change we'd need more time to reason about. I'm going to close this PR to get it off of review queues for now - tests are not passing and it is not clear that this API is the desirable one to expose to developers to achieve the larger goals you're discussing.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36985",source:"github",createTime:"2022-10-27T21:44:56Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Also re-kicked the infra failure :)")),(0,s.kt)(c,{author:"Hixie",link:"https://github.com/flutter/engine/issues/36985",source:"github",createTime:"2022-10-27T21:47:18Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"This would ideally be tested on the framework side, to make sure the output matches what we expect from other messages (we have a special matcher that knows how to normalize this kind of hash code)."),(0,s.kt)("p",null,"That can't be in this PR, though."),(0,s.kt)("p",null,"test-exempt: test needs to be in another repo")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36921",source:"github",createTime:"2022-10-27T21:50:28Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Same comment as on the linked PR applies."),(0,s.kt)("p",null,"In particular, it's really hard to reason about how to use this parameter correctly. A lot of the work you're doing seems to be geared towards ignoring/overriding the vsync that the system gives us instead of cooperating with it more. "),(0,s.kt)("p",null,"In particular, ",(0,s.kt)("em",{parentName:"p"},"vsync is an important source of backpressure that we must respect"),". We cannot just keep shoving frames at the system compositor, we will overwhelm it and it will start dropping more frames than necessary/run into long GPU stalls. This will be really bad on older hardware, and still be bad on newer hardware.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36917",source:"github",createTime:"2022-10-27T21:52:33Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Closing to remove from review queues.")),(0,s.kt)(c,{author:"auto-submit",link:"https://github.com/flutter/engine/issues/36985",source:"github",createTime:"2022-10-27T21:53:44Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"auto label is removed for flutter/engine, pr: 36985, due to - Please get at least one approved review if you are already a member or two member reviews if you are not a member before re-applying this label. ",(0,s.kt)("strong",{parentName:"p"},"Reviewers"),': If you left a comment approving, please use the "approve" review action instead.')),(0,s.kt)(c,{author:"auto-submit",link:"https://github.com/flutter/engine/issues/36985",source:"github",createTime:"2022-10-27T21:53:44Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"auto label is removed for flutter/engine, pr: 36985, due to Validations Fail.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36775",source:"github",createTime:"2022-10-27T21:57:31Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@iskakaushik can you provide a secondary review here?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113987",source:"github",createTime:"2022-10-27T22:44:52Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"You are welcome!")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114003",source:"github",createTime:"2022-10-27T22:51:43Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hmm it still fails. I have seen this test failing across my PRs recently without reasons. let me bump ci")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113526",source:"github",createTime:"2022-10-27T22:57:45Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@dnfield This method is significantly cheaper than the timeline.")),(0,s.kt)("p",null,"I originally thought so. But interestingly, seems no in a few reasons:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"timeline is usually there (or even cannot be disabled? not find a flag to disable), while report timings is an extra thing"),(0,s.kt)("li",{parentName:"ul"},"timeline makes app slower evenly, while report timings is a big burst. thus, flutter_smooth can handle timline slowness very easily (and still gets 60fps and smooth user feeling), while report timings will cause a jank (because it itself takes some long time and during that time flutter_smooth cannot perform any job to submit extra frames).")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"For disable tracing: Not see any flag to disable IMHO"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'flutter run --help | grep trace\n    --trace-startup                               Trace application startup, then exit, saving the trace to a file. By default, this will be saved in the "build" directory. If the FLUTTER_TEST_OUTPUTS_DIR environment variable is set, the file will be written there instead.\n    --endless-trace-buffer                        Enable tracing to an infinite buffer, instead of a ring buffer. This is useful when recording large traces. To use an endless buffer to record startup traces, combine this with "--trace-startup".\n    --trace-systrace                              Enable tracing to the system tracer. This is only useful on platforms where such a tracer is available (Android, iOS, macOS and Fuchsia).\n    --trace-skia                                  Enable tracing of Skia code. This is useful when debugging the raster thread (formerly known as the GPU thread). By default, Flutter will not log Skia code, as it introduces significant overhead that may affect recorded performance metrics in a misleading way.\n    --[no-]await-first-frame-when-tracing         Whether to wait for the first frame when tracing startup ("--trace-startup"), or just dump the trace as soon as the application is running. The first frame is detected by looking for a Timeline event with the name "Rasterized first useful frame". By default, the widgets library\'s binding takes care of sending this event.\n    --[no-]hot                                    Run with support for hot reloading. Only available for debug mode. Not available with "--trace-startup".\n'))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36822",source:"github",createTime:"2022-10-27T23:00:18Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Sure. "),(0,s.kt)("p",null,"Btw if you guys think the cost paid by CHECK is ok, I will change DCHECK to CHECK (pretty easy to change)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36438",source:"github",createTime:"2022-10-27T23:03:46Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"All right...")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36607",source:"github",createTime:"2022-10-27T23:04:18Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks, I will discuss on discord about this")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36797",source:"github",createTime:"2022-10-27T23:05:16Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks for the reply, I will ask on discord later")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36834",source:"github",createTime:"2022-10-27T23:05:51Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"thanks, will discuss on discord further")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36826",source:"github",createTime:"2022-10-27T23:09:17Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"but then realized this seems to be at odds with some similar work that was done for iOS - see pointer_data_dispatcher.h and in particular the SmoothPointerDataDispatcher.")),(0,s.kt)("p",null,"Looking at ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/blob/6368dee0d78f4345e6cfdc4541754acb0891d845/shell/common/pointer_data_dispatcher.h#L157"},"https://github.com/flutter/engine/blob/6368dee0d78f4345e6cfdc4541754acb0891d845/shell/common/pointer_data_dispatcher.h#L157"),", seems that SmoothPointerDataDispatcher is just delaying ",(0,s.kt)("em",{parentName:"p"},"one")," packet. On the other hand, this PR tries to ",(0,s.kt)("em",{parentName:"p"},"merge")," multiple packets into one bigger packet, so we do not pay extra cost of PostTask, call Dart, etc."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"then realized this seems to be at odds with some similar work that was done for iOS - see pointer_data_dispatcher.h and in particular the SmoothPointerDataDispatcher.")),(0,s.kt)("p",null,"That one seems to be queueing "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"(you're capturing this and posting it to a different task runner in an unsafe manner).")),(0,s.kt)("p",null,"This is just minor details and I will fix them definitely"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I would suggest filing a specific bug for this issue with more details about which platform(s) you're observing this behavior on and how what you need is different from the SmoothPointerDataDispatcher (if it's different at all). If you're on Android, it would probably be worth doing an experiment where the smooth dispatcher is enabled there.")),(0,s.kt)("p",null,"Thanks I will do that")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/flutter/issues/113526",source:"github",createTime:"2022-10-27T23:09:34Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It'd be really helpful if you could share some measurements (including device/platform/runtime mode).")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36822",source:"github",createTime:"2022-10-27T23:10:03Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"CHECK will cause a crash at runtime. DCHECK is probably fine here to make tests fail.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36911",source:"github",createTime:"2022-10-27T23:12:04Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Thanks for pointing out the related PR."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Similar concerns as to that one: we need some motivating benchmarks that clearly show what benefits would be gained here, and we need to see that changes to this won't negatively impact existing benchmarks/users.")),(0,s.kt)("p",null,"Sure. I will try to make one."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"we need to see that changes to this won't negatively impact existing benchmarks/users.")),(0,s.kt)("p",null,"May I know how to do this? does not see benchmark data on CI IMHO")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36911",source:"github",createTime:"2022-10-27T23:13:08Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"flutter-flutter-perf.skia.org and flutter-engine-perf.skia.org has benchmark data")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36837",source:"github",createTime:"2022-10-27T23:16:37Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Btw I have replied to your review comments (not sure whether you can see that so also reply here)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36911",source:"github",createTime:"2022-10-27T23:18:08Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'@dnfield Thanks, may I know some doc, or how to see perf benchmark of a PR? Click "help" gives http://go/perf-user-doc which cannot be opened (google internal only?)')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113526",source:"github",createTime:"2022-10-27T23:19:53Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield Let me find an old screenshot from my past experiment (",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/yplusplus/issues/6124#issuecomment-1272830057"},"https://github.com/fzyzcjy/yplusplus/issues/6124#issuecomment-1272830057"),")"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/198415416-9f031194-2a32-431a-b4dd-48e26cffbc5b.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/198415425-17d13ad7-2857-4d23-aeed-7326719f6fad.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/198415432-c04f1b45-af6d-4e63-bef6-34bcb87e1f27.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/198415438-834760dd-79d7-42a8-bde5-ad3f1891bb78.png",alt:"image"})),(0,s.kt)("p",null,"after fix"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/198415453-e5df85af-8711-4d4a-92ac-d593a55e2e6d.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/198415461-40f94d92-632a-44ac-bc8f-885b3c75e55c.png",alt:"image"}))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36912",source:"github",createTime:"2022-10-27T23:21:01Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield I agree. Will try to figure out some methods.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36916",source:"github",createTime:"2022-10-27T23:21:36Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Ok I will discuss the pull model later maybe on discord")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36916",source:"github",createTime:"2022-10-27T23:22:00Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Btw tests are deliberately not passed since I want to have a quick rough review first before working into details")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36921",source:"github",createTime:"2022-10-27T23:23:50Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield I see"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"We cannot just keep shoving frames at the system compositor, we will overwhelm it and it will start dropping more frames than necessary/run into long GPU stalls. This will be really bad on older hardware, and still be bad on newer hardware.")),(0,s.kt)("p",null,"May I know a bit more details?"),(0,s.kt)("p",null,"By the way, this PR does not shoving too many frames. Indeed, it has one and exactly one rasterization ending (i.e. submit data to OS) in each vsync interval. Thus, it behaves exactly the same as a super-smooth app, which also provide one and exactly one data to system per vsync interval.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36917",source:"github",createTime:"2022-10-27T23:24:31Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"I see, will try to work towards the target")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/36921",source:"github",createTime:"2022-10-28T16:35:25Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"What happens when an application decicdes to just repeatedly call this method? How does it know that it's only called it once per vsync? ")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114117",source:"github",createTime:"2022-10-28T23:18:17Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@chunhtai sure, done")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36921",source:"github",createTime:"2022-10-28T23:26:00Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield I see your point: If repeatedly call this method, ",(0,s.kt)("em",{parentName:"p"},"and at the same time")," the whole UI thread pipeline is much faster than 16ms, then we end up running multiple UI thread pipeline  inside one vsync interval. In other words, multi window.render per vsync interval. I admit is a waste - but it is the user who is doing the wrong thing ;) Just like, users can put a ton of Opacity and see rasterizer jank, or they can run sync operations on ui thread and observe ui jank, etc. Nobody can stop them from doing the wrong thing and observe bad outcome.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114117",source:"github",createTime:"2022-10-28T23:27:02Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@cbracken done ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608018585025118217/1035696084963577957"},"https://discord.com/channels/608014603317936148/608018585025118217/1035696084963577957")),(0,s.kt)("p",null,"Btw, is it polite to ask for test exemption directly when creating this PR or I should wait for a few days?")),(0,s.kt)(c,{author:"Hixie",link:"https://github.com/flutter/flutter/issues/114117",source:"github",createTime:"2022-10-28T23:27:34Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"test-exemption: code refactor with no semantic change")),(0,s.kt)(c,{author:"chunhtai",link:"https://github.com/flutter/flutter/issues/114117",source:"github",createTime:"2022-10-28T23:33:39Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Btw, is it polite to ask for test exemption directly when creating this PR or I should wait for a few days?")),(0,s.kt)("p",null,"If you think the PR should be exempted, I don't think there is an inappropriate grace period to ask for NTE as far as I know.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114117",source:"github",createTime:"2022-10-28T23:37:49Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@chunhtai I see, thank you")),(0,s.kt)(c,{author:"auto-submit",link:"https://github.com/flutter/flutter/issues/114117",source:"github",createTime:"2022-10-29T01:43:38Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"auto label is removed for flutter/flutter, pr: 114117, due to - The status or check suite ",(0,s.kt)("a",{parentName:"p",href:"http://flutter-rob/#/flutter/premerge_prs?pr=114117"},"Google testing")," has failed. Please fix the issues identified (or deflake) before re-applying this label.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114290",source:"github",createTime:"2022-10-29T13:41:43Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"minor-code-cleanup-remove-redundant-return"},"Minor code cleanup: remove redundant return"),(0,s.kt)("p",null,"Find this when reading source code. Maybe next time it can be caught by a linter :)"),(0,s.kt)("h2",{id:"pre-launch-checklist-39"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"Hixie",link:"https://github.com/flutter/flutter/issues/114290",source:"github",createTime:"2022-10-31T18:41:49Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"test-exemption: code refactor with no semantic change"),(0,s.kt)("p",null,"That said, it would be great to file an issue on the linter to ask for a lint to catch this kind of thing.")),(0,s.kt)(c,{author:"auto-submit",link:"https://github.com/flutter/flutter/issues/114290",source:"github",createTime:"2022-10-31T22:20:08Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"auto label is removed for flutter/flutter, pr: 114290, due to - The status or check suite ",(0,s.kt)("a",{parentName:"p",href:"http://flutter-rob/#/flutter/premerge_prs?pr=114290"},"Google testing")," has failed. Please fix the issues identified (or deflake) before re-applying this label.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114290",source:"github",createTime:"2022-10-31T22:47:12Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"That said, it would be great to file an issue on the linter to ask for a lint to catch this kind of thing.")),(0,s.kt)("p",null,"Totally agree, here it is: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/dart-lang/linter/issues/3804"},"https://github.com/dart-lang/linter/issues/3804"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114391",source:"github",createTime:"2022-11-01T03:58:28Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"tiny-fix-about-outdated-message"},"Tiny fix about outdated message"),(0,s.kt)("p",null,"The message is in ",(0,s.kt)("inlineCode",{parentName:"p"},"_ensureOutputIsNotJsonRpcError"),', and that method is called both in runSkia and runRasterizer. Thus, it is not reasonable to say "... skia output ..." because it can also be a rasterizer output.'),(0,s.kt)("h2",{id:"pre-launch-checklist-40"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"jiahaog",link:"https://github.com/flutter/flutter/issues/114290",source:"github",createTime:"2022-11-01T06:53:52Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"auto label is removed for flutter/flutter, pr: 114290, due to - The status or check suite ",(0,s.kt)("a",{parentName:"p",href:"http://flutter-rob/#/flutter/premerge_prs?pr=114290"},"Google testing")," has failed. Please fix the issues identified (or deflake) before re-applying this label.")),(0,s.kt)("p",null,'This seems to be some sort of infrastructure issue. I\'ve overridden the "Google testing" status check and this PR should be ok to land. Googlers, please see b/256753114 for more details.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114400",source:"github",createTime:"2022-11-01T07:39:12Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"incorrect-rendering-of-snapshotwidget"},"Incorrect rendering of ",(0,s.kt)("inlineCode",{parentName:"h3"},"SnapshotWidget")),(0,s.kt)("p",null,"Close ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/114398"},"https://github.com/flutter/flutter/issues/114398")),(0,s.kt)("h3",{id:"problem-description"},"Problem description"),(0,s.kt)("p",null,"In short, the SnapshotWidget is rendered differently when enabled vs disabled."),(0,s.kt)("p",null,"Reproduction:"),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:ui' as ui;\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  final binding = TestWidgetsFlutterBinding.ensureInitialized();\n  testWidgets('SnapshotWidget should have same result when enabled', (tester) async {\n    binding.window\n      ..physicalSizeTestValue = const Size(10, 10)\n      ..devicePixelRatioTestValue = 1;\n    addTearDown(() => binding.window\n      ..clearPhysicalSizeTestValue()\n      ..clearDevicePixelRatioTestValue());\n\n    final controller = SnapshotController(allowSnapshotting: false);\n    await tester.pumpWidget(MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: Container(\n        color: Colors.black,\n        padding: const EdgeInsets.only(right: 0.6, bottom: 0.6),\n        child: SnapshotWidget(\n          controller: controller,\n          child: Container(\n            margin: const EdgeInsets.only(right: 0.4, bottom: 0.4),\n            color: Colors.blue,\n          ),\n        ),\n      ),\n    ));\n\n    final imageWhenDisabled = await _captureImage(tester.element(find.byType(MaterialApp)));\n\n    controller.allowSnapshotting = true;\n    await tester.pump();\n\n    final imageWhenEnabled = await _captureImage(tester.element(find.byType(MaterialApp)));\n    await expectLater(imageWhenEnabled, matchesReferenceImage(imageWhenDisabled));\n  });\n}\n\nFuture<ui.Image> _captureImage(Element element) {\n  assert(element.renderObject != null);\n  RenderObject renderObject = element.renderObject!;\n  while (!renderObject.isRepaintBoundary) {\n    renderObject = renderObject.parent! as RenderObject;\n  }\n  assert(!renderObject.debugNeedsPaint);\n  final OffsetLayer layer = renderObject.debugLayer! as OffsetLayer;\n  return layer.toImage(renderObject.paintBounds);\n}\n"))),(0,s.kt)("p",null,"If you dump the images, will see:"),(0,s.kt)("p",null,"imageWhenDisabled\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/199182280-2001019b-0b3c-452a-99fa-42d42c60dcf8.png",alt:"image"})),(0,s.kt)("p",null,"imageWhenEnabled\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/199182308-d4c65422-085a-4e86-b849-55043bd4d481.png",alt:"image"})),(0,s.kt)("h3",{id:"how-pr-solves-it"},"How PR solves it"),(0,s.kt)("p",null,"It seems that this is caused by integer rounding. For example, suppose our SnapshotWidget (and thus its Layer) is 9.4 pixels, then after toImageSync will get a 10x10 (or 9x9?) ui.Image instead of a 9.4x9.4 image - since image size must be integer. Then, next time we paint this ui.Image, the original code will paint the 10x10 rectangle area into the 9.4x9.4 Canvas, thus causing resizing of the content. The PR will remember the real size is 9.4 instead of 10, so next time when painting the ui.Image we will paint the 9.4x9.4 rectangle area into the 9.4x9.4 canvas, so no resize of content."),(0,s.kt)("h2",{id:"pre-launch-checklist-41"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"goderbauer",link:"https://github.com/flutter/flutter/issues/113817",source:"github",createTime:"2022-11-01T22:26:45Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Can you update this PR with the latest master to make sure what is actually changed by this?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113817",source:"github",createTime:"2022-11-01T23:36:33Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Done merging (wait for ci though, but the idea is clear)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114400",source:"github",createTime:"2022-11-01T23:40:38Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@jonahwilliams done")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114400",source:"github",createTime:"2022-11-02T00:02:37Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"You are welcome!"),(0,s.kt)("p",null,"(I will update code soon)")),(0,s.kt)(c,{author:"goderbauer",link:"https://github.com/flutter/flutter/issues/112735",source:"github",createTime:"2022-11-02T00:53:49Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,'Sorry for the trouble, but you\'ll also have to rebase this to the latest master to make the "ci.yaml validation" check happy.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112735",source:"github",createTime:"2022-11-02T01:24:21Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Done")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114467",source:"github",createTime:"2022-11-02T01:44:28Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"refactor-usages-of-physicalsizetestvalue-to-simplify-code-and-improve-dx"},"Refactor usages of ",(0,s.kt)("inlineCode",{parentName:"h3"},"physicalSizeTestValue")," to simplify code and improve DX"),(0,s.kt)("p",null,"Just a small refactor. Using:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"  set physicalSizeCurrentTestValue(ui.Size value) {\n    physicalSizeTestValue = value;\n    addTearDown(clearPhysicalSizeTestValue);\n  }\n")),(0,s.kt)("p",null,"We can make setting physical size test values a bit better in the following two aspects:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Code is less duplicated. Originally need to specify set value + clear value, now only need one call"),(0,s.kt)("li",{parentName:"ol"},"Writing new tests are less error-prone, especially for new learners of Flutter, thus increasing DX. When I firstly learn Flutter, I often wrongly write down set test value calls, ",(0,s.kt)("em",{parentName:"li"},"without")," the clear value calls. Then the tests works pretty well when isolated, but you know, it fails weirdly when run sequentially because the later tests have wrong physical size. As a new learner of Flutter (years ago), it took me some time before realizing it is this bug. Thus, it would be great to avoid the possibility of such problem from the beginning.")),(0,s.kt)("h2",{id:"pre-launch-checklist-42"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114468",source:"github",createTime:"2022-11-02T01:52:26Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-error-when-resetting-configurations-in-tear-down-phase"},"Fix error when resetting configurations in tear down phase"),(0,s.kt)("p",null,"(This is WIP, since I want to see whether this change will make regression test fail or not)"),(0,s.kt)("p",null,"Consider this simple example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/scheduler.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  testWidgets('addTearDown should work', (tester) async { // <-- THIS FAILS\n    timeDilation = 2;\n    addTearDown(() => timeDilation = 1);\n  });\n\n  testWidgets('directly reset should work', (tester) async { // <-- this is ok\n    timeDilation = 2;\n    timeDilation = 1;\n  });\n}\n")),(0,s.kt)("p",null,"It yields:"),(0,s.kt)("details",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"/Volumes/MyExternal/ExternalRefCode/flutter/bin/flutter --no-color test --machine --start-paused test/a.dart\nTesting started at 09:50 ...\n\n\u2550\u2550\u2561 EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nThe following assertion was thrown running a test:\nThe timeDilation was changed and not reset by the test.\n\nWhen the exception was thrown, this was the stack:\n#0      SchedulerBinding.debugAssertNoTimeDilation.<anonymous closure> (package:flutter/src/scheduler/binding.dart:662:9)\n#1      SchedulerBinding.debugAssertNoTimeDilation (package:flutter/src/scheduler/binding.dart:665:6)\n#2      TestWidgetsFlutterBinding._verifyInvariants (package:flutter_test/src/binding.dart:968:12)\n#3      AutomatedTestWidgetsFlutterBinding._verifyInvariants (package:flutter_test/src/binding.dart:1433:11)\n#4      TestWidgetsFlutterBinding._runTestBody (package:flutter_test/src/binding.dart:952:7)\n<asynchronous suspension>\n\nThe test description was:\n  addTearDown should work\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n\nTest failed. See exception logs above.\nThe test description was: addTearDown should work\n"))),(0,s.kt)("p",null,"In other words, we do not allow resetting configurations in ",(0,s.kt)("inlineCode",{parentName:"p"},"addTearDown")," (or ",(0,s.kt)("inlineCode",{parentName:"p"},"tearDown"),"). Instead, we must do it at the end of the closure."),(0,s.kt)("p",null,"IMHO resetting things in ",(0,s.kt)("inlineCode",{parentName:"p"},"addTearDown"),"/",(0,s.kt)("inlineCode",{parentName:"p"},"tearDown")," is a commonly seen practice. For example, ",(0,s.kt)("inlineCode",{parentName:"p"},"window.physicalSize")," can be reset in a tear-down function, and even Flutter test code inside the framework does so a lot of times. A quick search also shows that, such as ",(0,s.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/6854658/explain-the-setup-and-teardown-python-methods-used-in-test-cases"},"this example"),", resetting in tear down holds even for other tests such as Python."),(0,s.kt)("p",null,"By disallowing so, Flutter devs may have a bit more friction when learning Flutter, since they may firstly write down code that follows common practice, realizing it does not work, and change it."),(0,s.kt)("p",null,"It is also inconsistent with other parts of the Flutter. As mentioned above, ",(0,s.kt)("inlineCode",{parentName:"p"},"window.physicalSize")," can be reset in a tear-down function, but things like timeDilation cannot."),(0,s.kt)("p",null,"The PR can also make code a bit simpler. Originally, whenever writing setup code (e.g. ",(0,s.kt)("inlineCode",{parentName:"p"},"timeDilation=2"),'), we must put tear down code at the end of the function, and wrap with a try-finally. But with the PR, it can be put near the setup code, so it is a bit cleaner for code readers. By the way, this is also a bit like the "defer" keyword in go - something like ',(0,s.kt)("inlineCode",{parentName:"p"},"configure(); defer reset(); other_functions()")," will let the reset be executed last."),(0,s.kt)("p",null,"In some cases, this seems to simplify code a lot. For example, in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/pull/113830#discussion_r1005887028"},"https://github.com/flutter/flutter/pull/113830#discussion_r1005887028"),", I have to introduce a weird timeDilation reset that seems to have no pairing timeDilation modification (and cause confusion of readers - even code reviewers). With this PR, the reset will be put to the next line of modification, so it is clear."),(0,s.kt)("h2",{id:"pre-launch-checklist-43"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113817",source:"github",createTime:"2022-11-02T02:05:52Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"ping :) @caseyhillers, since "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If you still see failures, feel free to ping a Googler for help. You're welcome to ping me on any PRs (my GitHub is @caseyhillers) and I'll take a look. There's an internal switch to mark it as passing as if rebasing isn't working, it likely indicates a separate PR is causing the failures. ",(0,s.kt)("a",{parentName:"p",href:"https://discord.com/channels/608014603317936148/608018585025118217/1037051780443414628"},"https://discord.com/channels/608014603317936148/608018585025118217/1037051780443414628")))),(0,s.kt)(c,{author:"CaseyHillers",link:"https://github.com/flutter/flutter/issues/113817",source:"github",createTime:"2022-11-02T02:16:00Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"ping :) @CaseyHillers")),(0,s.kt)("p",null,"You can ignore this failure for now. Google Testing can only run if a Flutter hacker approves your PR. Internally, it says there's no LGTMs, and it marks the status as failed (there's an internal tracking bug for making this status show pending instead of failing)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113817",source:"github",createTime:"2022-11-02T02:18:49Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@CaseyHillers Thanks, get it")),(0,s.kt)(c,{author:"jonahwilliams",link:"https://github.com/flutter/flutter/issues/114400",source:"github",createTime:"2022-11-02T03:00:23Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"FYI @dnfield / @goderbauer as secondary review")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114481",source:"github",createTime:"2022-11-02T05:31:06Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"tiny-improvement-of-routesettings-display"},"Tiny improvement of RouteSettings display"),(0,s.kt)("p",null,"When name is null, originally it prints something like: ",(0,s.kt)("inlineCode",{parentName:"p"},'RouteSettings("null", null)'),". But we know ",(0,s.kt)("inlineCode",{parentName:"p"},'"null"')," looks like a string instead of a real null. So I change to ",(0,s.kt)("inlineCode",{parentName:"p"},"RouteSettings(null, null)")," when that is null."),(0,s.kt)("h2",{id:"pre-launch-checklist-44"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114488",source:"github",createTime:"2022-11-02T08:04:03Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"tiny-code-cleanup-remove-unnecessary-comparisons"},"Tiny code cleanup: remove unnecessary comparisons"),(0,s.kt)("p",null,"The flags themselves are normal variables, so seems no need to check equality before assigning."),(0,s.kt)("p",null,"This PR is so small that I dare not ask for a test exemption or a review :P (Anyway I will continue working on flutter_smooth and those big PRs in a few days when I am not that busy)"),(0,s.kt)("h2",{id:"pre-launch-checklist-45"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/flutter/issues/114488",source:"github",createTime:"2022-11-02T08:04:06Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114502",source:"github",createTime:"2022-11-02T13:39:44Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"ensure-methods-like-dispose-are-not-async-by-accident"},"Ensure methods like dispose are not async by accident"),(0,s.kt)("p",null,"Tiny PR, just ensure nobody will accidentially write sth like ",(0,s.kt)("inlineCode",{parentName:"p"},"Future<void> didChangeDependencies()")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"Future<void> dispose")),(0,s.kt)("h2",{id:"pre-launch-checklist-46"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114506",source:"github",createTime:"2022-11-02T13:56:28Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"clarify-what-animatedbuilder-really-speeds-up-when-using-child"},"Clarify what AnimatedBuilder really speeds up when using ",(0,s.kt)("inlineCode",{parentName:"h3"},"child")),(0,s.kt)("p",null,"When I was reading AnimatedBuilder doc (when not that familiar w/ Flutter), I wrongly have the following conclusion: Suppose I have the following, and MyWidget constructs a huge tree:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},"return AnimatedBuilder(\n  builder: () => AnimatedOpacity(child: Padding(padding: ..., child: MyWidget())),\n);\n\nvs\n\nreturn AnimatedBuilder(\n  builder: (child) => AnimatedOpacity(child: child),\n  child: Padding(padding: ..., child: MyWidget()),\n);\n")),(0,s.kt)("p",null,"Then, reading the ",(0,s.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/AnimatedBuilder-class.html"},"doc"),", I think this will be very little performance boost when using this ",(0,s.kt)("inlineCode",{parentName:"p"},"child"),". It is because,"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If your builder function contains a subtree that does not depend on the animation, it's more efficient to build that subtree once instead of rebuilding it on every animation tick.")),(0,s.kt)("p",null,'So I thought: Yes, I do have a subtree (Padding + MyWidget) that does not change, and this trick can make them built once instead of many times. But it is very fast, because it just creates two objects! (Here, I understood the "a subtree" in the doc as the Padding+MyWidget two objects, while in reality we know it should mean the whole subtree that MyWidget and its descedent widgets build.)'),(0,s.kt)("p",null,"Thus, I add a few lines to clarify this. Hope future flutter new learners do not get confused as me!"),(0,s.kt)("h2",{id:"pre-launch-checklist-47"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114467",source:"github",createTime:"2022-11-04T23:32:41Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Secondly, I think having two similarly named setters, one that cleans up after itself and one that doesn't, is still pretty unintuitive for developers. There is still a lot of potential for making a mistake, say by accidentally setting physicalSizeTestValue instead of physicalSizeCurrentTestValue and expecting it to automatically do clearPhysicalSizeTestValue.")),(0,s.kt)("p",null,'What about renaming it to: physicalSizeTestValue vs physicalSizeTestValueAutoClear? Then nobody can use it by mistake since the latter says "auto clear"')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/114726",source:"github",createTime:"2022-11-04T23:41:53Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"themedata-does-not-respect-colorscheme-for-tabbar-checkbox-etc"},(0,s.kt)("inlineCode",{parentName:"h3"},"ThemeData")," does not respect ",(0,s.kt)("inlineCode",{parentName:"h3"},"ColorScheme")," for TabBar, CheckBox, etc"),(0,s.kt)("p",null,"Close ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/114601"},"https://github.com/flutter/flutter/issues/114601")),(0,s.kt)("h2",{id:"pre-launch-checklist-48"},"Pre-launch Checklist"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#overview"},"Contributor Guide")," and followed the process outlined there for submitting PRs."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene"},"Tree Hygiene")," wiki page, which explains my responsibilities."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I read and followed the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo"},"Flutter Style Guide"),", including ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#features-we-expect-every-widget-to-implement"},"Features we expect every widget to implement"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I signed the ",(0,s.kt)("a",{parentName:"li",href:"https://cla.developers.google.com/"},"CLA"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I listed at least one issue that this PR fixes in the description above."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I updated/added relevant documentation (doc comments with ",(0,s.kt)("inlineCode",{parentName:"li"},"///"),")."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","I added new tests to check the change I am making, or this PR is ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"test-exempt"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","All existing and new tests are passing.")),(0,s.kt)("p",null,"If you need help, consider asking for advice on the #hackers-new channel on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Discord"),".")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36911",source:"github",createTime:"2022-11-05T03:00:01Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield "),(0,s.kt)("p",null,"(content of this comment is moved to: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/37341"},"https://github.com/flutter/engine/pull/37341"),")")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36911",source:"github",createTime:"2022-11-05T03:04:13Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"(content is also moved to #37341)"),(0,s.kt)("details",null,(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"@dnfield and we need to see that changes to this won't negatively impact existing benchmarks/users")),(0,s.kt)("p",null,"Could you please give some hints? I guess I have no permission to execute skia perf as it seems only run on master or other flutter branches. Thus, maybe I can do nothing except for creating a PR and see skia perf after it is merged..."))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/37340",source:"github",createTime:"2022-11-05T03:28:15Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-jank-and-large-jumping-frame-by-controlling-rasterizer-ending-time-v2"},"Fix jank and large-jumping frame by controlling rasterizer ending time (V2)"),(0,s.kt)("p",null,"Previous: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36837"},"https://github.com/flutter/engine/pull/36837"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/37341",source:"github",createTime:"2022-11-05T05:38:58Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"fix-janks-caused-by-await-vsync-in-classical-flutter-v2"},"Fix janks caused by await vsync in classical Flutter (V2)"),(0,s.kt)("p",null,"Previous: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36911"},"https://github.com/flutter/engine/pull/36911")),(0,s.kt)("p",null,"(Since the previous one is already closed and I have no permission to reopen, I guess I should create a new issue such that it can be put in the review queue)"),(0,s.kt)("p",null,"As @dnfield points out in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36911#issuecomment-1294089965"},"https://github.com/flutter/engine/pull/36911#issuecomment-1294089965"),":"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"we need some motivating benchmarks that clearly show what benefits would be gained here, and we need to see that changes to this won't negatively impact existing benchmarks/users.")),(0,s.kt)("p",null,"Thus, reproduction is shown in the section below. As for existing benchmarks, could you please give some hints? I guess I have no permission to execute skia perf as it seems only run on master or other flutter branches. Thus, maybe I can do nothing except for creating a PR and see skia perf after it is merged..."),(0,s.kt)("h2",{id:"reproduction"},"Reproduction"),(0,s.kt)("h3",{id:"setup-and-analysis"},"Setup and analysis"),(0,s.kt)("p",null,'In the benchmark, I deliberately make a dead loop to mimic the case when ui thread runs for smaller than but very close to 16.67ms. This is quite hacky and may not work on your device, so please modify the hardcoded time in the code if you cannot reproduce it. But hopefully this is ok as a "motivating" benchmark you mentioned :)'),(0,s.kt)("p",null,"I also realize this seems hard to reproduce if the await vsync is called per 16ms. Instead, when I make ui thread deliberately janky (e.g. ~100ms), so that await vsync is not called for ~100ms, this is reproduced. Not sure why, but anyway regardless of why this happens, the PR can solve it."),(0,s.kt)("p",null,"In the screenshots below, I add red vertical lines manually by mimicking the ",(0,s.kt)("inlineCode",{parentName:"p"},"VSYNC")," interval (this is the correct interval that I have fixed previously, so can use it). As we can see, the AwaitVsync is called ",(0,s.kt)("em",{parentName:"p"},"before")," the vsync (which is imaginary and not shown in figure), but we miss it for a whole 16.67ms."),(0,s.kt)("h3",{id:"data"},"Data"),(0,s.kt)("p",null,"Code: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter/tree/feat/await-vsync-directly-call"},"https://github.com/fzyzcjy/flutter/tree/feat/await-vsync-directly-call")," + standard engine build (because this is reproduction not bugfix)\nRun it: ",(0,s.kt)("inlineCode",{parentName:"p"},"/path/to/flutter drive --profile -t test_driver/run_app.dart --driver test_driver/near_full_tim_perf_test.dart")),(0,s.kt)("p",null,"Sample result timeline json:\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_smooth/files/9942874/near_full_time_perf.timeline.json.zip"},"near_full_time_perf.timeline.json.zip")),(0,s.kt)("p",null,"Sample screenshot:"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/200097914-a449aeaa-37da-4766-9e8c-deb7d808a907.png",alt:"image"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/5236035/200097947-28bfd75c-362a-4dab-a4d8-7f0d2936b16f.png",alt:"image"}))),(0,s.kt)(c,{author:"flutter-dashboard",link:"https://github.com/flutter/engine/issues/37341",source:"github",createTime:"2022-11-05T05:39:01Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"It looks like this pull request may not have tests. Please make sure to add tests before merging. If you need ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#tests"},"an exemption")," to this rule, contact Hixie on the #hackers channel in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Chat"},"Chat")," (don't just cc him here, he won't see it! ",(0,s.kt)("em",{parentName:"p"},"He's on Discord!"),")."),(0,s.kt)("p",null,"If you are not sure if you need tests, consider this rule of thumb: the purpose of a test is to make sure someone doesn't accidentally revert the fix. Ask yourself, ",(0,s.kt)("strong",{parentName:"p"},"is there anything in your PR that you feel it is important we not accidentally revert back to how it was before your fix?")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reviewers"),": Read the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/wiki/Tree-hygiene#how-to-review-code"},"Tree Hygiene page")," and make sure this patch meets those guidelines before LGTMing.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36826",source:"github",createTime:"2022-11-05T05:47:02Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"...I would suggest filing a specific bug ")),(0,s.kt)("p",null,"done: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/114738"},"https://github.com/flutter/flutter/issues/114738"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36797",source:"github",createTime:"2022-11-05T05:48:33Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Hi @iskakaushik may I know what previous work you have done? Thanks")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/113828",source:"github",createTime:"2022-11-05T05:52:18Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"So... What should I do now? I have already replied to all questions and it has been more than a week :)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36912",source:"github",createTime:"2022-11-05T06:20:26Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield What about changing like this:"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/37343"},"https://github.com/flutter/engine/pull/37343"))),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/37343",source:"github",createTime:"2022-11-05T06:37:08Z",mdxType:"DiscussionComment"},(0,s.kt)("h3",{id:"remove-3n-1-jank-and-big-jump-when-n-rasterization-misses-deadline-v2"},"Remove (3N-1) jank and big-jump when N rasterization misses deadline (V2)"),(0,s.kt)("p",null,"This PR is just a rough sketch. If it looks OK, I will polish (e.g. add tests, refine code etc)"),(0,s.kt)("p",null,"Previous:  ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36912"},"https://github.com/flutter/engine/pull/36912")),(0,s.kt)("p",null,"Background: The original proposal completely removes back-pressure. Thus, suppose a rasterzation takes 1000ms, then we will be running ui thread unnecessarily for 60 times."),(0,s.kt)("p",null,"Proposed new change: Maybe we should conditionally remove back-pressure. More specifically, when we see PipelineFull, we ",(0,s.kt)("em",{parentName:"p"},"only"),' ignore it and continue running ui thread under the following condition: The current ongoing rasterization has not been running for a long time. This condition holds for the figure in my previous comment, so the main scenario that this PR wants to solve is happy. On the other hand, for the "1000ms-long-rasterization" case, we will only waste one single ui pipeline computation, instead of 60 computations, so the waste does not look like a lot. I agree one waste is indeed waste, but it is the cost to pay (user battery consumes a tiny bit more) if we want to make the UI that user feels completely smooth at 60FPS (which is one of the goals of Flutter IMHO).'),(0,s.kt)("p",null,"Remark: Code comments also describe this as well.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36797",source:"github",createTime:"2022-11-05T07:17:20Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"We don't want to expose this kind of internal of the VM to users.")),(0,s.kt)("p",null,"Hmm ",(0,s.kt)("inlineCode",{parentName:"p"},"NotifyIdle"),' seems very generic - there seems no VM internals, but only "hey I am idle for a period of time". It is not something like ',(0,s.kt)("inlineCode",{parentName:"p"},"NotifyDartToDoYoungGC")," which is internals :) But instead, it is a well-defined interface so dev can tell flutter it is free."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Perhaps it would be more appropriate to expose a different API around whether an animation is occurring currently, although I think @iskakaushik has already done some work on that.")),(0,s.kt)("p",null,"Sorry but I do not quite get it. In flutter_smooth (detailed design: ",(0,s.kt)("a",{parentName:"p",href:"https://cjycode.com/flutter_smooth/design/"},"https://cjycode.com/flutter_smooth/design/"),"), a janky frame can last for a long time (for convenience of description, suppose 100ms). Then, during this whole period, the Dart in UI thread will be busy, so it is impossible to execute any C++ code ",(0,s.kt)("em",{parentName:"p"},"unless")," Dart code explicitly do so. With this PR, flutter_smooth will explictly call notifyIdle with an explicit deadline of ~14ms (much longer than classical Flutter). This is a bit like the pull vs push model problem.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36834",source:"github",createTime:"2022-11-05T07:29:01Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Same problems as the other NotifyIdle PR - these are details we don't want to expose to users.")),(0,s.kt)("p",null,"Same confusion as in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36797"},"https://github.com/flutter/engine/pull/36797"),'. Still think "dev tells system it can be idle for a period of time" is not something internal but a reasonable thing.'),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"NotifyIdle might not do anything, or it might do a lot more than the user expects.")),(0,s.kt)("p",null,"Totally agree - I have checked Dart NotifyIdle source code and saw it uses something like history data to guess how long GC will happen now, but it can run for longer or shorter time."),(0,s.kt)("p",null,"As for this specific case of GC: If it does not do anything, there is surely no problem. If it do a lot more, it is still no problem. This is because, a much longer execution means that, even if we do not NotifyIdle, GC will happen somewhere in the future with at least this time duration (because garbage only accumulates)."),(0,s.kt)("p",null,"It is also like what we do with ",(0,s.kt)("inlineCode",{parentName:"p"},"sleep"),". Dart (and all lang) have a ",(0,s.kt)("inlineCode",{parentName:"p"},"sleep")," function and can specify how long to sleep. But as you have pointed out earlier, the thread may not be woken up at that time because of OS schedule. In other words, sleep may sleep a lot more than the user expects. Or, even consider this: Each and every line of Dart code (indeed Java/... as well), will have the possibility that, it takes much much longer time to finish! For example, needs 10ms to finish a single ",(0,s.kt)("inlineCode",{parentName:"p"},"i++"),". This is just fact, not something that I make up - because we have the stop-the-world GC. When STW happens, the code just stuck. Furthermore, we know operating systems which Flutter targets schedule threads with preemption. Thus, it is totally possible that any line of code executes much longer than the user expects even if using C/C++/Rust/etc. So, shall we ban ",(0,s.kt)("inlineCode",{parentName:"p"},"sleep")," from users if the same logic holds, or ban any language with GC, or ban any operating system that is not real-time ;) (Surely I am joking!)"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"In all honesty, it would be nice to get rid of it entirely since it is hard to reason about and seems to come out wrong very frequently. If users can change this arbitrarily it will make it much harder to reason about what's going on in an application.")),(0,s.kt)("p",null,"Sorry but do not get it."),(0,s.kt)("p",null,'May I know a bit more details why "wrong very frequently"? IMHO it just "notifies it is idle" and the only way to be wrong is the user forgets it can run for a much longer time - then my discussions about sleep and STW GC holds.'),(0,s.kt)("p",null,'And I also wonder why "much harder to reason about what\'s going on in an application"? IMHO it is shown in the timeline, so it is quite clear what is going on. And this is indeed a Dart VM specific thing, so it is even not that related to Flutter framework and engine.')),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36921",source:"github",createTime:"2022-11-05T07:52:10Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36921#issuecomment-1294116970"},"https://github.com/flutter/engine/pull/36921#issuecomment-1294116970")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Same comment as on the linked PR applies.")),(0,s.kt)("p",null,"I have made a v2 of that PR: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/37341"},"https://github.com/flutter/engine/pull/37341")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"In particular, it's really hard to reason about how to use this parameter correctly. A lot of the work you're doing seems to be geared towards ignoring/overriding the vsync that the system gives us instead of cooperating with it more.")),(0,s.kt)("p",null,"I agree, it is overriding the system vsync. However, this is used for flutter_smooth, which ",(0,s.kt)("em",{parentName:"p"},"really")," has to override some things in the engine..."),(0,s.kt)("p",null,"Does it help if we mark it as ",(0,s.kt)("inlineCode",{parentName:"p"},"@experimental"),"? Then we can freely change it in the future without worrying potential users excluding flutter_smooth."),(0,s.kt)("p",null,"P.S. Why this is needed: ",(0,s.kt)("a",{parentName:"p",href:"https://cjycode.com/flutter_smooth/design/infra/brake/"},"https://cjycode.com/flutter_smooth/design/infra/brake/")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"In particular, vsync is an important source of backpressure that we must respect. We cannot just keep shoving frames at the system compositor, we will overwhelm it and it will start dropping more frames than necessary/run into long GPU stalls. This will be really bad on older hardware, and still be bad on newer hardware.")),(0,s.kt)("p",null,"Replied above - IMHO seems not a problem?")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36917",source:"github",createTime:"2022-11-05T08:00:22Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"allowing the developer to specify the vsync time is a big footgun, the developer is very likely to get this wrong and overwhelm the system.")),(0,s.kt)("p",null,'If this API is for normal dev then I totally agree. So same as in the other reply - shall we mark it as "not suitable for normal dev" and mainly for flutter_smooth (and others who knows deeply about flutter)?'),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The direction of this information has to go in the opposite direction: we need to improve or make it easier for developers to understand the target vsync time and how much time they have left to do work rather than letting developers tell the system what they think vsync should be.")),(0,s.kt)("p",null,"That's perfect for the standard flutter, but IMHO may be impossible for flutter_smooth (e.g. ",(0,s.kt)("a",{parentName:"p",href:"https://cjycode.com/flutter_smooth/design/infra/preempt/idea"},"https://cjycode.com/flutter_smooth/design/infra/preempt/idea"),"). In flutter_smooth, there are just tons of long janky frame (e.g. say one frame takes 100ms), and flutter_smooth trigger a lot of ",(0,s.kt)("em",{parentName:"p"},"extra")," window.render."),(0,s.kt)("p",null,"Related: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/pull/36438"},"https://github.com/flutter/engine/pull/36438")," - one onBeginFrame with multiple window.render.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/36607",source:"github",createTime:"2022-11-05T08:04:22Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"It's not clear to me how this is any different from observing the Duration you get in onBeginFrame.")),(0,s.kt)("p",null,"In flutter_smooth, one janky frame can be (e.g.) 100ms, and we need to submit window.render per vsync interval. When is the next vsync interval? This question is answered by this PR."),(0,s.kt)("p",null,"In other words, in the 100ms janky frame, onBeginFrame only provides first vsync target time, while we need to know the rest."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"As I'm mentioning in some other PRs, let's discuss further on discord.")),(0,s.kt)("p",null,"Sure, will discuss when you have time (guess you are on weekends so reply here firstly)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/flutter/issues/112436",source:"github",createTime:"2022-11-05T08:19:36Z",mdxType:"DiscussionComment"},(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I'm still not quite clear on why this is a solution that should live in the framework.\nTickers have no means of interrupting work more often. Tickers have no special knowledge of when vsync happens. This seems to introduce a number of problems that will be difficult for developers to reason about. I think this could be solved in a package instead. ")),(0,s.kt)("p",null,"Totally agree. However, I cannot find out a method to let it live in a package while making flutter_smooth implementable. flutter_smooth need to support AnimationController and everything built on it (CircularProgressIndicator, SlideTransition, ...), so it seems impossible to create a 3rd party package. Otherwise, at least users cannot use ",(0,s.kt)("em",{parentName:"p"},"any")," builtin widget such as CircularProgressIndicator and higher-level widgets, as long as a widget directly or indirectly depends on AnimationController/TickerProviderMixin. Users also cannot use most of the other 3rd party packages, because they use Flutter's AnimationController/TickerProviderMixin as well."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I'm going to close this for now but let's discuss more on discord if you like.")),(0,s.kt)("p",null,"(Firstly reply here before discussing on Discord since I guess you are on weekends)")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/37341",source:"github",createTime:"2022-11-05T19:43:59Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"Part of the work to make this benchmark would be coming up with an at least somewhat realistic case where UI thread work goes to ",(0,s.kt)("em",{parentName:"p"},"just")," over vsync budget. Yes, you can construct a benchmark that does exactly that, but what's an example of a real application that actually behaves that way on a real device? IME, it's more common to see an application that ",(0,s.kt)("em",{parentName:"p"},"far")," exceeds budget on some frames and then is under budget on many other frames, rather than one that is consistently just ",(0,s.kt)("em",{parentName:"p"},"slightly")," over budget. In fact, if you had one that was consistently over budget, you should instead look to optimize your consistent workload to be less - it's an application problem rather than an engine one. But right now, we don't have good ways to fix the problem where some frames over budget ",(0,s.kt)("em",{parentName:"p"},"despite")," the fact that you're not doing anything all that unreasonble - for example, oyu're showing a screen full of text that can't all do its initial layout within frame budget on your target device."),(0,s.kt)("p",null,"You should be able to run the devicelab benchmarks locally and do experiments before and after -see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md"},"https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md")),(0,s.kt)("p",null,"I'm closing this PR for the same reasons as the previous PR right now - it's not in a state that is ready for review, and much of this content might be more appropriate for an issue right now.")),(0,s.kt)(c,{author:"dnfield",link:"https://github.com/flutter/engine/issues/37343",source:"github",createTime:"2022-11-05T19:45:57Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"No, conditionally removing back-pressure is still bad: it will cause other problems for sure, since we're conditionally letting the CPU get ahead of the GPU. It'll just be harder to figure out when that's happening and fix it.")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/37341",source:"github",createTime:"2022-11-05T21:58:20Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Yes, you can construct a benchmark that does exactly that, but what's an example of a real application that actually behaves that way on a real device? IME, it's more common to see an application that far exceeds budget on some frames and then is under budget on many other frames, rather than one that is consistently just slightly over budget.")),(0,s.kt)("p",null,"IMHO it is more like a math/statistics problem than a programming problem. Using my observation from previous issue (this problem happens as long as 2ms before deadline), and a vsync interval is 16.67ms. Then, for a very rough estimation, suppose the real time used is uniform from shortest time to longest time possible - this is very rough, but it somehow makes sense because an app targets from highest-end to lowest-end devices. Then, we have 2/16.67 = 12% probability. Surely that does not sound huge, but it does happen and affect user feeling. Indeed, my flutter_smooth's goal is 60FPS (on 60FPS machine) and this single problem drops 7.2FPS if using the above very rough analysis - and in reality I roughly see more drops."),(0,s.kt)("p",null,'So, answering "it\'s more common to see..." - surely yes, but Flutter is a high-performance framework and wants to be 60FPS, instead of a framework that allows jank from time to time ;)'),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"}," In fact, if you had one that was consistently over budget, you should instead look to optimize your consistent workload to be less - it's an application problem rather than an engine one")),(0,s.kt)("p",null,'By the way, this bug is not only about "over budget" - if ui thread runs over 16.67ms (on 60hz machine) one can never get 60FPS (but can still be 60FPS with flutter_smooth - that\'s another story). In addition, a frame that is computed quicker than 16.67ms in one phone may be slower than 16.67ms on another lower end phone.'),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"But right now, we don't have good ways to fix the problem where some frames over budget despite the fact that you're not doing anything all that unreasonble - for example, oyu're showing a screen full of text that can't all do its initial layout within frame budget on your target device.")),(0,s.kt)("p",null,"Indeed we have - flutter_smooth :) That example is indeed the first example that I have solved when prototyping (btw thanks for providing that example as a canonical test base!).\n(As long as all PRs are merged after discussions and modifications)"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"You should be able to run the devicelab benchmarks locally and do experiments before and after -see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md?rgh-link-date=2022-11-05T19%3A43%3A59Z"},"flutter/flutter@master/dev/devicelab/README.md"),"\nI'm closing this PR for the same reasons as the previous PR right now - it's not in a state that is ready for review, and much of this content might be more appropriate for an issue right now.")),(0,s.kt)("p",null,"I see, thanks (originally I used macrobenchmark folder directly)")),(0,s.kt)(c,{author:"fzyzcjy",link:"https://github.com/flutter/engine/issues/37343",source:"github",createTime:"2022-11-05T21:59:41Z",mdxType:"DiscussionComment"},(0,s.kt)("p",null,"@dnfield "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"it will cause other problems for sure, since we're conditionally letting the CPU get ahead of the GPU. It'll just be harder to figure out when that's happening and fix it.")),(0,s.kt)("p",null,'May I know a bit more about "other problems"? Because without knowing more, I have no idea what they are thus how to solve it.')))}d.isMDXComponent=!0;const h={title:"Conversations"},m=void 0,p={unversionedId:"insight/conversation",id:"insight/conversation",title:"Conversations",description:"",source:"@site/docs/insight/conversation.md",sourceDirName:"insight",slug:"/insight/conversation",permalink:"/flutter_smooth/insight/conversation",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_smooth/tree/master/website/docs/insight/conversation.md",tags:[],version:"current",frontMatter:{title:"Conversations"},sidebar:"tutorialSidebar",previous:{title:"Design doc",permalink:"/flutter_smooth/insight/design-doc"}},k={},y=[],f={toc:y};function g(e){let{components:t,...i}=e;return(0,s.kt)("wrapper",(0,n.Z)({},f,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"This page contains a (sorted) copy of discussions happened on various places. The original sources can be seen in ",(0,s.kt)("inlineCode",{parentName:"p"},"scripts/generation/comments"),".")),(0,s.kt)(d,{mdxType:"ConversationGenerated"}))}g.isMDXComponent=!0}}]);