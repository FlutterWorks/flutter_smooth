"use strict";(self.webpackChunksmooth=self.webpackChunksmooth||[]).push([[3610],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=a.createContext({}),s=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=i,f=d["".concat(m,".").concat(u)]||d[u]||c[u]||r;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9273:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={},o="Several time bases",l={unversionedId:"design/infra/time/time-base",id:"design/infra/time/time-base",title:"Several time bases",description:"They can be converted back and forth via TimeConverter class.",source:"@site/docs/design/infra/time/time-base.md",sourceDirName:"design/infra/time",slug:"/design/infra/time/time-base",permalink:"/flutter_smooth/design/infra/time/time-base",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_smooth/tree/master/website/docs/design/infra/time/time-base.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pitfall: Off-by-1-frame",permalink:"/flutter_smooth/design/infra/time/pitfall-off"},next:{title:"Garbage collection",permalink:"/flutter_smooth/design/infra/gc/"}},m={},s=[{value:"<code>DateTime.now()</code>, <code>SimpleDateTime.now()</code>",id:"datetimenow-simpledatetimenow",level:2},{value:"<code>SystemFrameTimeStamp</code>, <code>fml::TimePoint</code>",id:"systemframetimestamp-fmltimepoint",level:2},{value:"<code>AdjustedFrameTimeStamp</code>, <code>Ticker</code>",id:"adjustedframetimestamp-ticker",level:2},{value:"<code>PointerEventTimeStamp</code>, <code>PointerEvent.timeStamp</code>",id:"pointereventtimestamp-pointereventtimestamp",level:2},{value:"Android",id:"android",level:4},{value:"iOS",id:"ios",level:4}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"several-time-bases"},"Several time bases"),(0,i.kt)("p",null,"They can be converted back and forth via ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeConverter")," class."),(0,i.kt)("h2",{id:"datetimenow-simpledatetimenow"},(0,i.kt)("inlineCode",{parentName:"h2"},"DateTime.now()"),", ",(0,i.kt)("inlineCode",{parentName:"h2"},"SimpleDateTime.now()")),(0,i.kt)("p",null,"The one everyone is familiar with."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleDateTime")," has same semantics as ",(0,i.kt)("inlineCode",{parentName:"p"},"DateTime")," but probably more lightweight."),(0,i.kt)("h2",{id:"systemframetimestamp-fmltimepoint"},(0,i.kt)("inlineCode",{parentName:"h2"},"SystemFrameTimeStamp"),", ",(0,i.kt)("inlineCode",{parentName:"h2"},"fml::TimePoint")),(0,i.kt)("p",null,"Who uses it"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SchedulerBinding.currentSystemFrameTimeStamp")),(0,i.kt)("li",{parentName:"ul"},'The "rawTimeStamp" argument in ',(0,i.kt)("inlineCode",{parentName:"li"},"handleBeginFrame(Duration? rawTimeStamp)")),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"fml::TimePoint")," use extensively in the C++ engine.")),(0,i.kt)("p",null,"Notice the engine wants to accept ",(0,i.kt)("inlineCode",{parentName:"p"},"fml::TimePoint")," most of the time. Therefore, for example, when we want to submit a vsync target time to engine, we should (usually) convert it to ",(0,i.kt)("inlineCode",{parentName:"p"},"fml::TimePoint"),"."),(0,i.kt)("p",null,"By the way, the dig if you are interested are as follows. Or, look at dig here: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/flutter/flutter/issues/112610#issuecomment-1264096036"},"https://github.com/flutter/flutter/issues/112610#issuecomment-1264096036")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Dig in deteails (if you are interested)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"// animator.cc\n  const fml::TimePoint frame_target_time =\n      frame_timings_recorder_->GetVsyncTargetTime();\n  delegate_.OnAnimatorBeginFrame(frame_target_time, frame_number);\n\n// ... which finally calls platfrom_configuration.cc\nvoid PlatformConfiguration::BeginFrame(fml::TimePoint frameTime,\n                                       uint64_t frame_number) {\n  tonic::CheckAndHandleError(\n      tonic::DartInvoke(begin_frame_.Get(), {\n                                                Dart_NewInteger(microseconds),\n                                                Dart_NewInteger(frame_number),\n                                            }));\n}\n"))),(0,i.kt)("h2",{id:"adjustedframetimestamp-ticker"},(0,i.kt)("inlineCode",{parentName:"h2"},"AdjustedFrameTimeStamp"),", ",(0,i.kt)("inlineCode",{parentName:"h2"},"Ticker")),(0,i.kt)("p",null,"Who uses it"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SchedulerBinding.currentFrameTimeStamp")),(0,i.kt)("li",{parentName:"ul"},"The time stamp passed from ",(0,i.kt)("inlineCode",{parentName:"li"},"Ticker"),"'s onTick callback")),(0,i.kt)("p",null,"As can be seen in ",(0,i.kt)("inlineCode",{parentName:"p"},"SchedulerBinding")," source code, this one is effectively converted from ",(0,i.kt)("inlineCode",{parentName:"p"},"SchedulerBinding.currentSystemFrameTimeStamp"),"  by ",(0,i.kt)("inlineCode",{parentName:"p"},"_adjustForEpoch")," method."),(0,i.kt)("h2",{id:"pointereventtimestamp-pointereventtimestamp"},(0,i.kt)("inlineCode",{parentName:"h2"},"PointerEventTimeStamp"),", ",(0,i.kt)("inlineCode",{parentName:"h2"},"PointerEvent.timeStamp")),(0,i.kt)("p",null,"Who uses it:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PointerEvent.timeStamp"))),(0,i.kt)("p",null,"Digging into code, we see it comes from a time stamp provided together with pointer events from the Android and iOS operating system."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Dig in deteails (if you are interested)"),(0,i.kt)("h4",{id:"android"},"Android"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'static void DispatchPointerDataPacket(JNIEnv* env,\n                                      jobject jcaller,\n                                      jlong shell_holder,\n                                      jobject buffer,\n                                      jint position) {\n  uint8_t* data = static_cast<uint8_t*>(env->GetDirectBufferAddress(buffer));\n  auto packet = std::make_unique<flutter::PointerDataPacket>(data, position);\n  ANDROID_SHELL_HOLDER->GetPlatformView()->DispatchPointerDataPacket(\n      std::move(packet));\n}\n\n...\n\n      // Start of methods from FlutterView\n      {\n          .name = "nativeDispatchPointerDataPacket",\n          .signature = "(JLjava/nio/ByteBuffer;I)V",\n          .fnPtr = reinterpret_cast<void*>(&DispatchPointerDataPacket),\n      },\n')),(0,i.kt)("p",null,"FlutterJNI.java"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"  // ------ Start Touch Interaction Support ---\n  /** Sends a packet of pointer data to Flutter's engine. */\n  @UiThread\n  public void dispatchPointerDataPacket(@NonNull ByteBuffer buffer, int position) {\n    ensureRunningOnMainThread();\n    ensureAttachedToNative();\n    nativeDispatchPointerDataPacket(nativeShellHolderId, buffer, position);\n  }\n")),(0,i.kt)("p",null,"AndroidTouchProcessor.java"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"  public boolean onTouchEvent(@NonNull MotionEvent event, @NonNull Matrix transformMatrix) {\n    addPointerForIndex;\n    renderer.dispatchPointerDataPacket(packet, packet.position());\n\n  private void addPointerForIndex(MotionEvent event\n    long timeStamp = event.getEventTime() * 1000; // Convert from milliseconds to microseconds.\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/view/MotionEvent#getEventTime()"},"https://developer.android.com/reference/android/view/MotionEvent#getEventTime()")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Retrieve the time this event occurred, in the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/os/SystemClock#uptimeMillis()"},"SystemClock.uptimeMillis()")," time base.")),(0,i.kt)("p",null,"Thus it is ",(0,i.kt)("inlineCode",{parentName:"p"},"SystemClock.uptimeMillis"),"."),(0,i.kt)("h4",{id:"ios"},"iOS"),(0,i.kt)("p",null,"FlutterEngine.mm"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},"- (void)dispatchPointerDataPacket:(std::unique_ptr<flutter::PointerDataPacket>)packet {\n  if (!self.platformView) {\n    return;\n  }\n  self.platformView->DispatchPointerDataPacket(std::move(packet));\n}\n")),(0,i.kt)("p",null,"Then"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},"// Dispatches the UITouches to the engine. Usually, the type of change of the touch is determined\n// from the UITouch's phase. However, FlutterAppDelegate fakes touches to ensure that touch events\n// in the status bar area are available to framework code. The change type (optional) of the faked\n// touch is specified in the second argument.\n- (void)dispatchTouches:(NSSet*)touches\n    pointerDataChangeOverride:(flutter::PointerData::Change*)overridden_change\n                        event:(UIEvent*)event {\n  [_engine.get() dispatchPointerDataPacket:std::move(packet)];\n")),(0,i.kt)("p",null,"About timestamp generation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objc"},"- (void)dispatchTouches:(NSSet*)touches\n    pointer_data.time_stamp = touch.timestamp * kMicrosecondsPerSecond;\n\n- (flutter::PointerData)generatePointerDataForFake {\n  // `UITouch.timestamp` is defined as seconds since system startup. Synthesized events can get this\n  // time with `NSProcessInfo.systemUptime`. See\n  // https://developer.apple.com/documentation/uikit/uitouch/1618144-timestamp?language=objc\n  pointer_data.time_stamp = [[NSProcessInfo processInfo] systemUptime] * kMicrosecondsPerSecond;\n")),(0,i.kt)("p",null,"Thus, it is",(0,i.kt)("inlineCode",{parentName:"p"},"UITouch.timestamp"),", indeed also system uptime."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uitouch/1618144-timestamp?language=objc"},"https://developer.apple.com/documentation/uikit/uitouch/1618144-timestamp?language=objc")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The value of this property is the time, in seconds since system startup, that the touch originated or was last changed.\nFor a definition of the time since system startup, see the description of the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/foundation/nsprocessinfo/1414553-systemuptime?language=objc"},"systemUptime")," method of the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/foundation/nsprocessinfo?language=objc"},"NSProcessInfo")," class."))))}c.isMDXComponent=!0}}]);