"use strict";(self.webpackChunksmooth=self.webpackChunksmooth||[]).push([[2853],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,f=m["".concat(u,".").concat(d)]||m[d]||s[d]||a;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2366:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(7462),i=(t(7294),t(3905));const a={},o="Before",l={unversionedId:"design/infra/rasterizer-queue/before",id:"design/infra/rasterizer-queue/before",title:"Before",description:"Code",source:"@site/docs/design/infra/rasterizer-queue/before.md",sourceDirName:"design/infra/rasterizer-queue",slug:"/design/infra/rasterizer-queue/before",permalink:"/flutter_smooth/design/infra/rasterizer-queue/before",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_smooth/tree/master/website/docs/design/infra/rasterizer-queue/before.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rasterizer queue",permalink:"/flutter_smooth/design/infra/rasterizer-queue/"},next:{title:"After",permalink:"/flutter_smooth/design/infra/rasterizer-queue/after"}},u={},p=[{value:"Code",id:"code",level:2},{value:"Summary",id:"summary",level:2}],c={toc:p};function s(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"before"},"Before"),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)("p",null,"Let us firstly review the scenario before modification. Looking at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/flutter/engine/blob/main/shell/common/animator.cc"},(0,i.kt)("inlineCode",{parentName:"a"},"animator.cc")),", we see the following (simplified) code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'Animator::Animator()\n    : layer_tree_pipeline_(std::make_shared<LayerTreePipeline>(2)) {}\n\nvoid Animator::BeginFrame() {\n  if (!producer_continuation_) {\n    // We may already have a valid pipeline continuation in case a previous\n    // begin frame did not result in an Animation::Render. Simply reuse that\n    // instead of asking the pipeline for a fresh continuation.\n    producer_continuation_ = layer_tree_pipeline_->Produce();\n\n    if (!producer_continuation_) {\n      // If we still don\'t have valid continuation, the pipeline is currently\n      // full because the consumer is being too slow. Try again at the next\n      // frame interval.\n      TRACE_EVENT0("flutter", "PipelineFull");\n      RequestFrame();\n      return;\n    }\n  }\n  \n  // We have acquired a valid continuation from the pipeline and are ready\n  // to service potential frame.\n  FML_DCHECK(producer_continuation_);\n\n  delegate_.OnAnimatorBeginFrame();\n}\n\nvoid Animator::Render(std::shared_ptr<flutter::LayerTree> layer_tree) {\n  // Commit the pending continuation.\n  PipelineProduceResult result = producer_continuation_.Complete(layer_tree);\n\n  if (!result.success) {\n    FML_DLOG(INFO) << "No pending continuation to commit";\n    return;\n  }\n\n  ... notify rasterizer ...\n}\n')),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Briefly recall the Flutter internal implementation:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Animator::BeginFrame")," is called in each frame, and finally calls ",(0,i.kt)("inlineCode",{parentName:"li"},"OnAnimatorBeginFrame")," which will really call Dart side ",(0,i.kt)("inlineCode",{parentName:"li"},"handleBeginFrame")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"handleDrawFrame")," etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Animator::Render")," is called by Dart ",(0,i.kt)("inlineCode",{parentName:"li"},"window.render"),". It is normally called after paint/composite/etc phase, and flutter_smooth call it extra times whenever we want to submit an extra frame."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"layer_tree_pipeline_")," is a ",(0,i.kt)("inlineCode",{parentName:"li"},"LayerTreePipeline")," with pipeline depth ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," (seen in constructor). The ",(0,i.kt)("inlineCode",{parentName:"li"},"Animator")," is the producer of the pipeline, and the ",(0,i.kt)("inlineCode",{parentName:"li"},"Rasterizer")," is the consumer. ")),(0,i.kt)("p",null,"Briefly speaking, the code about pipeline works as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"During ",(0,i.kt)("inlineCode",{parentName:"li"},"BeginFrame"),', we either reuse or create a "continuation" in pipeline (i.e. occupy a seat). If we cannot, it means pipeline is full, and we skip the current frame.'),(0,i.kt)("li",{parentName:"ul"},"During ",(0,i.kt)("inlineCode",{parentName:"li"},"Render"),", we put Layer tree into the occupied seat. But if there is not any occupied seat, we indeed do nothing.")))}s.isMDXComponent=!0}}]);