"use strict";(self.webpackChunksmooth=self.webpackChunksmooth||[]).push([[2429],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=d(r),m=i,f=c["".concat(l,".").concat(m)]||c[m]||u[m]||a;return r?n.createElement(f,o(o({ref:t},s),{},{components:r})):n.createElement(f,o({ref:t},s))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=c;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var d=2;d<a;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},907:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>d});var n=r(7462),i=(r(7294),r(3905));const a={},o="PreemptBuilder",p={unversionedId:"design/infra/preempt/what-high",id:"design/infra/preempt/what-high",title:"PreemptBuilder",description:"If this package stops at the API above, nobody will use it - you will have to write a ton of code to modify the Layer tree by yourself. The goal in this part is to create a developer-friendly API, indeed the PreemptBuilder. Recall the definition of PreemptBuilder(builder ...) - put the things that you want to be smooth inside the builder, and we are done. How is that implemented?",source:"@site/docs/design/infra/preempt/what-high.md",sourceDirName:"design/infra/preempt",slug:"/design/infra/preempt/what-high",permalink:"/flutter_smooth/design/infra/preempt/what-high",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_smooth/tree/master/website/docs/design/infra/preempt/what-high.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What to do",permalink:"/flutter_smooth/design/infra/preempt/what-low"},next:{title:"Post draw frame",permalink:"/flutter_smooth/design/infra/preempt/post-draw"}},l={},d=[],s={toc:d};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"preemptbuilder"},"PreemptBuilder"),(0,i.kt)("p",null,"If this package stops at the API above, nobody will use it - you will have to write a ton of code to modify the ",(0,i.kt)("inlineCode",{parentName:"p"},"Layer")," tree by yourself. The goal in this part is to create a developer-friendly API, indeed the ",(0,i.kt)("inlineCode",{parentName:"p"},"PreemptBuilder"),". Recall the definition of ",(0,i.kt)("inlineCode",{parentName:"p"},"PreemptBuilder(builder: ..., child: ...)")," - put the things that you want to be smooth inside the builder, and we are done. How is that implemented?"),(0,i.kt)("p",null,"The core idea is to use an auxiliary tree in addition to the main tree. In other words, we create a separate ",(0,i.kt)("inlineCode",{parentName:"p"},"BuildOwner"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"PipelineOwner"),", root widget, etc. Then, we are free to call its ",(0,i.kt)("inlineCode",{parentName:"p"},"buildScope"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"flushLayout"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"flushPaint"),", etc, at ",(0,i.kt)("em",{parentName:"p"},"any time")," at any frequency we like. Its input is a widget tree (indeed ",(0,i.kt)("inlineCode",{parentName:"p"},"PreemptBuilder.builder")," output), and its output is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Layer")," tree (indeed to be inserted to the main tree)."),(0,i.kt)("p",null,"Then, we need to graft the auxiliary-tree\u2019s layer tree and the main-tree\u2019s layer tree. Shortly speaking, we do so in ",(0,i.kt)("inlineCode",{parentName:"p"},"paint")," function by ",(0,i.kt)("inlineCode",{parentName:"p"},"context.addLayer")," and so on. Details can be found in the code."))}u.isMDXComponent=!0}}]);